Logger warning: deactivated ERROR level
 1 now checking plugin ABI version for ../../src/libdlvhexplugin-dllite
 1 now calling plugin import function for ../../src/libdlvhexplugin-dllite
 1 plugin import function returned 0x7f1acc9cdec0
 1 selectLoadedPlugins: already loaded: {dlvhex-aggregateplugin[internal],dlvhex-existsplugin[internal],dlvhex-functionplugin[internal],dlvhex-higherorderplugin[internal],dlvhex-manualevalheuristicsplugin[internal],dlvhex-queryplugin[internal],dlvhex-strongnegationplugin[internal],dlvhex-weakconstraintplugin[internal]}
 1 processing options for plugin dlvhex-manualevalheuristicsplugin[internal]
 1 currently have <--repair=test1.owl>
 1 processing options for plugin dlvhex-queryplugin[internal]
 1 currently have <--repair=test1.owl>
 1 processing options for plugin dlvhex-aggregateplugin[internal]
 1 currently have <--repair=test1.owl>
 1 processing options for plugin dlvhex-strongnegationplugin[internal]
 1 currently have <--repair=test1.owl>
 1 processing options for plugin dlvhex-higherorderplugin[internal]
 1 currently have <--repair=test1.owl>
 1 processing options for plugin dlvhex-weakconstraintplugin[internal]
 1 currently have <--repair=test1.owl>
 1 processing options for plugin dlvhex-existsplugin[internal]
 1 currently have <--repair=test1.owl>
 1 processing options for plugin dlvhex-functionplugin[internal]
 1 currently have <--repair=test1.owl>
 1 processing options for plugin dlvhex-dlliteplugin
 1 currently have <--repair=test1.owl>
 1 adding plugin atoms from plugin dlvhex-manualevalheuristicsplugin[internal]
 1 adding plugin atoms from plugin dlvhex-queryplugin[internal]
 1 adding plugin atoms from plugin dlvhex-aggregateplugin[internal]
 1 Adding aggregate external atoms with an input arity of up to 0
 1   got plugin atom max0
 1   got plugin atom min0
 1   got plugin atom sum0
 1   got plugin atom times0
 1   got plugin atom avg0
 1   got plugin atom count0
 1 adding plugin atoms from plugin dlvhex-strongnegationplugin[internal]
 1 adding plugin atoms from plugin dlvhex-higherorderplugin[internal]
 1 adding plugin atoms from plugin dlvhex-weakconstraintplugin[internal]
 1 adding plugin atoms from plugin dlvhex-existsplugin[internal]
 1 Adding exists atom with an input arity of up to 1
 1   got plugin atom exists0
 1   got plugin atom exists1
 1 adding plugin atoms from plugin dlvhex-functionplugin[internal]
 1 Adding functional atom with an input arity of up to 1
 1   got plugin atom functionCompose
 1   got plugin atom functionDecompose0
 1   got plugin atom functionDecompose1
 1   got plugin atom isFunctionTerm
 1   got plugin atom getArity
 1   got plugin atom functionDecompose
 1 adding plugin atoms from plugin dlvhex-dlliteplugin
 1 Constructor of cDL plugin is started
 1 Constructor of rDL plugin is started
 1 Constructor of consDL plugin is started
 1 Constructor of inconsDL plugin is started
 1   got plugin atom cDL
 1   got plugin atom rDL
 1   got plugin atom consDL
 1   got plugin atom inconsDL
 1 Before starting repair model generator
 1 Plugin provides custom model generator factory
 1 debugFilePrefix='dbg_test1.hex'
 1 ManualEvalHeuristicsPlugin::createParserModules()
 1 QueryPlugin::createParserModules()
 1 StrongNegationPlugin::createParserModules()
 1 HigherOrderPlugin::createParserModules()
 1 ExistsPlugin::createParserModules()
 1 DLLitePlugin::createParserModules(ProgramCtx& ctx)
 1 stored term Term(sub) which got ID(0x10000000,  18 term constant)
 1 stored term Term(op) which got ID(0x10000000,  19 term constant)
 1 stored term Term(conf) which got ID(0x10000000,  20 term constant)
 1 stored term Term(funct) which got ID(0x10000000,  21 term constant)
 1 stored term Term(inv) which got ID(0x10000000,  22 term constant)
 1 stored term Term(confref) which got ID(0x10000000,  23 term constant)
 1 stored term Term(X) which got ID(0x12000000,  24 term variable)
 1 stored term Term(Y) which got ID(0x12000000,  25 term variable)
 1 stored term Term(Z) which got ID(0x12000000,  26 term variable)
 1 gACS getAuxiliaryConstantSymbol for o ID(0x00000000,   0 atom ordinary_ground)
 1 gACS created symbol 'aux_o_0_0'
 1 gACS PM::aP/0x1bfb180 adding predicate ID(0x10800000,  27 term constant), knownAddresses was 0
 1 gACS returning id ID(0x10800000,  27 term constant) for aux symbol aux_o_0_0
 1  reset edb 
 1 starting to parse
 1 checking groundness of tuple <ID(0x10000000,  28 term constant),ID(0x10000000,  29 term constant)>
 1 stored oatom OrdinaryAtom(0,'b("c")',[ID(0x10000000,  28 term constant),ID(0x10000000,  29 term constant)]) which got ID(0x00000000,   0 atom ordinary_ground)
 1 stored atom OrdinaryAtom(0,'b("c")',[ID(0x10000000,  28 term constant),ID(0x10000000,  29 term constant)]) which got id ID(0x00000000,   0 atom ordinary_ground)
 1 added fact with id ID(0x00000000,   0 atom ordinary_ground) to edb
 1 checking groundness of tuple <ID(0x10000000,  30 term constant),ID(0x12000000,  24 term variable)>
 1 stored oatom OrdinaryAtom(1000000,'d(X)',[ID(0x10000000,  30 term constant),ID(0x12000000,  24 term variable)]) which got ID(0x01000000,   0 atom ordinary_nonground)
 1 stored atom OrdinaryAtom(1000000,'d(X)',[ID(0x10000000,  30 term constant),ID(0x12000000,  24 term variable)]) which got id ID(0x01000000,   0 atom ordinary_nonground)
 1 storing external atom ExternalAtom(&ID(0x10000000,  14 term constant)[[ID(0x10000000,  31 term constant),ID(0x10000000,  32 term constant),ID(0x10000000,  33 term constant),ID(0x10000000,  34 term constant),ID(0x10000000,  35 term constant),ID(0x10000000,  36 term constant)]]([ID(0x12000000,  24 term variable)]) pluginAtom=null auxInputPredicate=ID_FAIL
 1 external atom ExternalAtom(&ID(0x10000000,  14 term constant)[[ID(0x10000000,  31 term constant),ID(0x10000000,  32 term constant),ID(0x10000000,  33 term constant),ID(0x10000000,  34 term constant),ID(0x10000000,  35 term constant),ID(0x10000000,  36 term constant)]]([ID(0x12000000,  24 term variable)]) pluginAtom=null auxInputPredicate=ID_FAIL got id ID(0x06000000,   0 atom external)
 1 added rule with id ID(0x30080000,   0 rule regular) to idb
 1 storing external atom ExternalAtom(&ID(0x10000000,  14 term constant)[[ID(0x10000000,  31 term constant),ID(0x10000000,  37 term constant),ID(0x10000000,  38 term constant),ID(0x10000000,  39 term constant),ID(0x10000000,  40 term constant),ID(0x10000000,  41 term constant)]]([ID(0x12000000,  24 term variable)]) pluginAtom=null auxInputPredicate=ID_FAIL
 1 external atom ExternalAtom(&ID(0x10000000,  14 term constant)[[ID(0x10000000,  31 term constant),ID(0x10000000,  37 term constant),ID(0x10000000,  38 term constant),ID(0x10000000,  39 term constant),ID(0x10000000,  40 term constant),ID(0x10000000,  41 term constant)]]([ID(0x12000000,  24 term variable)]) pluginAtom=null auxInputPredicate=ID_FAIL got id ID(0x06000000,   1 atom external)
 1 created constraint Rule([] <- [ID(0x26000000,   1 literal external)]) with id ID(0x31080000,   1 rule constraint)
 1 added rule with id ID(0x31080000,   1 rule constraint) to idb
 1 checking groundness of tuple <ID(0x10000000,  37 term constant),ID(0x10000000,  42 term constant),ID(0x12000000,  24 term variable)>
 1 stored oatom OrdinaryAtom(1000000,'cp("B",X)',[ID(0x10000000,  37 term constant),ID(0x10000000,  42 term constant),ID(0x12000000,  24 term variable)]) which got ID(0x01000000,   1 atom ordinary_nonground)
 1 stored atom OrdinaryAtom(1000000,'cp("B",X)',[ID(0x10000000,  37 term constant),ID(0x10000000,  42 term constant),ID(0x12000000,  24 term variable)]) which got id ID(0x01000000,   1 atom ordinary_nonground)
 1 checking groundness of tuple <ID(0x10000000,  28 term constant),ID(0x12000000,  24 term variable)>
 1 stored oatom OrdinaryAtom(1000000,'b(X)',[ID(0x10000000,  28 term constant),ID(0x12000000,  24 term variable)]) which got ID(0x01000000,   2 atom ordinary_nonground)
 1 stored atom OrdinaryAtom(1000000,'b(X)',[ID(0x10000000,  28 term constant),ID(0x12000000,  24 term variable)]) which got id ID(0x01000000,   2 atom ordinary_nonground)
 1 added rule with id ID(0x30000000,   2 rule regular) to idb
 1 checking groundness of tuple <ID(0x10000000,  37 term constant),ID(0x10000000,  36 term constant),ID(0x12000000,  24 term variable)>
 1 stored oatom OrdinaryAtom(1000000,'cp("D",X)',[ID(0x10000000,  37 term constant),ID(0x10000000,  36 term constant),ID(0x12000000,  24 term variable)]) which got ID(0x01000000,   3 atom ordinary_nonground)
 1 stored atom OrdinaryAtom(1000000,'cp("D",X)',[ID(0x10000000,  37 term constant),ID(0x10000000,  36 term constant),ID(0x12000000,  24 term variable)]) which got id ID(0x01000000,   3 atom ordinary_nonground)
 1 checking groundness of tuple <ID(0x10000000,  30 term constant),ID(0x12000000,  24 term variable)>
 1 stored atom OrdinaryAtom(1000000,'',[ID(0x10000000,  30 term constant),ID(0x12000000,  24 term variable)]) which got id ID(0x01000000,   0 atom ordinary_nonground)
 1 added rule with id ID(0x30000000,   3 rule regular) to idb
 1 parsing returned with success=1
 1 aEAwPA = associateExtAtomsWithPluginAtoms
 1 aEAwPA = associateExtAtomsWithPluginAtoms
 1 rFS =reorderForSafety
 1 rFS safety reordering loop:
 1 rFS  src '&cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X)'
 1 rFS  safevars ''
 1 rFS checking literal &cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X)
 1 rFS  -> checking input safety
 1 rFS  -> inputs safe, adding outputs as safe
 1 rFS  -> transferring
 1 rFS transferSafeLiteralsAndNewlySafeVariables returning with reordered=0 and nottransferred=0
 1 rFS  -> src ''
 1 rFS  -> tgt '&cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X)'
 1 rFS  -> newsafevars 'X'
 1 rFS =reorderForSafety
 1 rFS safety reordering loop:
 1 rFS  src '&cDL["test1.owl",cp,cn,rp,rm,"C"](X)'
 1 rFS  safevars ''
 1 rFS checking literal &cDL["test1.owl",cp,cn,rp,rm,"C"](X)
 1 rFS  -> checking input safety
 1 rFS  -> inputs safe, adding outputs as safe
 1 rFS  -> transferring
 1 rFS transferSafeLiteralsAndNewlySafeVariables returning with reordered=0 and nottransferred=0
 1 rFS  -> src ''
 1 rFS  -> tgt '&cDL["test1.owl",cp,cn,rp,rm,"C"](X)'
 1 rFS  -> newsafevars 'X'
 1 rFS =reorderForSafety
 1 rFS safety reordering loop:
 1 rFS  src 'b(X)'
 1 rFS  safevars ''
 1 rFS checking literal b(X)
 1 rFS  -> safe, marking all variables as safe
 1 rFS  -> transferring
 1 rFS transferSafeLiteralsAndNewlySafeVariables returning with reordered=0 and nottransferred=0
 1 rFS  -> src ''
 1 rFS  -> tgt 'b(X)'
 1 rFS  -> newsafevars 'X'
 1 rFS =reorderForSafety
 1 rFS safety reordering loop:
 1 rFS  src 'd(X)'
 1 rFS  safevars ''
 1 rFS checking literal d(X)
 1 rFS  -> safe, marking all variables as safe
 1 rFS  -> transferring
 1 rFS transferSafeLiteralsAndNewlySafeVariables returning with reordered=0 and nottransferred=0
 1 rFS  -> src ''
 1 rFS  -> tgt 'd(X)'
 1 rFS  -> newsafevars 'X'
 1 LiberalSafetyChecker::createDependencyGraph
 1 Computing strongly connected components in attribute dependency graph
 1 0 attributes depend cyclically on external attributes
 1 Attribute d#1 is externally acyclic
 1 Attribute d#1 is domain-expansion safe
 1 Variable r3/X is bounded
 1 Fulfilled precondition of attribute cp#2
 1 Attribute r0:&cDL["test1.owl",cp1,cn1,rp1,rn1,"D"]#o1 is externally acyclic
 1 Attribute r0:&cDL["test1.owl",cp1,cn1,rp1,rn1,"D"]#o1 is domain-expansion safe
 1 Attribute r0:&cDL["test1.owl",cp1,cn1,rp1,rn1,"D"]#i1 is externally acyclic
 1 Attribute r0:&cDL["test1.owl",cp1,cn1,rp1,rn1,"D"]#i1 is domain-expansion safe
 1 Fulfilled precondition of attribute r0:&cDL["test1.owl",cp1,cn1,rp1,rn1,"D"]#o1
 1 Attribute r0:&cDL["test1.owl",cp1,cn1,rp1,rn1,"D"]#i2 is externally acyclic
 1 Attribute r0:&cDL["test1.owl",cp1,cn1,rp1,rn1,"D"]#i2 is domain-expansion safe
 1 Fulfilled precondition of attribute r0:&cDL["test1.owl",cp1,cn1,rp1,rn1,"D"]#o1
 1 Attribute r0:&cDL["test1.owl",cp1,cn1,rp1,rn1,"D"]#i3 is externally acyclic
 1 Attribute r0:&cDL["test1.owl",cp1,cn1,rp1,rn1,"D"]#i3 is domain-expansion safe
 1 Fulfilled precondition of attribute r0:&cDL["test1.owl",cp1,cn1,rp1,rn1,"D"]#o1
 1 Attribute r0:&cDL["test1.owl",cp1,cn1,rp1,rn1,"D"]#i4 is externally acyclic
 1 Attribute r0:&cDL["test1.owl",cp1,cn1,rp1,rn1,"D"]#i4 is domain-expansion safe
 1 Fulfilled precondition of attribute r0:&cDL["test1.owl",cp1,cn1,rp1,rn1,"D"]#o1
 1 Attribute r0:&cDL["test1.owl",cp1,cn1,rp1,rn1,"D"]#i5 is externally acyclic
 1 Attribute r0:&cDL["test1.owl",cp1,cn1,rp1,rn1,"D"]#i5 is domain-expansion safe
 1 Fulfilled precondition of attribute r0:&cDL["test1.owl",cp1,cn1,rp1,rn1,"D"]#o1
 1 Attribute r0:&cDL["test1.owl",cp1,cn1,rp1,rn1,"D"]#i6 is externally acyclic
 1 Attribute r0:&cDL["test1.owl",cp1,cn1,rp1,rn1,"D"]#i6 is domain-expansion safe
 1 Fulfilled precondition of attribute r0:&cDL["test1.owl",cp1,cn1,rp1,rn1,"D"]#o1
 1 Attribute r1:&cDL["test1.owl",cp,cn,rp,rm,"C"]#o1 is externally acyclic
 1 Attribute r1:&cDL["test1.owl",cp,cn,rp,rm,"C"]#o1 is domain-expansion safe
 1 Attribute r1:&cDL["test1.owl",cp,cn,rp,rm,"C"]#i1 is externally acyclic
 1 Attribute r1:&cDL["test1.owl",cp,cn,rp,rm,"C"]#i1 is domain-expansion safe
 1 Fulfilled precondition of attribute r1:&cDL["test1.owl",cp,cn,rp,rm,"C"]#o1
 1 Attribute r1:&cDL["test1.owl",cp,cn,rp,rm,"C"]#i2 is externally acyclic
 1 Attribute r1:&cDL["test1.owl",cp,cn,rp,rm,"C"]#i2 is domain-expansion safe
 1 Fulfilled precondition of attribute r1:&cDL["test1.owl",cp,cn,rp,rm,"C"]#o1
 1 Attribute r1:&cDL["test1.owl",cp,cn,rp,rm,"C"]#i3 is externally acyclic
 1 Attribute r1:&cDL["test1.owl",cp,cn,rp,rm,"C"]#i3 is domain-expansion safe
 1 Fulfilled precondition of attribute r1:&cDL["test1.owl",cp,cn,rp,rm,"C"]#o1
 1 Attribute r1:&cDL["test1.owl",cp,cn,rp,rm,"C"]#i4 is externally acyclic
 1 Attribute r1:&cDL["test1.owl",cp,cn,rp,rm,"C"]#i4 is domain-expansion safe
 1 Fulfilled precondition of attribute r1:&cDL["test1.owl",cp,cn,rp,rm,"C"]#o1
 1 Attribute r1:&cDL["test1.owl",cp,cn,rp,rm,"C"]#i5 is externally acyclic
 1 Attribute r1:&cDL["test1.owl",cp,cn,rp,rm,"C"]#i5 is domain-expansion safe
 1 Fulfilled precondition of attribute r1:&cDL["test1.owl",cp,cn,rp,rm,"C"]#o1
 1 Attribute r1:&cDL["test1.owl",cp,cn,rp,rm,"C"]#i6 is externally acyclic
 1 Attribute r1:&cDL["test1.owl",cp,cn,rp,rm,"C"]#i6 is domain-expansion safe
 1 Fulfilled precondition of attribute r1:&cDL["test1.owl",cp,cn,rp,rm,"C"]#o1
 1 Attribute cp#2 is externally acyclic
 1 Attribute cp#2 is domain-expansion safe
 1 Fulfilled precondition of attribute r1:&cDL["test1.owl",cp,cn,rp,rm,"C"]#i2
 1 Attribute b#1 is externally acyclic
 1 Attribute b#1 is domain-expansion safe
 1 Variable r2/X is bounded
 1 Fulfilled precondition of attribute cp#2
 1 Exploiting ID(0x26000000,   1 literal external)
 1 Variable r1/X is bounded
 1 Constructing optimized rule
 1 Checking safety of optimized rule
 1 Checking variables of optimized rule
 1 Optimized rule is unsafe
 1 Adding external atom ID(0x26000000,   0 literal external) to the necessary ones for reasons of ordinary safety
 1 resetting custom model generator provider
 1 resetting state
 1 resetting callbacks
 1 resetting modelBuilder
 1 resetting parser
 1 resetting evalgraph
 1 resetting compgraph
 1 resetting depgraph
 1 resetting edbList
 1 resetting inputProvider
 1 resetting aspsoftware
 1 resetting pluginData
 1 resetting pluginEnvironment
 1 resetting registry, usage count was 140 (it should be 2)
 1 resetting pluginAtoms
 1 resetting pluginContainer, usage count was 0 (it should be 1)
 1 Constructing optimized rule
 1 Checking safety of optimized rule
 1 rFS =reorderForSafety
 1 rFS safety reordering loop:
 1 rFS  src '&cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X)'
 1 rFS  safevars ''
 1 rFS checking literal &cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X)
 1 rFS  -> checking input safety
 1 rFS  -> inputs safe, adding outputs as safe
 1 rFS  -> transferring
 1 rFS transferSafeLiteralsAndNewlySafeVariables returning with reordered=0 and nottransferred=0
 1 rFS  -> src ''
 1 rFS  -> tgt '&cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X)'
 1 rFS  -> newsafevars 'X'
 1 Checking variables of optimized rule
 1 Optimized rule is safe
 1 resetting custom model generator provider
 1 resetting state
 1 resetting callbacks
 1 resetting modelBuilder
 1 resetting parser
 1 resetting evalgraph
 1 resetting compgraph
 1 resetting depgraph
 1 resetting edbList
 1 resetting inputProvider
 1 resetting aspsoftware
 1 resetting pluginData
 1 resetting pluginEnvironment
 1 resetting registry, usage count was 140 (it should be 2)
 1 resetting pluginAtoms
 1 resetting pluginContainer, usage count was 0 (it should be 1)
 1 Constructing optimized rule
 1 Checking safety of optimized rule
 1 rFS =reorderForSafety
 1 rFS safety reordering loop:
 1 rFS  src '&cDL["test1.owl",cp,cn,rp,rm,"C"](X)'
 1 rFS  safevars ''
 1 rFS checking literal &cDL["test1.owl",cp,cn,rp,rm,"C"](X)
 1 rFS  -> checking input safety
 1 rFS  -> inputs safe, adding outputs as safe
 1 rFS  -> transferring
 1 rFS transferSafeLiteralsAndNewlySafeVariables returning with reordered=0 and nottransferred=0
 1 rFS  -> src ''
 1 rFS  -> tgt '&cDL["test1.owl",cp,cn,rp,rm,"C"](X)'
 1 rFS  -> newsafevars 'X'
 1 Checking variables of optimized rule
 1 Optimized rule is safe
 1 resetting custom model generator provider
 1 resetting state
 1 resetting callbacks
 1 resetting modelBuilder
 1 resetting parser
 1 resetting evalgraph
 1 resetting compgraph
 1 resetting depgraph
 1 resetting edbList
 1 resetting inputProvider
 1 resetting aspsoftware
 1 resetting pluginData
 1 resetting pluginEnvironment
 1 resetting registry, usage count was 140 (it should be 2)
 1 resetting pluginAtoms
 1 resetting pluginContainer, usage count was 0 (it should be 1)
 1 Constructing optimized rule
 1 Checking safety of optimized rule
 1 rFS =reorderForSafety
 1 rFS safety reordering loop:
 1 rFS  src 'b(X)'
 1 rFS  safevars ''
 1 rFS checking literal b(X)
 1 rFS  -> safe, marking all variables as safe
 1 rFS  -> transferring
 1 rFS transferSafeLiteralsAndNewlySafeVariables returning with reordered=0 and nottransferred=0
 1 rFS  -> src ''
 1 rFS  -> tgt 'b(X)'
 1 rFS  -> newsafevars 'X'
 1 Checking variables of optimized rule
 1 Optimized rule is safe
 1 resetting custom model generator provider
 1 resetting state
 1 resetting callbacks
 1 resetting modelBuilder
 1 resetting parser
 1 resetting evalgraph
 1 resetting compgraph
 1 resetting depgraph
 1 resetting edbList
 1 resetting inputProvider
 1 resetting aspsoftware
 1 resetting pluginData
 1 resetting pluginEnvironment
 1 resetting registry, usage count was 140 (it should be 2)
 1 resetting pluginAtoms
 1 resetting pluginContainer, usage count was 0 (it should be 1)
 1 Constructing optimized rule
 1 Checking safety of optimized rule
 1 rFS =reorderForSafety
 1 rFS safety reordering loop:
 1 rFS  src 'd(X)'
 1 rFS  safevars ''
 1 rFS checking literal d(X)
 1 rFS  -> safe, marking all variables as safe
 1 rFS  -> transferring
 1 rFS transferSafeLiteralsAndNewlySafeVariables returning with reordered=0 and nottransferred=0
 1 rFS  -> src ''
 1 rFS  -> tgt 'd(X)'
 1 rFS  -> newsafevars 'X'
 1 Checking variables of optimized rule
 1 Optimized rule is safe
 1 resetting custom model generator provider
 1 resetting state
 1 resetting callbacks
 1 resetting modelBuilder
 1 resetting parser
 1 resetting evalgraph
 1 resetting compgraph
 1 resetting depgraph
 1 resetting edbList
 1 resetting inputProvider
 1 resetting aspsoftware
 1 resetting pluginData
 1 resetting pluginEnvironment
 1 resetting registry, usage count was 140 (it should be 2)
 1 resetting pluginAtoms
 1 resetting pluginContainer, usage count was 0 (it should be 1)
 1 Domain Expansion Safety: 1 (17 out of 17 attributes are safe)
 1 =createNodesAndIntraRuleDependencies
 1 cNaIRDfR/0 ENTRY
 1 cNaIRDfR/0 =createNodesAndIntraRuleDependenciesForRule for rule ID(0x30080000,   0 rule regular) d(X) :- &cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X).
 1 cNaIRDfR/0 creating node for ID ID(0x30080000,   0 rule regular)
 1 cNaIRDfR/0 adding head item ID(0x01000000,   0 atom ordinary_nonground)
 1 cNaIRDfR/0 adding body literal ID(0x26000000,   0 literal external)
 1 cNaIRDfR/0 adding external atom &cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X)  (aux=ID_FAIL) with id ID(0x06000000,   0 atom external)
 1 cNaIRDfR/0 creating node for ID ID(0x06000000,   0 atom external)
 1 cNaIRDfR/0 cARiR =createAuxiliaryRuleIfRequired for body [ID(0x26000000,   0 literal external)] = &cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X)
 1 cNaIRDfR/0 storing dependency: ID(0x30080000,   0 rule regular) -> ID(0x06000000,   0 atom external) with monotonic=1, naf=0
 1 cNaIRDfR/0 EXIT
 1 cNaIRDfR/0x1 ENTRY
 1 cNaIRDfR/0x1 =createNodesAndIntraRuleDependenciesForRule for rule ID(0x31080000,   1 rule constraint) :- &cDL["test1.owl",cp,cn,rp,rm,"C"](X).
 1 cNaIRDfR/0x1 creating node for ID ID(0x31080000,   1 rule constraint)
 1 cNaIRDfR/0x1 adding body literal ID(0x26000000,   1 literal external)
 1 cNaIRDfR/0x1 adding external atom &cDL["test1.owl",cp,cn,rp,rm,"C"](X)  (aux=ID_FAIL) with id ID(0x06000000,   1 atom external)
 1 cNaIRDfR/0x1 creating node for ID ID(0x06000000,   1 atom external)
 1 cNaIRDfR/0x1 cARiR =createAuxiliaryRuleIfRequired for body [ID(0x26000000,   1 literal external)] = &cDL["test1.owl",cp,cn,rp,rm,"C"](X)
 1 cNaIRDfR/0x1 storing dependency: ID(0x31080000,   1 rule constraint) -> ID(0x06000000,   1 atom external) with monotonic=1, naf=0
 1 cNaIRDfR/0x1 EXIT
 1 cNaIRDfR/0x2 ENTRY
 1 cNaIRDfR/0x2 =createNodesAndIntraRuleDependenciesForRule for rule ID(0x30000000,   2 rule regular) cp("B",X) :- b(X).
 1 cNaIRDfR/0x2 creating node for ID ID(0x30000000,   2 rule regular)
 1 cNaIRDfR/0x2 adding head item ID(0x01000000,   1 atom ordinary_nonground)
 1 cNaIRDfR/0x2 adding body literal ID(0x21000000,   2 literal ordinary_nonground)
 1 cNaIRDfR/0x2 EXIT
 1 cNaIRDfR/0x3 ENTRY
 1 cNaIRDfR/0x3 =createNodesAndIntraRuleDependenciesForRule for rule ID(0x30000000,   3 rule regular) cp("D",X) :- d(X).
 1 cNaIRDfR/0x3 creating node for ID ID(0x30000000,   3 rule regular)
 1 cNaIRDfR/0x3 adding head item ID(0x01000000,   3 atom ordinary_nonground)
 1 cNaIRDfR/0x3 adding body literal ID(0x21000000,   0 literal ordinary_nonground)
 1 cNaIRDfR/0x3 EXIT
 1 =createExternalPredicateInputDependencies
 1 itext1 =ID(0x06000000,   1 atom external)
 1 itext1 checking external atom &cDL["test1.owl",cp,cn,rp,rm,"C"](X)  (aux=ID_FAIL)
 1 itext1 at1 = checking predicate input ID(0x10000000,  37 term constant) at position 1
 1 itext1 at1 PM::aP/0x1c180a0 adding predicate ID(0x10000000,  37 term constant), knownAddresses was 0
 1 itext1 at1 cEPIDfI =createExternalPredicateInputDependenciesForInput (finding all rules with heads that use predicate ID(0x10000000,  37 term constant))
 1 itext1 at1 cEPIDfI found matchin ordinary atom: ID(0x01000000,   3 atom ordinary_nonground)
 1 itext1 at1 cEPIDfI adding external dependency ID(0x06000000,   1 atom external) -> ID(0x30000000,   3 rule regular)
 1 itext1 at1 cEPIDfI found matchin ordinary atom: ID(0x01000000,   1 atom ordinary_nonground)
 1 itext1 at1 cEPIDfI adding external dependency ID(0x06000000,   1 atom external) -> ID(0x30000000,   2 rule regular)
 1 itext1 at2 = checking predicate input ID(0x10000000,  38 term constant) at position 2
 1 itext1 at2 PM::aP/0x1c180a0 adding predicate ID(0x10000000,  38 term constant), knownAddresses was 0
 1 itext1 at2 cEPIDfI =createExternalPredicateInputDependenciesForInput (finding all rules with heads that use predicate ID(0x10000000,  38 term constant))
 1 itext1 at3 = checking predicate input ID(0x10000000,  39 term constant) at position 3
 1 itext1 at3 PM::aP/0x1c180a0 adding predicate ID(0x10000000,  39 term constant), knownAddresses was 0
 1 itext1 at3 cEPIDfI =createExternalPredicateInputDependenciesForInput (finding all rules with heads that use predicate ID(0x10000000,  39 term constant))
 1 itext1 at4 = checking predicate input ID(0x10000000,  40 term constant) at position 4
 1 itext1 at4 PM::aP/0x1c180a0 adding predicate ID(0x10000000,  40 term constant), knownAddresses was 0
 1 itext1 at4 cEPIDfI =createExternalPredicateInputDependenciesForInput (finding all rules with heads that use predicate ID(0x10000000,  40 term constant))
 1 itext0 =ID(0x06000000,   0 atom external)
 1 itext0 checking external atom &cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X)  (aux=ID_FAIL)
 1 itext0 at1 = checking predicate input ID(0x10000000,  32 term constant) at position 1
 1 itext0 at1 PM::aP/0x1c177e0 adding predicate ID(0x10000000,  32 term constant), knownAddresses was 0
 1 itext0 at1 cEPIDfI =createExternalPredicateInputDependenciesForInput (finding all rules with heads that use predicate ID(0x10000000,  32 term constant))
 1 itext0 at2 = checking predicate input ID(0x10000000,  33 term constant) at position 2
 1 itext0 at2 PM::aP/0x1c177e0 adding predicate ID(0x10000000,  33 term constant), knownAddresses was 0
 1 itext0 at2 cEPIDfI =createExternalPredicateInputDependenciesForInput (finding all rules with heads that use predicate ID(0x10000000,  33 term constant))
 1 itext0 at3 = checking predicate input ID(0x10000000,  34 term constant) at position 3
 1 itext0 at3 PM::aP/0x1c177e0 adding predicate ID(0x10000000,  34 term constant), knownAddresses was 0
 1 itext0 at3 cEPIDfI =createExternalPredicateInputDependenciesForInput (finding all rules with heads that use predicate ID(0x10000000,  34 term constant))
 1 itext0 at4 = checking predicate input ID(0x10000000,  35 term constant) at position 4
 1 itext0 at4 PM::aP/0x1c177e0 adding predicate ID(0x10000000,  35 term constant), knownAddresses was 0
 1 itext0 at4 cEPIDfI =createExternalPredicateInputDependenciesForInput (finding all rules with heads that use predicate ID(0x10000000,  35 term constant))
 1 =createHeadHeadUnifyingDependencies
 1 it1:ID(0x01000000,   3 atom ordinary_nonground) = OrdinaryAtom(1000000,'cp("D",X)',[ID(0x10000000,  37 term constant),ID(0x10000000,  36 term constant),ID(0x12000000,  24 term variable)])
 1 it1:ID(0x01000000,   3 atom ordinary_nonground) adding unifying head-head dependency for OrdinaryAtom(1000000,'cp("D",X)',[ID(0x10000000,  37 term constant),ID(0x10000000,  36 term constant),ID(0x12000000,  24 term variable)]) in head of disjunctive rules [] and in head of nondisjunctive rules [5]
 1 it1:ID(0x01000000,   3 atom ordinary_nonground) it2:ID(0x01000000,   1 atom ordinary_nonground)
 1 it1:ID(0x01000000,   3 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'cp("B",X)',[ID(0x10000000,  37 term constant),ID(0x10000000,  42 term constant),ID(0x12000000,  24 term variable)])
 1 it1:ID(0x01000000,   3 atom ordinary_nonground) unifiesWith ENTRY
 1 it1:ID(0x01000000,   3 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  37 term constant),ID(0x10000000,  36 term constant),ID(0x12000000,  24 term variable)]
 1 it1:ID(0x01000000,   3 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  37 term constant),ID(0x10000000,  42 term constant),ID(0x12000000,  24 term variable)]
 1 it1:ID(0x01000000,   3 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  37 term constant) vs ID(0x10000000,  37 term constant)
 1 it1:ID(0x01000000,   3 atom ordinary_nonground) unifiesWith at position 1: checking ID(0x10000000,  36 term constant) vs ID(0x10000000,  42 term constant)
 1 it1:ID(0x01000000,   3 atom ordinary_nonground) unifiesWith EXIT
 1 it1:ID(0x01000000,   3 atom ordinary_nonground) it2:ID(0x01000000,   0 atom ordinary_nonground)
 1 it1:ID(0x01000000,   3 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'d(X)',[ID(0x10000000,  30 term constant),ID(0x12000000,  24 term variable)])
 1 it1:ID(0x01000000,   1 atom ordinary_nonground) = OrdinaryAtom(1000000,'cp("B",X)',[ID(0x10000000,  37 term constant),ID(0x10000000,  42 term constant),ID(0x12000000,  24 term variable)])
 1 it1:ID(0x01000000,   1 atom ordinary_nonground) adding unifying head-head dependency for OrdinaryAtom(1000000,'cp("B",X)',[ID(0x10000000,  37 term constant),ID(0x10000000,  42 term constant),ID(0x12000000,  24 term variable)]) in head of disjunctive rules [] and in head of nondisjunctive rules [4]
 1 it1:ID(0x01000000,   1 atom ordinary_nonground) it2:ID(0x01000000,   0 atom ordinary_nonground)
 1 it1:ID(0x01000000,   1 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'d(X)',[ID(0x10000000,  30 term constant),ID(0x12000000,  24 term variable)])
 1 it1:ID(0x01000000,   0 atom ordinary_nonground) = OrdinaryAtom(1000000,'d(X)',[ID(0x10000000,  30 term constant),ID(0x12000000,  24 term variable)])
 1 it1:ID(0x01000000,   0 atom ordinary_nonground) adding unifying head-head dependency for OrdinaryAtom(1000000,'d(X)',[ID(0x10000000,  30 term constant),ID(0x12000000,  24 term variable)]) in head of disjunctive rules [] and in head of nondisjunctive rules [0]
 1 =createHeadBodyUnifyingDependencies
 1 ith:ID(0x01000000,   3 atom ordinary_nonground) = OrdinaryAtom(1000000,'cp("D",X)',[ID(0x10000000,  37 term constant),ID(0x10000000,  36 term constant),ID(0x12000000,  24 term variable)])
 1 ith:ID(0x01000000,   3 atom ordinary_nonground) itb:ID(0x01000000,   0 atom ordinary_nonground)
 1 ith:ID(0x01000000,   3 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'d(X)',[ID(0x10000000,  30 term constant),ID(0x12000000,  24 term variable)])
 1 ith:ID(0x01000000,   3 atom ordinary_nonground) itb:ID(0x01000000,   2 atom ordinary_nonground)
 1 ith:ID(0x01000000,   3 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'b(X)',[ID(0x10000000,  28 term constant),ID(0x12000000,  24 term variable)])
 1 ith:ID(0x01000000,   1 atom ordinary_nonground) = OrdinaryAtom(1000000,'cp("B",X)',[ID(0x10000000,  37 term constant),ID(0x10000000,  42 term constant),ID(0x12000000,  24 term variable)])
 1 ith:ID(0x01000000,   1 atom ordinary_nonground) itb:ID(0x01000000,   0 atom ordinary_nonground)
 1 ith:ID(0x01000000,   1 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'d(X)',[ID(0x10000000,  30 term constant),ID(0x12000000,  24 term variable)])
 1 ith:ID(0x01000000,   1 atom ordinary_nonground) itb:ID(0x01000000,   2 atom ordinary_nonground)
 1 ith:ID(0x01000000,   1 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'b(X)',[ID(0x10000000,  28 term constant),ID(0x12000000,  24 term variable)])
 1 ith:ID(0x01000000,   0 atom ordinary_nonground) = OrdinaryAtom(1000000,'d(X)',[ID(0x10000000,  30 term constant),ID(0x12000000,  24 term variable)])
 1 ith:ID(0x01000000,   0 atom ordinary_nonground) itb:ID(0x01000000,   0 atom ordinary_nonground)
 1 ith:ID(0x01000000,   0 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'d(X)',[ID(0x10000000,  30 term constant),ID(0x12000000,  24 term variable)])
 1 ith:ID(0x01000000,   0 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,   0 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  30 term constant),ID(0x12000000,  24 term variable)]
 1 ith:ID(0x01000000,   0 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  30 term constant),ID(0x12000000,  24 term variable)]
 1 ith:ID(0x01000000,   0 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  30 term constant) vs ID(0x10000000,  30 term constant)
 1 ith:ID(0x01000000,   0 atom ordinary_nonground) unifiesWith at position 1: checking ID(0x12000000,  24 term variable) vs ID(0x12000000,  24 term variable)
 1 ith:ID(0x01000000,   0 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,   0 atom ordinary_nonground) adding head-body dependency between OrdinaryAtom(1000000,'d(X)',[ID(0x10000000,  30 term constant),ID(0x12000000,  24 term variable)]) in head of rules <0> and OrdinaryAtom(1000000,'d(X)',[ID(0x10000000,  30 term constant),ID(0x12000000,  24 term variable)]) in posR/posC/neg bodies [5]/[]/[]
 1 ith:ID(0x01000000,   0 atom ordinary_nonground) itb:ID(0x01000000,   2 atom ordinary_nonground)
 1 ith:ID(0x01000000,   0 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'b(X)',[ID(0x10000000,  28 term constant),ID(0x12000000,  24 term variable)])
 1 ith:ID(0x01000000,   0 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,   0 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  30 term constant),ID(0x12000000,  24 term variable)]
 1 ith:ID(0x01000000,   0 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  28 term constant),ID(0x12000000,  24 term variable)]
 1 ith:ID(0x01000000,   0 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  30 term constant) vs ID(0x10000000,  28 term constant)
 1 ith:ID(0x01000000,   0 atom ordinary_nonground) unifiesWith EXIT
 1 Building component graph
 1 created component node 0x1c21880 for scc 0 with depgraph nodes <1>
 1 checking whether eatom ID(0x06000000,   0 atom external) is monotonic
 1   eatom ID(0x06000000,   0 atom external) is monotonic
 1 cNNEiC checking predecessor edges of node 1
 1 calculateFixedDomain
 1 calculateStratificationInfo
 1 -> outerEatoms <ID(0x06000000,   0 atom external)>
 1 -> innerRules <>
 1 -> innerConstraints <>
 1 -> innerEatoms <>
 1 -> disjunctiveHeads=0 negativeDependencyBetweenRules=0 innerEatomsNonmonotonic=0 outerEatomsNonmonotonic=0 componentIsMonotonic=1
 1 created component node 0x1c21b50 for scc 1 with depgraph nodes <0>
 1 cNNEiC checking predecessor edges of node 0
 1 calculateFixedDomain
 1 checking fixed domain of variable X
 1 calculateStratificationInfo
 1 Literal ID(0x26000000,   0 literal external) in rule ID(0x30080000,   0 rule regular) is stratified
 1 -> outerEatoms <>
 1 -> innerRules <ID(0x30080000,   0 rule regular)>
 1 -> innerConstraints <>
 1 -> innerEatoms <>
 1 -> disjunctiveHeads=0 negativeDependencyBetweenRules=0 innerEatomsNonmonotonic=0 outerEatomsNonmonotonic=0 componentIsMonotonic=1
 1 created component node 0x1c20bc0 for scc 2 with depgraph nodes <5>
 1 cNNEiC checking predecessor edges of node 5
 1 calculateFixedDomain
 1 calculateStratificationInfo
 1 -> outerEatoms <>
 1 -> innerRules <ID(0x30000000,   3 rule regular)>
 1 -> innerConstraints <>
 1 -> innerEatoms <>
 1 -> disjunctiveHeads=0 negativeDependencyBetweenRules=0 innerEatomsNonmonotonic=0 outerEatomsNonmonotonic=0 componentIsMonotonic=1
 1 created component node 0x1c20e20 for scc 3 with depgraph nodes <4>
 1 cNNEiC checking predecessor edges of node 4
 1 calculateFixedDomain
 1 calculateStratificationInfo
 1 -> outerEatoms <>
 1 -> innerRules <ID(0x30000000,   2 rule regular)>
 1 -> innerConstraints <>
 1 -> innerEatoms <>
 1 -> disjunctiveHeads=0 negativeDependencyBetweenRules=0 innerEatomsNonmonotonic=0 outerEatomsNonmonotonic=0 componentIsMonotonic=1
 1 created component node 0x1c21f50 for scc 4 with depgraph nodes <3>
 1 checking whether eatom ID(0x06000000,   1 atom external) is monotonic
 1   eatom ID(0x06000000,   1 atom external) is monotonic
 1 cNNEiC checking predecessor edges of node 3
 1 calculateFixedDomain
 1 calculateStratificationInfo
 1 -> outerEatoms <ID(0x06000000,   1 atom external)>
 1 -> innerRules <>
 1 -> innerConstraints <>
 1 -> innerEatoms <>
 1 -> disjunctiveHeads=0 negativeDependencyBetweenRules=0 innerEatomsNonmonotonic=0 outerEatomsNonmonotonic=0 componentIsMonotonic=1
 1 created component node 0x1c220d0 for scc 5 with depgraph nodes <2>
 1 cNNEiC checking predecessor edges of node 2
 1 calculateFixedDomain
 1 checking fixed domain of variable X
 1 calculateStratificationInfo
 1 -> outerEatoms <>
 1 -> innerRules <>
 1 -> innerConstraints <ID(0x31080000,   1 rule constraint)>
 1 -> innerEatoms <>
 1 -> disjunctiveHeads=0 negativeDependencyBetweenRules=0 innerEatomsNonmonotonic=0 outerEatomsNonmonotonic=0 componentIsMonotonic=1
 1 found dependency from SCC 1 to SCC 0
 1 found dependency from SCC 2 to SCC 1
 1 found dependency from SCC 4 to SCC 2
 1 found dependency from SCC 4 to SCC 3
 1 found dependency from SCC 5 to SCC 4
 1 Building component graph
 1 invoking build() on eval heuristic
 1 = EvalGraphBuilder::createEvalUnit(<0x1c22580,0x1c22780,0x1c229a0,0x1c22bc0,0x1c22de0,0x1c22fc0>,<>)
 1  compo &cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X)
 1  compr d(X) :- &cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X).
 1  compr cp("D",X) :- d(X).
 1  compr cp("B",X) :- b(X).
 1  compo &cDL["test1.owl",cp,cn,rp,rm,"C"](X)
 1  compc :- &cDL["test1.owl",cp,cn,rp,rm,"C"](X).
 1 cC = collapseComponents(<0x1c22580,0x1c22780,0x1c229a0,0x1c22bc0,0x1c22de0,0x1c22fc0>,<>)
 1 cC created component node 0x1c23830 for collapsed component
 1 cC cCCI = computeCollapsedComponentInfos(<0x1c22580,0x1c22780,0x1c229a0,0x1c22bc0,0x1c22de0,0x1c22fc0>,<>,.,.,.)
 1 cC cCCI original 0x1c22580: (outgoing)
 1 cC cCCI original 0x1c22780: (outgoing)
 1 cC cCCI    internal dependency (to 0x1c22580)
 1 cC cCCI original 0x1c229a0: (outgoing)
 1 cC cCCI    internal dependency (to 0x1c22780)
 1 cC cCCI original 0x1c22bc0: (outgoing)
 1 cC cCCI original 0x1c22de0: (outgoing)
 1 cC cCCI    internal dependency (to 0x1c229a0)
 1 cC cCCI    internal dependency (to 0x1c22bc0)
 1 cC cCCI original 0x1c22fc0: (outgoing)
 1 cC cCCI    internal dependency (to 0x1c22de0)
 1 cC cCCI original 0x1c22580: (incoming)
 1 cC cCCI original 0x1c22780: (incoming)
 1 cC cCCI original 0x1c229a0: (incoming)
 1 cC cCCI original 0x1c22bc0: (incoming)
 1 cC cCCI original 0x1c22de0: (incoming)
 1 cC cCCI original 0x1c22fc0: (incoming)
 1 cC cCCI calculateStratificationInfo
 1 cC cCCI Literal ID(0x26000000,   0 literal external) in rule ID(0x30080000,   0 rule regular) is stratified
 1 created unit 0 for new comp 0x1c23830
 1 configuring custom model generator factory for eval unit 0
 1 getCustomModelGenerator factory is started
 1 External atom ID(0x26000000,   0 literal external) is necessary for de-safety
 1 gACS getAuxiliaryConstantSymbol for r ID(0x10000000,  14 term constant)
 1 gACS created symbol 'aux_r_10000000_e'
 1 gACS PM::aP/0x1bfb180 adding predicate ID(0x10c00000,  43 term constant), knownAddresses was 0
 1 gACS returning id ID(0x10c00000,  43 term constant) for aux symbol aux_r_10000000_e
 1 stored oatom OrdinaryAtom(1c00000,'aux_r_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D",X)',[ID(0x10c00000,  43 term constant),ID(0x10000000,  31 term constant),ID(0x10000000,  32 term constant),ID(0x10000000,  33 term constant),ID(0x10000000,  34 term constant),ID(0x10000000,  35 term constant),ID(0x10000000,  36 term constant),ID(0x12000000,  24 term variable)]) which got ID(0x01c00000,   4 atom ordinary_nonground)
 1 adding domain predicates: rewriting rule d(X) :- &cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X). to d(X) :- &cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X). (for IDB) and domain-exploration rule d(X) :- aux_r_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D",X).
 1 not processing rule ID(0x30000000,   3 rule regular) (does not contain extatoms)
 1 not processing rule ID(0x30000000,   2 rule regular) (does not contain extatoms)
 1 External atom ID(0x26000000,   1 literal external) is necessary for de-safety
 1 gACS getAuxiliaryConstantSymbol for d ID(0x26000000,   1 literal external)
 1 gACS created symbol 'aux_d_26000000_1'
 1 gACS PM::aP/0x1bfb180 adding predicate ID(0x10800000,  44 term constant), knownAddresses was 0
 1 gACS returning id ID(0x10800000,  44 term constant) for aux symbol aux_d_26000000_1
 1 gACS getAuxiliaryConstantSymbol for r ID(0x26000000,   1 literal external)
 1 gACS created symbol 'aux_r_26000000_1'
 1 gACS PM::aP/0x1bfb180 adding predicate ID(0x10c00000,  45 term constant), knownAddresses was 0
 1 gACS returning id ID(0x10c00000,  45 term constant) for aux symbol aux_r_26000000_1
 1 gACS getAuxiliaryConstantSymbol for n ID(0x26000000,   1 literal external)
 1 gACS created symbol 'aux_n_26000000_1'
 1 gACS PM::aP/0x1bfb180 adding predicate ID(0x10c00000,  46 term constant), knownAddresses was 0
 1 gACS returning id ID(0x10c00000,  46 term constant) for aux symbol aux_n_26000000_1
 1 stored oatom OrdinaryAtom(1800000,'aux_d_26000000_1("test1.owl",cp,cn,rp,rm,"C",X)',[ID(0x10800000,  44 term constant),ID(0x10000000,  31 term constant),ID(0x10000000,  37 term constant),ID(0x10000000,  38 term constant),ID(0x10000000,  39 term constant),ID(0x10000000,  40 term constant),ID(0x10000000,  41 term constant),ID(0x12000000,  24 term variable)]) which got ID(0x01800000,   5 atom ordinary_nonground)
 1 stored oatom OrdinaryAtom(1800000,'aux_r_26000000_1("test1.owl",cp,cn,rp,rm,"C",X)',[ID(0x10c00000,  45 term constant),ID(0x10000000,  31 term constant),ID(0x10000000,  37 term constant),ID(0x10000000,  38 term constant),ID(0x10000000,  39 term constant),ID(0x10000000,  40 term constant),ID(0x10000000,  41 term constant),ID(0x12000000,  24 term variable)]) which got ID(0x01800000,   6 atom ordinary_nonground)
 1 stored oatom OrdinaryAtom(1800000,'aux_n_26000000_1("test1.owl",cp,cn,rp,rm,"C",X)',[ID(0x10c00000,  46 term constant),ID(0x10000000,  31 term constant),ID(0x10000000,  37 term constant),ID(0x10000000,  38 term constant),ID(0x10000000,  39 term constant),ID(0x10000000,  40 term constant),ID(0x10000000,  41 term constant),ID(0x12000000,  24 term variable)]) which got ID(0x01800000,   7 atom ordinary_nonground)
 1 adding choosing rule aux_r_26000000_1("test1.owl",cp,cn,rp,rm,"C",X) v aux_n_26000000_1("test1.owl",cp,cn,rp,rm,"C",X) :- aux_d_26000000_1("test1.owl",cp,cn,rp,rm,"C",X). for external atom ID(0x26000000,   1 literal external)
 1 adding domain predicates: rewriting rule :- &cDL["test1.owl",cp,cn,rp,rm,"C"](X). to :- &cDL["test1.owl",cp,cn,rp,rm,"C"](X), aux_d_26000000_1("test1.owl",cp,cn,rp,rm,"C",X). (for IDB) and domain-exploration rule :- aux_r_26000000_1("test1.owl",cp,cn,rp,rm,"C",X).
 1 cEAGR processing rule with external atom(s): d(X) :- &cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X). (rid ID(0x30080000,   0 rule regular)r Rule([ID(0x01000000,   0 atom ordinary_nonground)] <- [ID(0x26000000,   0 literal external)]))
 1 cEAGR processing rule with external atom(s): :- &cDL["test1.owl",cp,cn,rp,rm,"C"](X), aux_d_26000000_1("test1.owl",cp,cn,rp,rm,"C",X). (rid ID(0x31080000,   7 rule constraint)r Rule([] <- [ID(0x26000000,   1 literal external),ID(0x21800000,   5 literal ordinary_nonground)]))
 1 resetting custom model generator provider
 1 resetting state
 1 resetting callbacks
 1 resetting modelBuilder
 1 resetting parser
 1 resetting evalgraph
 1 resetting compgraph
 1 resetting depgraph
 1 resetting edbList
 1 resetting inputProvider
 1 resetting aspsoftware
 1 resetting pluginData
 1 resetting pluginEnvironment
 1 resetting registry, usage count was 150 (it should be 2)
 1 resetting pluginAtoms
 1 resetting pluginContainer, usage count was 6 (it should be 1)
 1 resetting custom model generator provider
 1 resetting state
 1 resetting callbacks
 1 resetting modelBuilder
 1 resetting parser
 1 resetting evalgraph
 1 resetting compgraph
 1 resetting depgraph
 1 resetting edbList
 1 resetting inputProvider
 1 resetting aspsoftware
 1 resetting pluginData
 1 resetting pluginEnvironment
 1 resetting registry, usage count was 149 (it should be 2)
 1 resetting pluginAtoms
 1 resetting pluginContainer, usage count was 5 (it should be 1)
 1 resetting custom model generator provider
 1 resetting state
 1 resetting callbacks
 1 resetting modelBuilder
 1 resetting parser
 1 resetting evalgraph
 1 resetting compgraph
 1 resetting depgraph
 1 resetting edbList
 1 resetting inputProvider
 1 resetting aspsoftware
 1 resetting pluginData
 1 resetting pluginEnvironment
 1 resetting registry, usage count was 149 (it should be 2)
 1 resetting pluginAtoms
 1 resetting pluginContainer, usage count was 5 (it should be 1)
 1 resetting custom model generator provider
 1 resetting state
 1 resetting callbacks
 1 resetting modelBuilder
 1 resetting parser
 1 resetting evalgraph
 1 resetting compgraph
 1 resetting depgraph
 1 resetting edbList
 1 resetting inputProvider
 1 resetting aspsoftware
 1 resetting pluginData
 1 resetting pluginEnvironment
 1 resetting registry, usage count was 148 (it should be 2)
 1 resetting pluginAtoms
 1 resetting pluginContainer, usage count was 4 (it should be 1)
 1 rewriting rule d(X) :- &cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X). from Rule([ID(0x01000000,   0 atom ordinary_nonground)] <- [ID(0x26000000,   0 literal external)]) with id ID(0x30080000,   0 rule regular) to auxiliary predicates
 1 rewriting external atom &cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X)  (aux=ID_FAIL) literal with id ID(0x26000000,   0 literal external)
 1 gACS getAuxiliaryConstantSymbol for r ID(0x10000000,  14 term constant)
 1 gACS found ID(0x10c00000,  43 term constant)
 1 adding replacement atom ID(0x01c00000,   4 atom ordinary_nonground) as literal
 1 rewritten rule d(X) :- aux_r_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D",X). from Rule([ID(0x01000000,   0 atom ordinary_nonground)] <- [ID(0x21c00000,   4 literal ordinary_nonground)]) got id ID(0x30880000,   9 rule regular)
 1 not converting rule ID(0x30000000,   3 rule regular) (does not contain extatoms)
 1 not converting rule ID(0x30000000,   2 rule regular) (does not contain extatoms)
 1 rewriting rule :- &cDL["test1.owl",cp,cn,rp,rm,"C"](X), aux_d_26000000_1("test1.owl",cp,cn,rp,rm,"C",X). from Rule([] <- [ID(0x26000000,   1 literal external),ID(0x21800000,   5 literal ordinary_nonground)]) with id ID(0x31080000,   7 rule constraint) to auxiliary predicates
 1 rewriting external atom &cDL["test1.owl",cp,cn,rp,rm,"C"](X)  (aux=ID_FAIL) literal with id ID(0x26000000,   1 literal external)
 1 gACS getAuxiliaryConstantSymbol for r ID(0x10000000,  14 term constant)
 1 gACS found ID(0x10c00000,  43 term constant)
 1 stored oatom OrdinaryAtom(1c00000,'aux_r_10000000_e("test1.owl",cp,cn,rp,rm,"C",X)',[ID(0x10c00000,  43 term constant),ID(0x10000000,  31 term constant),ID(0x10000000,  37 term constant),ID(0x10000000,  38 term constant),ID(0x10000000,  39 term constant),ID(0x10000000,  40 term constant),ID(0x10000000,  41 term constant),ID(0x12000000,  24 term variable)]) which got ID(0x01c00000,   8 atom ordinary_nonground)
 1 adding replacement atom ID(0x01c00000,   8 atom ordinary_nonground) as literal
 1 adding original literal ID(0x21800000,   5 literal ordinary_nonground)
 1 rewritten rule :- aux_r_10000000_e("test1.owl",cp,cn,rp,rm,"C",X), aux_d_26000000_1("test1.owl",cp,cn,rp,rm,"C",X). from Rule([] <- [ID(0x21c00000,   8 literal ordinary_nonground),ID(0x21800000,   5 literal ordinary_nonground)]) got id ID(0x31880000,  10 rule constraint)
 1 resetting custom model generator provider
 1 resetting state
 1 resetting callbacks
 1 resetting modelBuilder
 1 resetting parser
 1 resetting evalgraph
 1 resetting compgraph
 1 resetting depgraph
 1 resetting edbList
 1 resetting inputProvider
 1 resetting aspsoftware
 1 resetting pluginData
 1 resetting pluginEnvironment
 1 resetting registry, usage count was 147 (it should be 2)
 1 resetting pluginAtoms
 1 resetting pluginContainer, usage count was 3 (it should be 1)
 1 resetting custom model generator provider
 1 resetting state
 1 resetting callbacks
 1 resetting modelBuilder
 1 resetting parser
 1 resetting evalgraph
 1 resetting compgraph
 1 resetting depgraph
 1 resetting edbList
 1 resetting inputProvider
 1 resetting aspsoftware
 1 resetting pluginData
 1 resetting pluginEnvironment
 1 resetting registry, usage count was 146 (it should be 2)
 1 resetting pluginAtoms
 1 resetting pluginContainer, usage count was 2 (it should be 1)
 1 RepairModelGeneratorFactory(): outer Eatoms={
&cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X)
}
inner Eatoms={
&cDL["test1.owl",cp,cn,rp,rm,"C"](X)
&cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X)
}
idb={
d(X) :- &cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X).
cp("D",X) :- d(X).
cp("B",X) :- b(X).
:- &cDL["test1.owl",cp,cn,rp,rm,"C"](X), aux_d_26000000_1("test1.owl",cp,cn,rp,rm,"C",X).
}
xidb={
d(X) :- aux_r_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D",X).
cp("D",X) :- d(X).
cp("B",X) :- b(X).
:- aux_r_10000000_e("test1.owl",cp,cn,rp,rm,"C",X), aux_d_26000000_1("test1.owl",cp,cn,rp,rm,"C",X).
}

 1 Destructing component graph 0x1bfdff0
 1 created virtual final unit ufinal = 1
 1 adding dependency from ufinal to unit 0 join order 0
 1 setting up program ctx for plugin dlvhex-manualevalheuristicsplugin[internal]
 1 setting up program ctx for plugin dlvhex-queryplugin[internal]
 1 setting up program ctx for plugin dlvhex-aggregateplugin[internal]
 1 setting up program ctx for plugin dlvhex-strongnegationplugin[internal]
 1 setting up program ctx for plugin dlvhex-higherorderplugin[internal]
 1 setting up program ctx for plugin dlvhex-weakconstraintplugin[internal]
 1 setting up program ctx for plugin dlvhex-existsplugin[internal]
 1 setting up program ctx for plugin dlvhex-functionplugin[internal]
 1 setting up program ctx for plugin dlvhex-dlliteplugin
 1 DLLitePlugin::setupProgramCtx(ProgramCtx& ctx)
 1 Registry was already previously set
 1 IDs have already been prepared
 1 Constructing classification program
 1 stored term Term(X2) which got ID(0x12000000,  47 term variable)
 1 stored term Term(Y2) which got ID(0x12000000,  48 term variable)
 1 stored term Term(Y1) which got ID(0x12000000,  49 term variable)
 1 stored oatom OrdinaryAtom(1000000,'sub(X,Y)',[ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]) which got ID(0x01000000,   9 atom ordinary_nonground)
 1 stored oatom OrdinaryAtom(1000000,'sub(X,Z)',[ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  26 term variable)]) which got ID(0x01000000,  10 atom ordinary_nonground)
 1 stored oatom OrdinaryAtom(1000000,'sub(Y,Z)',[ID(0x10000000,  18 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  26 term variable)]) which got ID(0x01000000,  11 atom ordinary_nonground)
 1 stored oatom OrdinaryAtom(1000000,'op(X,X2)',[ID(0x10000000,  19 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  47 term variable)]) which got ID(0x01000000,  12 atom ordinary_nonground)
 1 stored oatom OrdinaryAtom(1000000,'op(Y,Y2)',[ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  48 term variable)]) which got ID(0x01000000,  13 atom ordinary_nonground)
 1 stored oatom OrdinaryAtom(1000000,'sub(Y2,X2)',[ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  47 term variable)]) which got ID(0x01000000,  14 atom ordinary_nonground)
 1 stored oatom OrdinaryAtom(1000000,'sub(Y2,Y1)',[ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  49 term variable)]) which got ID(0x01000000,  15 atom ordinary_nonground)
 1 stored oatom OrdinaryAtom(1000000,'conf(X,Y)',[ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]) which got ID(0x01000000,  16 atom ordinary_nonground)
 1 stored oatom OrdinaryAtom(1000000,'conf(X,Y1)',[ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)]) which got ID(0x01000000,  17 atom ordinary_nonground)
 1 stored oatom OrdinaryAtom(1000000,'conf(X,Y2)',[ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  48 term variable)]) which got ID(0x01000000,  18 atom ordinary_nonground)
 1 stored oatom OrdinaryAtom(1000000,'op(X,Y)',[ID(0x10000000,  19 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]) which got ID(0x01000000,  19 atom ordinary_nonground)
 1 stored oatom OrdinaryAtom(1000000,'op(Y,X)',[ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]) which got ID(0x01000000,  20 atom ordinary_nonground)
 1 stored oatom OrdinaryAtom(1000000,'inv(X,Y)',[ID(0x10000000,  22 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]) which got ID(0x01000000,  21 atom ordinary_nonground)
 1 stored oatom OrdinaryAtom(1000000,'inv(X,Y1)',[ID(0x10000000,  22 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)]) which got ID(0x01000000,  22 atom ordinary_nonground)
 1 stored oatom OrdinaryAtom(1000000,'inv(Y,X)',[ID(0x10000000,  22 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]) which got ID(0x01000000,  23 atom ordinary_nonground)
 1 stored oatom OrdinaryAtom(1000000,'confref(X)',[ID(0x10000000,  23 term constant),ID(0x12000000,  24 term variable)]) which got ID(0x01000000,  24 atom ordinary_nonground)
 1 stored oatom OrdinaryAtom(1000000,'op(Y,Y1)',[ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  49 term variable)]) which got ID(0x01000000,  25 atom ordinary_nonground)
 1 Constructed classification program
 1 CLP: sub(X,Z) :- sub(X,Y), sub(Y,Z).

 1 CLP: sub(Y2,X2) :- op(X,X2), op(Y,Y2), sub(X,Y).

 1 CLP: conf(X,Y1) :- sub(X,Y), op(Y,Y1).

 1 CLP: conf(X,Y2) :- conf(X,Y1), sub(Y2,Y1).

 1 CLP: confref(X) :- conf(X,Y), inv(X,Y).

 1 CLP: op(Y,X) :- op(X,Y).

 1 CLP: inv(Y,X) :- inv(X,Y).

 1 EvalUnitModels()@0x7fff0cbd0ae0
 1 EvalUnitModels()@0x7fff0cbd0a80
 1 EvalUnitModels(const EvalUnitModels&)@0x1c26a60 from 0x7fff0cbd0a80
 1 EvalUnitModels(const EvalUnitModels&)@0x1c26a70 from 0x7fff0cbd0a80
 1 EvalUnitModels(const EvalUnitModels&)@0x1c26a80 from 0x7fff0cbd0a80
 1 ~EvalUnitModels()@0x7fff0cbd0a80
 1 ~EvalUnitModels()@0x7fff0cbd0ae0
 1 initializing mbp for unit 0
 1 initializing mbp for unit 1
 1 requesting imodel
 1 =OnlineModelBuilder<...>::getNextIModel(1)
 1 uprops: (no ModelGeneratorFactory)
 1 mbprops: currentmg =      null, needInput = 1, orefcount = 0, imodel =     unset, currentisuccessor = unset
 1 =OnlineModelBuilder<...>::getNextOModel(0):
 1 uprops = outer Eatoms={
&cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X)
}
inner Eatoms={
&cDL["test1.owl",cp,cn,rp,rm,"C"](X)
&cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X)
}
idb={
d(X) :- &cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X).
cp("D",X) :- d(X).
cp("B",X) :- b(X).
:- &cDL["test1.owl",cp,cn,rp,rm,"C"](X), aux_d_26000000_1("test1.owl",cp,cn,rp,rm,"C",X).
}
xidb={
d(X) :- aux_r_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D",X).
cp("D",X) :- d(X).
cp("B",X) :- b(X).
:- aux_r_10000000_e("test1.owl",cp,cn,rp,rm,"C",X), aux_d_26000000_1("test1.owl",cp,cn,rp,rm,"C",X).
}

 1 mbprops = currentmg =      null, needInput = 0, orefcount = 0, imodel =     unset, currentisuccessor = unset
 1 =OnlineModelBuilder<...>::getNextIModel(0)
 1 uprops: outer Eatoms={
&cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X)
}
inner Eatoms={
&cDL["test1.owl",cp,cn,rp,rm,"C"](X)
&cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X)
}
idb={
d(X) :- &cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X).
cp("D",X) :- d(X).
cp("B",X) :- b(X).
:- &cDL["test1.owl",cp,cn,rp,rm,"C"](X), aux_d_26000000_1("test1.owl",cp,cn,rp,rm,"C",X).
}
xidb={
d(X) :- aux_r_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D",X).
cp("D",X) :- d(X).
cp("B",X) :- b(X).
:- aux_r_10000000_e("test1.owl",cp,cn,rp,rm,"C",X), aux_d_26000000_1("test1.owl",cp,cn,rp,rm,"C",X).
}

 1 mbprops: currentmg =      null, needInput = 0, orefcount = 0, imodel =     unset, currentisuccessor = unset
 1 unit needs no input
 1 running debug checks
 1 =OnlineModelBuilder<...>::advanceOModelForIModel(0)
 1 imodel has properties dummy interpretation=null
 1 =createNextModel(0)
 1 sEA  = ExternalAtomMask::setEAtom for &cDL["test1.owl",cp,cn,rp,rm,"C"](X)  (aux=ID_FAIL) and 0 rules in groundidb
 1 sEA gACS getAuxiliaryConstantSymbol for r ID(0x10000000,  14 term constant)
 1 sEA gACS found ID(0x10c00000,  43 term constant)
 1 sEA gACS getAuxiliaryConstantSymbol for n ID(0x10000000,  14 term constant)
 1 sEA gACS created symbol 'aux_n_10000000_e'
 1 sEA gACS PM::aP/0x1bfb180 adding predicate ID(0x10c00000,  50 term constant), knownAddresses was 0
 1 sEA gACS returning id ID(0x10c00000,  50 term constant) for aux symbol aux_n_10000000_e
 1 sEA Adding input predicate cp
 1 sEA PM::aP/0x1c20980 adding predicate ID(0x10000000,  37 term constant), knownAddresses was 0
 1 sEA Adding input predicate cn
 1 sEA PM::aP/0x1c20980 adding predicate ID(0x10000000,  38 term constant), knownAddresses was 0
 1 sEA Adding input predicate rp
 1 sEA PM::aP/0x1c20980 adding predicate ID(0x10000000,  39 term constant), knownAddresses was 0
 1 sEA Adding input predicate rm
 1 sEA PM::aP/0x1c20980 adding predicate ID(0x10000000,  40 term constant), knownAddresses was 0
 1 sEA preparedTuple is <aux_r_10000000_e, "test1.owl", cp, cn, rp, rm, "C", X>
 1 sEA Watching 0 output atoms: {}
 1 sEA gACS getAuxiliaryConstantSymbol for r ID(0x10000000,  14 term constant)
 1 sEA gACS found ID(0x10c00000,  43 term constant)
 1 sEA gACS getAuxiliaryConstantSymbol for n ID(0x10000000,  14 term constant)
 1 sEA gACS found ID(0x10c00000,  50 term constant)
 1 ExternalAtomMask::updateMask
 1 PM::uM(do)/0x1c20980 = PredicateMask::updateMask (need to update) for predicates {37,38,39,40}
 1 PM::uM(do)/0x1c20980 need to inspect 1 missing bits
 1 PM::uM(do)/0x1c20980 relevant predicate constants are cp, cn, rp, rm, 
 1 PM::uM(do)/0x1c20980 updateMask created new set of relevant ogatoms: {} and knownAddresses is 1
 1 sEA  = ExternalAtomMask::setEAtom for &cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X)  (aux=ID_FAIL) and 0 rules in groundidb
 1 sEA gACS getAuxiliaryConstantSymbol for r ID(0x10000000,  14 term constant)
 1 sEA gACS found ID(0x10c00000,  43 term constant)
 1 sEA gACS getAuxiliaryConstantSymbol for n ID(0x10000000,  14 term constant)
 1 sEA gACS found ID(0x10c00000,  50 term constant)
 1 sEA Adding input predicate cp1
 1 sEA PM::aP/0x1c29f70 adding predicate ID(0x10000000,  32 term constant), knownAddresses was 0
 1 sEA Adding input predicate cn1
 1 sEA PM::aP/0x1c29f70 adding predicate ID(0x10000000,  33 term constant), knownAddresses was 0
 1 sEA Adding input predicate rp1
 1 sEA PM::aP/0x1c29f70 adding predicate ID(0x10000000,  34 term constant), knownAddresses was 0
 1 sEA Adding input predicate rn1
 1 sEA PM::aP/0x1c29f70 adding predicate ID(0x10000000,  35 term constant), knownAddresses was 0
 1 sEA preparedTuple is <aux_r_10000000_e, "test1.owl", cp1, cn1, rp1, rn1, "D", X>
 1 sEA Watching 0 output atoms: {}
 1 sEA gACS getAuxiliaryConstantSymbol for r ID(0x10000000,  14 term constant)
 1 sEA gACS found ID(0x10c00000,  43 term constant)
 1 sEA gACS getAuxiliaryConstantSymbol for n ID(0x10000000,  14 term constant)
 1 sEA gACS found ID(0x10c00000,  50 term constant)
 1 ExternalAtomMask::updateMask
 1 PM::uM(do)/0x1c29f70 = PredicateMask::updateMask (need to update) for predicates {32,33,34,35}
 1 PM::uM(do)/0x1c29f70 need to inspect 1 missing bits
 1 PM::uM(do)/0x1c29f70 relevant predicate constants are cp1, cn1, rp1, rn1, 
 1 PM::uM(do)/0x1c29f70 updateMask created new set of relevant ogatoms: {} and knownAddresses is 1
 1 RMG: Repair model generator is instantiated for a non-disjunctive component
 1 Computing fixpoint of extensions of domain predicates
 1 2 inner external atoms are necessary for establishing de-safety
 1 Freezing nulls
 1 Loop with herbrandBase={b("c")}
 1 Instantiating genuine grounder with gringo
 1 Creating new term with name 'int0'
 1 stored term Term(int0) which got ID(0x10000000,  51 term constant)
 1 Creating new term with name 'anonymous1'
 1 stored term Term(anonymous1) which got ID(0x10000000,  52 term constant)
 1 Sending the following input to Gringo: {{b("c").
d(X) :- aux_r_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D",X).
cp("D",X) :- d(X).
cp("B",X) :- b(X).
aux_r_26000000_1("test1.owl",cp,cn,rp,rm,"C",X) | aux_n_26000000_1("test1.owl",cp,cn,rp,rm,"C",X) :- aux_d_26000000_1("test1.owl",cp,cn,rp,rm,"C",X).
 :- aux_r_26000000_1("test1.owl",cp,cn,rp,rm,"C",X).
int0(0..0).}}
 1 parsing gringo ground atom 'cp("B","c")'
 1 Term tuple: cp
 1 got token 'cp'
 1 Term tuple: "B"
 1 got token '"B"'
 1 Term tuple: "c"
 1 got token '"c"'
 1 Got atom cp("B","c") with Gringo-ID 3 and dlvhex-ID ID(0x00000000,   1 atom ordinary_ground)
 1 Got atom b("c") with Gringo-ID 2 and dlvhex-ID ID(0x00000000,   0 atom ordinary_ground)
 1 parsing gringo ground atom 'int0(0)'
 1 Term tuple: int0
 1 got token 'int0'
 1 Term tuple: 0
 1 got token '0'
 1 Got atom int0(0) with Gringo-ID 4 and dlvhex-ID ID(0x00000000,   2 atom ordinary_ground)
 1 Transforming 3 rules to DLVHEX
 1 Setting fact 0 (Gringo: 2)
 1 Setting fact 1 (Gringo: 3)
 1 Setting fact 2 (Gringo: 4)
 1 Got the following ground program from Gringo: {b("c").cp("B","c").int0(0).

}
 1 EA::uM/0x1c17c00 ENTRY
 1 EA::uM/0x1c17c00 PM::uM(do)/0x1c177e0 = PredicateMask::updateMask (need to update) for predicates {32,33,34,35}
 1 EA::uM/0x1c17c00 PM::uM(do)/0x1c177e0 need to inspect 3 missing bits
 1 EA::uM/0x1c17c00 PM::uM(do)/0x1c177e0 relevant predicate constants are cp1, cn1, rp1, rn1, 
 1 EA::uM/0x1c17c00 PM::uM(do)/0x1c177e0 updateMask created new set of relevant ogatoms: {} and knownAddresses is 3
 1 EA::uM/0x1c17c00 EXIT
 1 Enumerating nonmonotonic input assignments to ID(0x26000000,   0 literal external)
 1 Evaluating external atom ID(0x26000000,   0 literal external) under {b("c"),cp("B","c")}
 1 = evaluateExternalAtom for &cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X)  (aux=ID_FAIL) with input interpretation {b("c"),cp("B","c")}
 1 EA::uM/0x1c17c00 ENTRY
 1 EA::uM/0x1c17c00 EXIT
 1 gACS getAuxiliaryConstantSymbol for r ID(0x10000000,  14 term constant)
 1 gACS found ID(0x10c00000,  43 term constant)
 1 Retrieve with learning, pointer to nogood container: not available
 1 CDLAtom::retrieve
 1 useABox = 1
 1 prepareOntology
 1 Loading ontologytest1.owl
FaCT++.Kernel: Reasoner for the SROIQ(D) Description Logic, 64-bit
Copyright (C) Dmitry Tsarkov, 2002-2013. Version 1.6.2 (19 February 2013)
 1 Assigning ontology name
 1 Reading file test1.owl
 1 Extracting ontology namespace
 1 Namespace is: http://www.semanticweb.org/dasha/ontologies/2014/9/untitled-ontology-52 (path: /home/dasha/Documents/software/dlliteplugin/examples/annotated/test1.owl, version: )
 1 Submitting ontology with Abox to reasoning kernel
 1 Consistency of KB: 1
 1 Analyzing ontology (Tbox and Abox)
 1 Current triple: http://www.semanticweb.org/dasha/ontologies/2014/9/untitled-ontology-52 / rdf:type / owl:Ontology
 1 Current triple: http://www.semanticweb.org/dasha/ontologies/2014/9/untitled-ontology-52#B / rdf:type / owl:Class
 1 Found concept: "B"
 1 Current triple: http://www.semanticweb.org/dasha/ontologies/2014/9/untitled-ontology-52#C / rdf:type / owl:Class
 1 Found concept: "C"
 1 Current triple: http://www.semanticweb.org/dasha/ontologies/2014/9/untitled-ontology-52#D / rdf:type / owl:Class
 1 Found concept: "D"
 1 Current triple: http://www.semanticweb.org/dasha/ontologies/2014/9/untitled-ontology-52#c / rdf:type / owl:NamedIndividual
 1 Current triple: http://www.semanticweb.org/dasha/ontologies/2014/9/untitled-ontology-52#c / rdf:type / http://www.semanticweb.org/dasha/ontologies/2014/9/untitled-ontology-52#D
 1 NS: Subject is: http://www.semanticweb.org/dasha/ontologies/2014/9/untitled-ontology-52#c
 1 NS: After storage: http://www.semanticweb.org/dasha/ontologies/2014/9/untitled-ontology-52#c
 1 stored oatom OrdinaryAtom(a00000,'aux_o_0_0("D","c")',[ID(0x10800000,  27 term constant),ID(0x10000000,  36 term constant),ID(0x10000000,  29 term constant)]) which got ID(0x00a00000,   3 atom ordinary_ground)
 1 NS: Found individual: "c"
 1 NS: Found concept assertion: D("c")
 1 Concept assertions: {aux_o_0_0("D","c")}
 1 Expand Abox is started with useAbox = 1
 1 prepareOntology
 1 Accessing cached ontology test1.owl
 1 Expanding Abox
 1 Looking up query concept
 1 Current triple: http://www.semanticweb.org/dasha/ontologies/2014/9/untitled-ontology-52 / rdf:type / owl:Ontology
 1 Current triple: http://www.semanticweb.org/dasha/ontologies/2014/9/untitled-ontology-52#B / rdf:type / owl:Class
 1 Current triple: http://www.semanticweb.org/dasha/ontologies/2014/9/untitled-ontology-52#C / rdf:type / owl:Class
 1 Current triple: http://www.semanticweb.org/dasha/ontologies/2014/9/untitled-ontology-52#D / rdf:type / owl:Class
 1 Preparing Actor_collector for http://www.semanticweb.org/dasha/ontologies/2014/9/untitled-ontology-52#D
 1 Instantiating Actor_collector
 1 Sending concept query
 1 Actor collector called with http://www.semanticweb.org/dasha/ontologies/2014/9/untitled-ontology-52#D
 1 Actor collector called with http://www.semanticweb.org/dasha/ontologies/2014/9/untitled-ontology-52#c
 1 Adding element to tuple (ID=ID(0x10000000,  29 term constant))
 1 Actor collector called with BOTTOM
 1 Query answering complete, recovering Abox
 1 prepareOntology
 1 Accessing cached ontology test1.owl
 1 vEAAT = verifyEAtomAnswerTuple for &cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X)  (aux=ID_FAIL) and tuple <"c">
 1 integrating eatom tuple <ID(0x10c00000,  43 term constant),ID(0x10000000,  31 term constant),ID(0x10000000,  32 term constant),ID(0x10000000,  33 term constant),ID(0x10000000,  34 term constant),ID(0x10000000,  35 term constant),ID(0x10000000,  36 term constant),ID(0x10000000,  29 term constant)>
 1 stored oatom OrdinaryAtom(c00000,'aux_r_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D","c")',[ID(0x10c00000,  43 term constant),ID(0x10000000,  31 term constant),ID(0x10000000,  32 term constant),ID(0x10000000,  33 term constant),ID(0x10000000,  34 term constant),ID(0x10000000,  35 term constant),ID(0x10000000,  36 term constant),ID(0x10000000,  29 term constant)]) which got ID(0x00c00000,   4 atom ordinary_ground)
 1 got replacement ID ID(0x00c00000,   4 atom ordinary_ground)
 1 output interpretation is now {b("c"),cp("B","c"),aux_r_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D","c")}
 1 Enumerated all nonmonotonic input assignments to ID(0x26000000,   0 literal external)
 1 EA::uM/0x1c18470 ENTRY
 1 EA::uM/0x1c18470 PM::uM(do)/0x1c180a0 = PredicateMask::updateMask (need to update) for predicates {37,38,39,40}
 1 EA::uM/0x1c18470 PM::uM(do)/0x1c180a0 need to inspect 5 missing bits
 1 EA::uM/0x1c18470 PM::uM(do)/0x1c180a0 relevant predicate constants are cp, cn, rp, rm, 
 1 EA::uM/0x1c18470 PM::uM(do)/0x1c180a0 updateMask created new set of relevant ogatoms: {cp("B","c")} and knownAddresses is 5
 1 EA::uM/0x1c18470 EXIT
 1 Enumerating nonmonotonic input assignments to ID(0x26000000,   1 literal external)
 1 Evaluating external atom ID(0x26000000,   1 literal external) under {b("c"),cp("B","c"),aux_r_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D","c")}
 1 = evaluateExternalAtom for &cDL["test1.owl",cp,cn,rp,rm,"C"](X)  (aux=ID_FAIL) with input interpretation {b("c"),cp("B","c"),aux_r_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D","c")}
 1 EA::uM/0x1c18470 ENTRY
 1 EA::uM/0x1c18470 EXIT
 1 gACS getAuxiliaryConstantSymbol for r ID(0x10000000,  14 term constant)
 1 gACS found ID(0x10c00000,  43 term constant)
 1 Retrieve with learning, pointer to nogood container: not available
 1 CDLAtom::retrieve
 1 useABox = 1
 1 prepareOntology
 1 Accessing cached ontology test1.owl
 1 Expand Abox is started with useAbox = 1
 1 prepareOntology
 1 Accessing cached ontology test1.owl
 1 Expanding Abox
 1 Checking cp("B","c")
 1 stored term Term("000") which got ID(0x10000000,  53 term constant)
 1 Adding concept assertion: B(c)
 1 Looking up query concept
 1 Current triple: http://www.semanticweb.org/dasha/ontologies/2014/9/untitled-ontology-52 / rdf:type / owl:Ontology
 1 Current triple: http://www.semanticweb.org/dasha/ontologies/2014/9/untitled-ontology-52#B / rdf:type / owl:Class
 1 Current triple: http://www.semanticweb.org/dasha/ontologies/2014/9/untitled-ontology-52#C / rdf:type / owl:Class
 1 Preparing Actor_collector for http://www.semanticweb.org/dasha/ontologies/2014/9/untitled-ontology-52#C
 1 Instantiating Actor_collector
 1 Sending concept query
 1 Actor collector called with http://www.semanticweb.org/dasha/ontologies/2014/9/untitled-ontology-52#C
 1 Actor collector called with BOTTOM
 1 Query answering complete, recovering Abox
 1 prepareOntology
 1 Accessing cached ontology test1.owl
 1 Enumerated all nonmonotonic input assignments to ID(0x26000000,   1 literal external)
 1 Converting atom with address 4
 1 getIDByAuxiliaryConstantSymbol for ID(0x10c00000,  43 term constant)
 1 found ID(0x10c00000,  43 term constant)
 1 gACS getAuxiliaryConstantSymbol for d ID(0x26000000,   0 literal external)
 1 gACS created symbol 'aux_d_26000000_0'
 1 gACS PM::aP/0x1bfb180 adding predicate ID(0x10800000,  54 term constant), knownAddresses was 0
 1 gACS returning id ID(0x10800000,  54 term constant) for aux symbol aux_d_26000000_0
 1 stored oatom OrdinaryAtom(800000,'aux_d_26000000_0("test1.owl",cp1,cn1,rp1,rn1,"D","c")',[ID(0x10800000,  54 term constant),ID(0x10000000,  31 term constant),ID(0x10000000,  32 term constant),ID(0x10000000,  33 term constant),ID(0x10000000,  34 term constant),ID(0x10000000,  35 term constant),ID(0x10000000,  36 term constant),ID(0x10000000,  29 term constant)]) which got ID(0x00800000,   5 atom ordinary_ground)
 1 getIDByAuxiliaryConstantSymbol for ID(0x10c00000,  43 term constant)
 1 found ID(0x10c00000,  43 term constant)
 1 gACS getAuxiliaryConstantSymbol for d ID(0x26000000,   1 literal external)
 1 gACS found ID(0x10800000,  44 term constant)
 1 stored oatom OrdinaryAtom(800000,'aux_d_26000000_1("test1.owl",cp1,cn1,rp1,rn1,"D","c")',[ID(0x10800000,  44 term constant),ID(0x10000000,  31 term constant),ID(0x10000000,  32 term constant),ID(0x10000000,  33 term constant),ID(0x10000000,  34 term constant),ID(0x10000000,  35 term constant),ID(0x10000000,  36 term constant),ID(0x10000000,  29 term constant)]) which got ID(0x00800000,   6 atom ordinary_ground)
 1 Domain extension interpretation (intermediate result, including EDB): {b("c"),aux_d_26000000_0("test1.owl",cp1,cn1,rp1,rn1,"D","c"),aux_d_26000000_1("test1.owl",cp1,cn1,rp1,rn1,"D","c")}
 1 Loop with herbrandBase={b("c"),cp("B","c"),aux_r_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D","c"),aux_d_26000000_0("test1.owl",cp1,cn1,rp1,rn1,"D","c"),aux_d_26000000_1("test1.owl",cp1,cn1,rp1,rn1,"D","c")}
 1 Instantiating genuine grounder with gringo
 1 Creating new term with name 'int2'
 1 stored term Term(int2) which got ID(0x10000000,  55 term constant)
 1 Creating new term with name 'anonymous3'
 1 stored term Term(anonymous3) which got ID(0x10000000,  56 term constant)
 1 Sending the following input to Gringo: {{b("c").aux_d_26000000_0("test1.owl",cp1,cn1,rp1,rn1,"D","c").aux_d_26000000_1("test1.owl",cp1,cn1,rp1,rn1,"D","c").
d(X) :- aux_r_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D",X).
cp("D",X) :- d(X).
cp("B",X) :- b(X).
aux_r_26000000_1("test1.owl",cp,cn,rp,rm,"C",X) | aux_n_26000000_1("test1.owl",cp,cn,rp,rm,"C",X) :- aux_d_26000000_1("test1.owl",cp,cn,rp,rm,"C",X).
 :- aux_r_26000000_1("test1.owl",cp,cn,rp,rm,"C",X).
int2(0..0).}}
 1 Got atom cp("B","c") with Gringo-ID 5 and dlvhex-ID ID(0x00000000,   1 atom ordinary_ground)
 1 Got atom b("c") with Gringo-ID 2 and dlvhex-ID ID(0x00000000,   0 atom ordinary_ground)
 1 Got atom aux_d_26000000_1("test1.owl",cp1,cn1,rp1,rn1,"D","c") with Gringo-ID 4 and dlvhex-ID ID(0x00800000,   6 atom ordinary_ground)
 1 parsing gringo ground atom 'int2(0)'
 1 Term tuple: int2
 1 got token 'int2'
 1 Term tuple: 0
 1 got token '0'
 1 Got atom int2(0) with Gringo-ID 6 and dlvhex-ID ID(0x00000000,   7 atom ordinary_ground)
 1 Got atom aux_d_26000000_0("test1.owl",cp1,cn1,rp1,rn1,"D","c") with Gringo-ID 3 and dlvhex-ID ID(0x00800000,   5 atom ordinary_ground)
 1 Transforming 5 rules to DLVHEX
 1 Setting fact 0 (Gringo: 2)
 1 Setting fact 5 (Gringo: 3)
 1 Setting fact 6 (Gringo: 4)
 1 Setting fact 1 (Gringo: 5)
 1 Setting fact 7 (Gringo: 6)
 1 Got the following ground program from Gringo: {b("c").cp("B","c").aux_d_26000000_0("test1.owl",cp1,cn1,rp1,rn1,"D","c").aux_d_26000000_1("test1.owl",cp1,cn1,rp1,rn1,"D","c").int2(0).

}
 1 EA::uM/0x1c17c00 ENTRY
 1 EA::uM/0x1c17c00 PM::uM(do)/0x1c177e0 = PredicateMask::updateMask (need to update) for predicates {32,33,34,35}
 1 EA::uM/0x1c17c00 PM::uM(do)/0x1c177e0 need to inspect 5 missing bits
 1 EA::uM/0x1c17c00 PM::uM(do)/0x1c177e0 relevant predicate constants are cp1, cn1, rp1, rn1, 
 1 EA::uM/0x1c17c00 PM::uM(do)/0x1c177e0 updateMask created new set of relevant ogatoms: {} and knownAddresses is 8
 1 EA::uM/0x1c17c00 EXIT
 1 Enumerating nonmonotonic input assignments to ID(0x26000000,   0 literal external)
 1 Evaluating external atom ID(0x26000000,   0 literal external) under {b("c"),cp("B","c"),aux_r_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D","c"),aux_d_26000000_0("test1.owl",cp1,cn1,rp1,rn1,"D","c"),aux_d_26000000_1("test1.owl",cp1,cn1,rp1,rn1,"D","c")}
 1 = evaluateExternalAtom for &cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X)  (aux=ID_FAIL) with input interpretation {b("c"),cp("B","c"),aux_r_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D","c"),aux_d_26000000_0("test1.owl",cp1,cn1,rp1,rn1,"D","c"),aux_d_26000000_1("test1.owl",cp1,cn1,rp1,rn1,"D","c")}
 1 EA::uM/0x1c17c00 ENTRY
 1 EA::uM/0x1c17c00 EXIT
 1 gACS getAuxiliaryConstantSymbol for r ID(0x10000000,  14 term constant)
 1 gACS found ID(0x10c00000,  43 term constant)
 1 Retrieve with learning, pointer to nogood container: not available
 1 vEAAT = verifyEAtomAnswerTuple for &cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X)  (aux=ID_FAIL) and tuple <"c">
 1 integrating eatom tuple <ID(0x10c00000,  43 term constant),ID(0x10000000,  31 term constant),ID(0x10000000,  32 term constant),ID(0x10000000,  33 term constant),ID(0x10000000,  34 term constant),ID(0x10000000,  35 term constant),ID(0x10000000,  36 term constant),ID(0x10000000,  29 term constant)>
 1 got replacement ID ID(0x00c00000,   4 atom ordinary_ground)
 1 output interpretation is now {b("c"),cp("B","c"),aux_r_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D","c"),aux_d_26000000_0("test1.owl",cp1,cn1,rp1,rn1,"D","c"),aux_d_26000000_1("test1.owl",cp1,cn1,rp1,rn1,"D","c")}
 1 Enumerated all nonmonotonic input assignments to ID(0x26000000,   0 literal external)
 1 EA::uM/0x1c18470 ENTRY
 1 EA::uM/0x1c18470 PM::uM(do)/0x1c180a0 = PredicateMask::updateMask (need to update) for predicates {37,38,39,40}
 1 EA::uM/0x1c18470 PM::uM(do)/0x1c180a0 need to inspect 3 missing bits
 1 EA::uM/0x1c18470 PM::uM(do)/0x1c180a0 relevant predicate constants are cp, cn, rp, rm, 
 1 EA::uM/0x1c18470 PM::uM(do)/0x1c180a0 updateMask created new set of relevant ogatoms: {cp("B","c")} and knownAddresses is 8
 1 EA::uM/0x1c18470 EXIT
 1 Enumerating nonmonotonic input assignments to ID(0x26000000,   1 literal external)
 1 Evaluating external atom ID(0x26000000,   1 literal external) under {b("c"),cp("B","c"),aux_r_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D","c"),aux_d_26000000_0("test1.owl",cp1,cn1,rp1,rn1,"D","c"),aux_d_26000000_1("test1.owl",cp1,cn1,rp1,rn1,"D","c")}
 1 = evaluateExternalAtom for &cDL["test1.owl",cp,cn,rp,rm,"C"](X)  (aux=ID_FAIL) with input interpretation {b("c"),cp("B","c"),aux_r_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D","c"),aux_d_26000000_0("test1.owl",cp1,cn1,rp1,rn1,"D","c"),aux_d_26000000_1("test1.owl",cp1,cn1,rp1,rn1,"D","c")}
 1 EA::uM/0x1c18470 ENTRY
 1 EA::uM/0x1c18470 EXIT
 1 gACS getAuxiliaryConstantSymbol for r ID(0x10000000,  14 term constant)
 1 gACS found ID(0x10c00000,  43 term constant)
 1 Retrieve with learning, pointer to nogood container: not available
 1 Enumerated all nonmonotonic input assignments to ID(0x26000000,   1 literal external)
 1 Converting atom with address 4
 1 getIDByAuxiliaryConstantSymbol for ID(0x10c00000,  43 term constant)
 1 found ID(0x10c00000,  43 term constant)
 1 gACS getAuxiliaryConstantSymbol for d ID(0x26000000,   0 literal external)
 1 gACS found ID(0x10800000,  54 term constant)
 1 getIDByAuxiliaryConstantSymbol for ID(0x10c00000,  43 term constant)
 1 found ID(0x10c00000,  43 term constant)
 1 gACS getAuxiliaryConstantSymbol for d ID(0x26000000,   1 literal external)
 1 gACS found ID(0x10800000,  44 term constant)
 1 Domain extension interpretation (intermediate result, including EDB): {b("c"),aux_d_26000000_0("test1.owl",cp1,cn1,rp1,rn1,"D","c"),aux_d_26000000_1("test1.owl",cp1,cn1,rp1,rn1,"D","c")}
 1 Domain extension interpretation (final result): {aux_d_26000000_0("test1.owl",cp1,cn1,rp1,rn1,"D","c"),aux_d_26000000_1("test1.owl",cp1,cn1,rp1,rn1,"D","c")}
 1 RMG: evaluating guessing program
 1 Instantiating genuine grounder with gringo
 1 Creating new term with name 'int4'
 1 stored term Term(int4) which got ID(0x10000000,  57 term constant)
 1 Creating new term with name 'anonymous5'
 1 stored term Term(anonymous5) which got ID(0x10000000,  58 term constant)
 1 Sending the following input to Gringo: {{b("c").aux_d_26000000_0("test1.owl",cp1,cn1,rp1,rn1,"D","c").aux_d_26000000_1("test1.owl",cp1,cn1,rp1,rn1,"D","c").
d(X) :- aux_r_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D",X).
cp("D",X) :- d(X).
cp("B",X) :- b(X).
 :- aux_r_10000000_e("test1.owl",cp,cn,rp,rm,"C",X), aux_d_26000000_1("test1.owl",cp,cn,rp,rm,"C",X).
int4(0..0).}}
 1 Got atom cp("B","c") with Gringo-ID 5 and dlvhex-ID ID(0x00000000,   1 atom ordinary_ground)
 1 Got atom b("c") with Gringo-ID 2 and dlvhex-ID ID(0x00000000,   0 atom ordinary_ground)
 1 Got atom aux_d_26000000_1("test1.owl",cp1,cn1,rp1,rn1,"D","c") with Gringo-ID 4 and dlvhex-ID ID(0x00800000,   6 atom ordinary_ground)
 1 parsing gringo ground atom 'int4(0)'
 1 Term tuple: int4
 1 got token 'int4'
 1 Term tuple: 0
 1 got token '0'
 1 Got atom int4(0) with Gringo-ID 6 and dlvhex-ID ID(0x00000000,   8 atom ordinary_ground)
 1 Got atom aux_d_26000000_0("test1.owl",cp1,cn1,rp1,rn1,"D","c") with Gringo-ID 3 and dlvhex-ID ID(0x00800000,   5 atom ordinary_ground)
 1 Transforming 5 rules to DLVHEX
 1 Setting fact 0 (Gringo: 2)
 1 Setting fact 5 (Gringo: 3)
 1 Setting fact 6 (Gringo: 4)
 1 Setting fact 1 (Gringo: 5)
 1 Setting fact 8 (Gringo: 6)
 1 Got the following ground program from Gringo: {b("c").cp("B","c").aux_d_26000000_0("test1.owl",cp1,cn1,rp1,rn1,"D","c").aux_d_26000000_1("test1.owl",cp1,cn1,rp1,rn1,"D","c").int4(0).

}
 1 sEA  = ExternalAtomMask::setEAtom for &cDL["test1.owl",cp,cn,rp,rm,"C"](X)  (aux=ID_FAIL) and 0 rules in groundidb
 1 sEA gACS getAuxiliaryConstantSymbol for r ID(0x10000000,  14 term constant)
 1 sEA gACS found ID(0x10c00000,  43 term constant)
 1 sEA gACS getAuxiliaryConstantSymbol for n ID(0x10000000,  14 term constant)
 1 sEA gACS found ID(0x10c00000,  50 term constant)
 1 sEA Adding input predicate cp
 1 sEA PM::aP/0x1c932f0 adding predicate ID(0x10000000,  37 term constant), knownAddresses was 0
 1 sEA Adding input predicate cn
 1 sEA PM::aP/0x1c932f0 adding predicate ID(0x10000000,  38 term constant), knownAddresses was 0
 1 sEA Adding input predicate rp
 1 sEA PM::aP/0x1c932f0 adding predicate ID(0x10000000,  39 term constant), knownAddresses was 0
 1 sEA Adding input predicate rm
 1 sEA PM::aP/0x1c932f0 adding predicate ID(0x10000000,  40 term constant), knownAddresses was 0
 1 sEA preparedTuple is <aux_r_10000000_e, "test1.owl", cp, cn, rp, rm, "C", X>
 1 sEA Watching 0 output atoms: {}
 1 sEA gACS getAuxiliaryConstantSymbol for r ID(0x10000000,  14 term constant)
 1 sEA gACS found ID(0x10c00000,  43 term constant)
 1 sEA gACS getAuxiliaryConstantSymbol for n ID(0x10000000,  14 term constant)
 1 sEA gACS found ID(0x10c00000,  50 term constant)
 1 ExternalAtomMask::updateMask
 1 PM::uM(do)/0x1c932f0 = PredicateMask::updateMask (need to update) for predicates {37,38,39,40}
 1 PM::uM(do)/0x1c932f0 need to inspect 9 missing bits
 1 PM::uM(do)/0x1c932f0 relevant predicate constants are cp, cn, rp, rm, 
 1 PM::uM(do)/0x1c932f0 updateMask created new set of relevant ogatoms: {cp("B","c")} and knownAddresses is 9
 1 sEA  = ExternalAtomMask::setEAtom for &cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X)  (aux=ID_FAIL) and 0 rules in groundidb
 1 sEA gACS getAuxiliaryConstantSymbol for r ID(0x10000000,  14 term constant)
 1 sEA gACS found ID(0x10c00000,  43 term constant)
 1 sEA gACS getAuxiliaryConstantSymbol for n ID(0x10000000,  14 term constant)
 1 sEA gACS found ID(0x10c00000,  50 term constant)
 1 sEA Adding input predicate cp1
 1 sEA PM::aP/0x1c92510 adding predicate ID(0x10000000,  32 term constant), knownAddresses was 0
 1 sEA Adding input predicate cn1
 1 sEA PM::aP/0x1c92510 adding predicate ID(0x10000000,  33 term constant), knownAddresses was 0
 1 sEA Adding input predicate rp1
 1 sEA PM::aP/0x1c92510 adding predicate ID(0x10000000,  34 term constant), knownAddresses was 0
 1 sEA Adding input predicate rn1
 1 sEA PM::aP/0x1c92510 adding predicate ID(0x10000000,  35 term constant), knownAddresses was 0
 1 sEA preparedTuple is <aux_r_10000000_e, "test1.owl", cp1, cn1, rp1, rn1, "D", X>
 1 sEA Watching 0 output atoms: {}
 1 sEA gACS getAuxiliaryConstantSymbol for r ID(0x10000000,  14 term constant)
 1 sEA gACS found ID(0x10c00000,  43 term constant)
 1 sEA gACS getAuxiliaryConstantSymbol for n ID(0x10000000,  14 term constant)
 1 sEA gACS found ID(0x10c00000,  50 term constant)
 1 ExternalAtomMask::updateMask
 1 PM::uM(do)/0x1c92510 = PredicateMask::updateMask (need to update) for predicates {32,33,34,35}
 1 PM::uM(do)/0x1c92510 need to inspect 9 missing bits
 1 PM::uM(do)/0x1c92510 relevant predicate constants are cp1, cn1, rp1, rn1, 
 1 PM::uM(do)/0x1c92510 updateMask created new set of relevant ogatoms: {} and knownAddresses is 9
 1 Contructing atom dependency graph for 0 rules
 1 Computing strongly connected components
 1 Partitioning program
 1 Computing head-cycles of components
 1 Computing e-cycles of components
 1 Program:
EDB: {b("c"),cp("B","c"),aux_d_26000000_0("test1.owl",cp1,cn1,rp1,rn1,"D","c"),aux_d_26000000_1("test1.owl",cp1,cn1,rp1,rn1,"D","c"),int4(0)}
IDB:

has SCC-decomposition: 
 1 Instantiating genuine solver with clasp (min-check: 0)
 1 Configure clasp in ASP mode
 1 Interpreting clasp command-line
 1 Found configuration: --configuration=frumpy
 1 Configuring options
 1 Parsing command-line
 1 Assigning specified values
 1 Assigning defaults
 1 Applying options
 1 Finished option parsing
 1 Sending EDB to clasp: {b("c"),cp("B","c"),aux_d_26000000_0("test1.owl",cp1,cn1,rp1,rn1,"D","c"),aux_d_26000000_1("test1.owl",cp1,cn1,rp1,rn1,"D","c"),int4(0)}
 1 Sending IDB to clasp
 1 SAT instance has 1 variables
 1 Instance is not inconsistent
 1 Setting all 1 variables to frozen
 1 Prepare model enumerator
 1 Finalizing initialization
 1 Problem has 1 variables
 1 Symbol table of optimized program:
 1 H:0 (b("c")) <--> C:0/0
 1 H:1 (cp("B","c")) <--> C:0/0
 1 H:5 (aux_d_26000000_0("test1.owl",cp1,cn1,rp1,rn1,"D","c")) <--> C:0/0
 1 H:6 (aux_d_26000000_1("test1.owl",cp1,cn1,rp1,rn1,"D","c")) <--> C:0/0
 1 H:8 (int4(0)) <--> C:0/0
 1 hexToClasp.size()=9, symTab.size()=5
 1 Prepare solver object
 1 Adding post propagator
 1 Initializing assignment extraction
 1 Adding watch for literal C:0/0 and its negation
 1 Adding watch for literal C:0/0 and its negation
 1 Adding watch for literal C:0/0 and its negation
 1 Adding watch for literal C:0/0 and its negation
 1 Adding watch for literal C:0/0 and its negation
 1 Extracting full interpretation from clasp
 1 Extracting clasp interpretation
 1 Literal C:0/0@0,H:0:b("c") is true
 1 Literal C:0/0@0,H:1:cp("B","c") is true
 1 Literal C:0/0@0,H:5:aux_d_26000000_0("test1.owl",cp1,cn1,rp1,rn1,"D","c") is true
 1 Literal C:0/0@0,H:6:aux_d_26000000_1("test1.owl",cp1,cn1,rp1,rn1,"D","c") is true
 1 Literal C:0/0@0,H:8:int4(0) is true
 1 RMG: start support set learning
 1 RMG: number of all eatoms: 2
 1 RMG: support set learning option is enabled
 1 gACS getAuxiliaryConstantSymbol for o ID(0x00000000,   0 atom ordinary_ground)
 1 gACS found ID(0x10800000,  27 term constant)
 1 gACS getAuxiliaryConstantSymbol for o ID(0x00000000,   1 atom ordinary_ground)
 1 gACS created symbol 'aux_o_0_1'
 1 gACS PM::aP/0x1bfb180 adding predicate ID(0x10800000,  59 term constant), knownAddresses was 0
 1 gACS returning id ID(0x10800000,  59 term constant) for aux symbol aux_o_0_1
 1 stored term Term(O) which got ID(0x12000000,  60 term variable)
 1 stored term Term(O1) which got ID(0x12000000,  61 term variable)
 1 stored term Term(O2) which got ID(0x12000000,  62 term variable)
 1 RMG: program idb before support set learning and before additional rule construction: 
 1 RMG: d(X) :- aux_r_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D",X).

 1 RMG: cp("D",X) :- d(X).

 1 RMG: cp("B",X) :- b(X).

 1 RMG: :- aux_r_10000000_e("test1.owl",cp,cn,rp,rm,"C",X), aux_d_26000000_1("test1.owl",cp,cn,rp,rm,"C",X).

 1 RMG: consider atom &cDL["test1.owl",cp,cn,rp,rm,"C"](X)
 1 RMG: annotated ground program is constructed
 1 sEA  = ExternalAtomMask::setEAtom for &cDL["test1.owl",cp,cn,rp,rm,"C"](X)  (aux=ID_FAIL) and 0 rules in groundidb
 1 sEA gACS getAuxiliaryConstantSymbol for r ID(0x10000000,  14 term constant)
 1 sEA gACS found ID(0x10c00000,  43 term constant)
 1 sEA gACS getAuxiliaryConstantSymbol for n ID(0x10000000,  14 term constant)
 1 sEA gACS found ID(0x10c00000,  50 term constant)
 1 sEA Adding input predicate cp
 1 sEA PM::aP/0x1c29fe0 adding predicate ID(0x10000000,  37 term constant), knownAddresses was 0
 1 sEA Adding input predicate cn
 1 sEA PM::aP/0x1c29fe0 adding predicate ID(0x10000000,  38 term constant), knownAddresses was 0
 1 sEA Adding input predicate rp
 1 sEA PM::aP/0x1c29fe0 adding predicate ID(0x10000000,  39 term constant), knownAddresses was 0
 1 sEA Adding input predicate rm
 1 sEA PM::aP/0x1c29fe0 adding predicate ID(0x10000000,  40 term constant), knownAddresses was 0
 1 sEA preparedTuple is <aux_r_10000000_e, "test1.owl", cp, cn, rp, rm, "C", X>
 1 sEA Watching 0 output atoms: {}
 1 sEA gACS getAuxiliaryConstantSymbol for r ID(0x10000000,  14 term constant)
 1 sEA gACS found ID(0x10c00000,  43 term constant)
 1 sEA gACS getAuxiliaryConstantSymbol for n ID(0x10000000,  14 term constant)
 1 sEA gACS found ID(0x10c00000,  50 term constant)
 1 ExternalAtomMask::updateMask
 1 PM::uM(do)/0x1c29fe0 = PredicateMask::updateMask (need to update) for predicates {37,38,39,40}
 1 PM::uM(do)/0x1c29fe0 need to inspect 9 missing bits
 1 PM::uM(do)/0x1c29fe0 relevant predicate constants are cp, cn, rp, rm, 
 1 PM::uM(do)/0x1c29fe0 updateMask created new set of relevant ogatoms: {cp("B","c")} and knownAddresses is 9
 1 sEA  = ExternalAtomMask::setEAtom for &cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X)  (aux=ID_FAIL) and 0 rules in groundidb
 1 sEA gACS getAuxiliaryConstantSymbol for r ID(0x10000000,  14 term constant)
 1 sEA gACS found ID(0x10c00000,  43 term constant)
 1 sEA gACS getAuxiliaryConstantSymbol for n ID(0x10000000,  14 term constant)
 1 sEA gACS found ID(0x10c00000,  50 term constant)
 1 sEA Adding input predicate cp1
 1 sEA PM::aP/0x1ca3620 adding predicate ID(0x10000000,  32 term constant), knownAddresses was 0
 1 sEA Adding input predicate cn1
 1 sEA PM::aP/0x1ca3620 adding predicate ID(0x10000000,  33 term constant), knownAddresses was 0
 1 sEA Adding input predicate rp1
 1 sEA PM::aP/0x1ca3620 adding predicate ID(0x10000000,  34 term constant), knownAddresses was 0
 1 sEA Adding input predicate rn1
 1 sEA PM::aP/0x1ca3620 adding predicate ID(0x10000000,  35 term constant), knownAddresses was 0
 1 sEA preparedTuple is <aux_r_10000000_e, "test1.owl", cp1, cn1, rp1, rn1, "D", X>
 1 sEA Watching 0 output atoms: {}
 1 sEA gACS getAuxiliaryConstantSymbol for r ID(0x10000000,  14 term constant)
 1 sEA gACS found ID(0x10c00000,  43 term constant)
 1 sEA gACS getAuxiliaryConstantSymbol for n ID(0x10000000,  14 term constant)
 1 sEA gACS found ID(0x10c00000,  50 term constant)
 1 ExternalAtomMask::updateMask
 1 PM::uM(do)/0x1ca3620 = PredicateMask::updateMask (need to update) for predicates {32,33,34,35}
 1 PM::uM(do)/0x1ca3620 need to inspect 9 missing bits
 1 PM::uM(do)/0x1ca3620 relevant predicate constants are cp1, cn1, rp1, rn1, 
 1 PM::uM(do)/0x1ca3620 updateMask created new set of relevant ogatoms: {} and knownAddresses is 9
 1 Contructing atom dependency graph for 0 rules
 1 Computing strongly connected components
 1 Partitioning program
 1 Computing head-cycles of components
 1 Computing e-cycles of components
 1 Program:
EDB: {b("c"),cp("B","c"),aux_d_26000000_0("test1.owl",cp1,cn1,rp1,rn1,"D","c"),aux_d_26000000_1("test1.owl",cp1,cn1,rp1,rn1,"D","c"),int4(0)}
IDB:

has SCC-decomposition: 
 1 RMG: evaluating external atom &cDL["test1.owl",cp,cn,rp,rm,"C"](X) for support set learning
 1 = learnSupportSetsForExternalAtom for &cDL["test1.owl",cp,cn,rp,rm,"C"](X)  (aux=ID_FAIL)
 1 EA::uM/0x1c18470 ENTRY
 1 EA::uM/0x1c18470 PM::uM(do)/0x1c180a0 = PredicateMask::updateMask (need to update) for predicates {37,38,39,40}
 1 EA::uM/0x1c18470 PM::uM(do)/0x1c180a0 need to inspect 1 missing bits
 1 EA::uM/0x1c18470 PM::uM(do)/0x1c180a0 relevant predicate constants are cp, cn, rp, rm, 
 1 EA::uM/0x1c18470 PM::uM(do)/0x1c180a0 updateMask created new set of relevant ogatoms: {cp("B","c")} and knownAddresses is 9
 1 EA::uM/0x1c18470 EXIT
 1 LSS: learning support sets started
 1 LSS: Ontology is in DLLite
 1 prepareOntology
 1 Accessing cached ontology test1.owl
 1 Computing classification
 1 Current triple: http://www.semanticweb.org/dasha/ontologies/2014/9/untitled-ontology-52 / rdf:type / owl:Ontology
 1 No
 1 No
 1 Current triple: http://www.semanticweb.org/dasha/ontologies/2014/9/untitled-ontology-52#B / rdf:type / owl:Class
 1 Construct facts of the form op(C,negC), sub(C,C) for this class.
 1 stored term Term("-B") which got ID(0x10000000,  63 term constant)
 1 stored oatom OrdinaryAtom(0,'op("B","-B")',[ID(0x10000000,  19 term constant),ID(0x10000000,  42 term constant),ID(0x10000000,  63 term constant)]) which got ID(0x00000000,   9 atom ordinary_ground)
 1 stored oatom OrdinaryAtom(0,'sub("B","B")',[ID(0x10000000,  18 term constant),ID(0x10000000,  42 term constant),ID(0x10000000,  42 term constant)]) which got ID(0x00000000,  10 atom ordinary_ground)
 1 No
 1 No
 1 Current triple: http://www.semanticweb.org/dasha/ontologies/2014/9/untitled-ontology-52#C / rdf:type / owl:Class
 1 Construct facts of the form op(C,negC), sub(C,C) for this class.
 1 stored term Term("-C") which got ID(0x10000000,  64 term constant)
 1 stored oatom OrdinaryAtom(0,'op("C","-C")',[ID(0x10000000,  19 term constant),ID(0x10000000,  41 term constant),ID(0x10000000,  64 term constant)]) which got ID(0x00000000,  11 atom ordinary_ground)
 1 stored oatom OrdinaryAtom(0,'sub("C","C")',[ID(0x10000000,  18 term constant),ID(0x10000000,  41 term constant),ID(0x10000000,  41 term constant)]) which got ID(0x00000000,  12 atom ordinary_ground)
 1 No
 1 No
 1 Current triple: http://www.semanticweb.org/dasha/ontologies/2014/9/untitled-ontology-52#D / rdf:type / owl:Class
 1 Construct facts of the form op(C,negC), sub(C,C) for this class.
 1 stored term Term("-D") which got ID(0x10000000,  65 term constant)
 1 stored oatom OrdinaryAtom(0,'op("D","-D")',[ID(0x10000000,  19 term constant),ID(0x10000000,  36 term constant),ID(0x10000000,  65 term constant)]) which got ID(0x00000000,  13 atom ordinary_ground)
 1 stored oatom OrdinaryAtom(0,'sub("D","D")',[ID(0x10000000,  18 term constant),ID(0x10000000,  36 term constant),ID(0x10000000,  36 term constant)]) which got ID(0x00000000,  14 atom ordinary_ground)
 1 No
 1 No
 1 Current triple: http://www.semanticweb.org/dasha/ontologies/2014/9/untitled-ontology-52#c / rdf:type / owl:NamedIndividual
 1 No
 1 No
 1 Current triple: http://www.semanticweb.org/dasha/ontologies/2014/9/untitled-ontology-52#c / rdf:type / http://www.semanticweb.org/dasha/ontologies/2014/9/untitled-ontology-52#D
 1 No
 1 No
 1 Checking if there are any domain restrictions on properties
 1 CLP: EDB of classification program: {op("B","-B"),sub("B","B"),op("C","-C"),sub("C","C"),op("D","-D"),sub("D","D")}
 1 LSS: Using the following facts as input to the classification program: {op("B","-B"),sub("B","B"),op("C","-C"),sub("C","C"),op("D","-D"),sub("D","D")}
 1 Resetting context
 1 Starting state pipeline without parsing
 1 Associate PluginAtom instances with ExternalAtom instances
 1 aEAwPA = associateExtAtomsWithPluginAtoms
 1 rFS =reorderForSafety
 1 rFS safety reordering loop:
 1 rFS  src 'sub(X,Y),sub(Y,Z)'
 1 rFS  safevars ''
 1 rFS checking literal sub(X,Y)
 1 rFS  -> safe, marking all variables as safe
 1 rFS  -> transferring
 1 rFS checking literal sub(Y,Z)
 1 rFS  -> safe, marking all variables as safe
 1 rFS  -> transferring
 1 rFS transferSafeLiteralsAndNewlySafeVariables returning with reordered=0 and nottransferred=0
 1 rFS  -> src ''
 1 rFS  -> tgt 'sub(X,Y),sub(Y,Z)'
 1 rFS  -> newsafevars 'X,Y,Z'
 1 rFS =reorderForSafety
 1 rFS safety reordering loop:
 1 rFS  src 'op(X,X2),op(Y,Y2),sub(X,Y)'
 1 rFS  safevars ''
 1 rFS checking literal op(X,X2)
 1 rFS  -> safe, marking all variables as safe
 1 rFS  -> transferring
 1 rFS checking literal op(Y,Y2)
 1 rFS  -> safe, marking all variables as safe
 1 rFS  -> transferring
 1 rFS checking literal sub(X,Y)
 1 rFS  -> safe, marking all variables as safe
 1 rFS  -> transferring
 1 rFS transferSafeLiteralsAndNewlySafeVariables returning with reordered=0 and nottransferred=0
 1 rFS  -> src ''
 1 rFS  -> tgt 'op(X,X2),op(Y,Y2),sub(X,Y)'
 1 rFS  -> newsafevars 'X,Y,X2,Y2'
 1 rFS =reorderForSafety
 1 rFS safety reordering loop:
 1 rFS  src 'sub(X,Y),op(Y,Y1)'
 1 rFS  safevars ''
 1 rFS checking literal sub(X,Y)
 1 rFS  -> safe, marking all variables as safe
 1 rFS  -> transferring
 1 rFS checking literal op(Y,Y1)
 1 rFS  -> safe, marking all variables as safe
 1 rFS  -> transferring
 1 rFS transferSafeLiteralsAndNewlySafeVariables returning with reordered=0 and nottransferred=0
 1 rFS  -> src ''
 1 rFS  -> tgt 'sub(X,Y),op(Y,Y1)'
 1 rFS  -> newsafevars 'X,Y,Y1'
 1 rFS =reorderForSafety
 1 rFS safety reordering loop:
 1 rFS  src 'conf(X,Y1),sub(Y2,Y1)'
 1 rFS  safevars ''
 1 rFS checking literal conf(X,Y1)
 1 rFS  -> safe, marking all variables as safe
 1 rFS  -> transferring
 1 rFS checking literal sub(Y2,Y1)
 1 rFS  -> safe, marking all variables as safe
 1 rFS  -> transferring
 1 rFS transferSafeLiteralsAndNewlySafeVariables returning with reordered=0 and nottransferred=0
 1 rFS  -> src ''
 1 rFS  -> tgt 'conf(X,Y1),sub(Y2,Y1)'
 1 rFS  -> newsafevars 'X,Y2,Y1'
 1 rFS =reorderForSafety
 1 rFS safety reordering loop:
 1 rFS  src 'conf(X,Y),inv(X,Y)'
 1 rFS  safevars ''
 1 rFS checking literal conf(X,Y)
 1 rFS  -> safe, marking all variables as safe
 1 rFS  -> transferring
 1 rFS checking literal inv(X,Y)
 1 rFS  -> safe, marking all variables as safe
 1 rFS  -> transferring
 1 rFS transferSafeLiteralsAndNewlySafeVariables returning with reordered=0 and nottransferred=0
 1 rFS  -> src ''
 1 rFS  -> tgt 'conf(X,Y),inv(X,Y)'
 1 rFS  -> newsafevars 'X,Y'
 1 rFS =reorderForSafety
 1 rFS safety reordering loop:
 1 rFS  src 'op(X,Y)'
 1 rFS  safevars ''
 1 rFS checking literal op(X,Y)
 1 rFS  -> safe, marking all variables as safe
 1 rFS  -> transferring
 1 rFS transferSafeLiteralsAndNewlySafeVariables returning with reordered=0 and nottransferred=0
 1 rFS  -> src ''
 1 rFS  -> tgt 'op(X,Y)'
 1 rFS  -> newsafevars 'X,Y'
 1 rFS =reorderForSafety
 1 rFS safety reordering loop:
 1 rFS  src 'inv(X,Y)'
 1 rFS  safevars ''
 1 rFS checking literal inv(X,Y)
 1 rFS  -> safe, marking all variables as safe
 1 rFS  -> transferring
 1 rFS transferSafeLiteralsAndNewlySafeVariables returning with reordered=0 and nottransferred=0
 1 rFS  -> src ''
 1 rFS  -> tgt 'inv(X,Y)'
 1 rFS  -> newsafevars 'X,Y'
 1 LiberalSafetyChecker::createDependencyGraph
 1 Computing strongly connected components in attribute dependency graph
 1 Checking if cycle 5 is benign
 1 Cycle is benign
 1 Checking if cycle 6 is benign
 1 Cycle is benign
 1 0 attributes depend cyclically on external attributes
 1 Attribute sub#1 is externally acyclic
 1 Attribute sub#1 is domain-expansion safe
 1 Variable r11/X is bounded
 1 Fulfilled precondition of attribute sub#1
 1 Variable r11/Y is bounded
 1 Variable r12/X is bounded
 1 Variable r13/X is bounded
 1 Fulfilled precondition of attribute conf#1
 1 Variable r14/Y2 is bounded
 1 Fulfilled precondition of attribute conf#2
 1 Attribute sub#2 is externally acyclic
 1 Attribute sub#2 is domain-expansion safe
 1 Variable r11/Z is bounded
 1 Fulfilled precondition of attribute sub#2
 1 Variable r12/Y is bounded
 1 Variable r13/Y is bounded
 1 Variable r14/Y1 is bounded
 1 Attribute op#1 is externally acyclic
 1 Attribute op#1 is domain-expansion safe
 1 Variable r15/X is bounded
 1 Fulfilled precondition of attribute op#2
 1 Attribute op#2 is domain-expansion safe
 1 Variable r12/X2 is bounded
 1 Fulfilled precondition of attribute sub#2
 1 Variable r12/Y2 is bounded
 1 Fulfilled precondition of attribute sub#1
 1 Variable r13/Y1 is bounded
 1 Fulfilled precondition of attribute conf#2
 1 Attribute conf#2 is domain-expansion safe
 1 Variable r17/Y is bounded
 1 Variable r15/Y is bounded
 1 Fulfilled precondition of attribute op#1
 1 Attribute op#2 is externally acyclic
 1 Attribute conf#1 is externally acyclic
 1 Attribute conf#1 is domain-expansion safe
 1 Variable r14/X is bounded
 1 Fulfilled precondition of attribute conf#1
 1 Variable r17/X is bounded
 1 Fulfilled precondition of attribute confref#1
 1 Attribute confref#1 is domain-expansion safe
 1 Attribute conf#2 is externally acyclic
 1 Attribute confref#1 is externally acyclic
 1 Attribute inv#1 is externally acyclic
 1 Attribute inv#1 is domain-expansion safe
 1 Variable r16/X is bounded
 1 Fulfilled precondition of attribute inv#2
 1 Attribute inv#2 is domain-expansion safe
 1 Variable r16/Y is bounded
 1 Fulfilled precondition of attribute inv#1
 1 Attribute inv#2 is externally acyclic
 1 Constructing optimized rule
 1 Checking safety of optimized rule
 1 rFS =reorderForSafety
 1 rFS safety reordering loop:
 1 rFS  src 'sub(X,Y),sub(Y,Z)'
 1 rFS  safevars ''
 1 rFS checking literal sub(X,Y)
 1 rFS  -> safe, marking all variables as safe
 1 rFS  -> transferring
 1 rFS checking literal sub(Y,Z)
 1 rFS  -> safe, marking all variables as safe
 1 rFS  -> transferring
 1 rFS transferSafeLiteralsAndNewlySafeVariables returning with reordered=0 and nottransferred=0
 1 rFS  -> src ''
 1 rFS  -> tgt 'sub(X,Y),sub(Y,Z)'
 1 rFS  -> newsafevars 'X,Y,Z'
 1 Checking variables of optimized rule
 1 Optimized rule is safe
 1 resetting custom model generator provider
 1 resetting state
 1 resetting callbacks
 1 resetting modelBuilder
 1 resetting parser
 1 resetting evalgraph
 1 resetting compgraph
 1 resetting depgraph
 1 resetting edbList
 1 resetting inputProvider
 1 resetting aspsoftware
 1 resetting pluginData
 1 resetting pluginEnvironment
 1 resetting registry, usage count was 266 (it should be 2)
 1 resetting pluginAtoms
 1 resetting pluginContainer, usage count was 0 (it should be 1)
 1 Constructing optimized rule
 1 Checking safety of optimized rule
 1 rFS =reorderForSafety
 1 rFS safety reordering loop:
 1 rFS  src 'op(X,X2),op(Y,Y2),sub(X,Y)'
 1 rFS  safevars ''
 1 rFS checking literal op(X,X2)
 1 rFS  -> safe, marking all variables as safe
 1 rFS  -> transferring
 1 rFS checking literal op(Y,Y2)
 1 rFS  -> safe, marking all variables as safe
 1 rFS  -> transferring
 1 rFS checking literal sub(X,Y)
 1 rFS  -> safe, marking all variables as safe
 1 rFS  -> transferring
 1 rFS transferSafeLiteralsAndNewlySafeVariables returning with reordered=0 and nottransferred=0
 1 rFS  -> src ''
 1 rFS  -> tgt 'op(X,X2),op(Y,Y2),sub(X,Y)'
 1 rFS  -> newsafevars 'X,Y,X2,Y2'
 1 Checking variables of optimized rule
 1 Optimized rule is safe
 1 resetting custom model generator provider
 1 resetting state
 1 resetting callbacks
 1 resetting modelBuilder
 1 resetting parser
 1 resetting evalgraph
 1 resetting compgraph
 1 resetting depgraph
 1 resetting edbList
 1 resetting inputProvider
 1 resetting aspsoftware
 1 resetting pluginData
 1 resetting pluginEnvironment
 1 resetting registry, usage count was 266 (it should be 2)
 1 resetting pluginAtoms
 1 resetting pluginContainer, usage count was 0 (it should be 1)
 1 Constructing optimized rule
 1 Checking safety of optimized rule
 1 rFS =reorderForSafety
 1 rFS safety reordering loop:
 1 rFS  src 'sub(X,Y),op(Y,Y1)'
 1 rFS  safevars ''
 1 rFS checking literal sub(X,Y)
 1 rFS  -> safe, marking all variables as safe
 1 rFS  -> transferring
 1 rFS checking literal op(Y,Y1)
 1 rFS  -> safe, marking all variables as safe
 1 rFS  -> transferring
 1 rFS transferSafeLiteralsAndNewlySafeVariables returning with reordered=0 and nottransferred=0
 1 rFS  -> src ''
 1 rFS  -> tgt 'sub(X,Y),op(Y,Y1)'
 1 rFS  -> newsafevars 'X,Y,Y1'
 1 Checking variables of optimized rule
 1 Optimized rule is safe
 1 resetting custom model generator provider
 1 resetting state
 1 resetting callbacks
 1 resetting modelBuilder
 1 resetting parser
 1 resetting evalgraph
 1 resetting compgraph
 1 resetting depgraph
 1 resetting edbList
 1 resetting inputProvider
 1 resetting aspsoftware
 1 resetting pluginData
 1 resetting pluginEnvironment
 1 resetting registry, usage count was 266 (it should be 2)
 1 resetting pluginAtoms
 1 resetting pluginContainer, usage count was 0 (it should be 1)
 1 Constructing optimized rule
 1 Checking safety of optimized rule
 1 rFS =reorderForSafety
 1 rFS safety reordering loop:
 1 rFS  src 'conf(X,Y1),sub(Y2,Y1)'
 1 rFS  safevars ''
 1 rFS checking literal conf(X,Y1)
 1 rFS  -> safe, marking all variables as safe
 1 rFS  -> transferring
 1 rFS checking literal sub(Y2,Y1)
 1 rFS  -> safe, marking all variables as safe
 1 rFS  -> transferring
 1 rFS transferSafeLiteralsAndNewlySafeVariables returning with reordered=0 and nottransferred=0
 1 rFS  -> src ''
 1 rFS  -> tgt 'conf(X,Y1),sub(Y2,Y1)'
 1 rFS  -> newsafevars 'X,Y2,Y1'
 1 Checking variables of optimized rule
 1 Optimized rule is safe
 1 resetting custom model generator provider
 1 resetting state
 1 resetting callbacks
 1 resetting modelBuilder
 1 resetting parser
 1 resetting evalgraph
 1 resetting compgraph
 1 resetting depgraph
 1 resetting edbList
 1 resetting inputProvider
 1 resetting aspsoftware
 1 resetting pluginData
 1 resetting pluginEnvironment
 1 resetting registry, usage count was 266 (it should be 2)
 1 resetting pluginAtoms
 1 resetting pluginContainer, usage count was 0 (it should be 1)
 1 Constructing optimized rule
 1 Checking safety of optimized rule
 1 rFS =reorderForSafety
 1 rFS safety reordering loop:
 1 rFS  src 'conf(X,Y),inv(X,Y)'
 1 rFS  safevars ''
 1 rFS checking literal conf(X,Y)
 1 rFS  -> safe, marking all variables as safe
 1 rFS  -> transferring
 1 rFS checking literal inv(X,Y)
 1 rFS  -> safe, marking all variables as safe
 1 rFS  -> transferring
 1 rFS transferSafeLiteralsAndNewlySafeVariables returning with reordered=0 and nottransferred=0
 1 rFS  -> src ''
 1 rFS  -> tgt 'conf(X,Y),inv(X,Y)'
 1 rFS  -> newsafevars 'X,Y'
 1 Checking variables of optimized rule
 1 Optimized rule is safe
 1 resetting custom model generator provider
 1 resetting state
 1 resetting callbacks
 1 resetting modelBuilder
 1 resetting parser
 1 resetting evalgraph
 1 resetting compgraph
 1 resetting depgraph
 1 resetting edbList
 1 resetting inputProvider
 1 resetting aspsoftware
 1 resetting pluginData
 1 resetting pluginEnvironment
 1 resetting registry, usage count was 266 (it should be 2)
 1 resetting pluginAtoms
 1 resetting pluginContainer, usage count was 0 (it should be 1)
 1 Constructing optimized rule
 1 Checking safety of optimized rule
 1 rFS =reorderForSafety
 1 rFS safety reordering loop:
 1 rFS  src 'op(X,Y)'
 1 rFS  safevars ''
 1 rFS checking literal op(X,Y)
 1 rFS  -> safe, marking all variables as safe
 1 rFS  -> transferring
 1 rFS transferSafeLiteralsAndNewlySafeVariables returning with reordered=0 and nottransferred=0
 1 rFS  -> src ''
 1 rFS  -> tgt 'op(X,Y)'
 1 rFS  -> newsafevars 'X,Y'
 1 Checking variables of optimized rule
 1 Optimized rule is safe
 1 resetting custom model generator provider
 1 resetting state
 1 resetting callbacks
 1 resetting modelBuilder
 1 resetting parser
 1 resetting evalgraph
 1 resetting compgraph
 1 resetting depgraph
 1 resetting edbList
 1 resetting inputProvider
 1 resetting aspsoftware
 1 resetting pluginData
 1 resetting pluginEnvironment
 1 resetting registry, usage count was 266 (it should be 2)
 1 resetting pluginAtoms
 1 resetting pluginContainer, usage count was 0 (it should be 1)
 1 Constructing optimized rule
 1 Checking safety of optimized rule
 1 rFS =reorderForSafety
 1 rFS safety reordering loop:
 1 rFS  src 'inv(X,Y)'
 1 rFS  safevars ''
 1 rFS checking literal inv(X,Y)
 1 rFS  -> safe, marking all variables as safe
 1 rFS  -> transferring
 1 rFS transferSafeLiteralsAndNewlySafeVariables returning with reordered=0 and nottransferred=0
 1 rFS  -> src ''
 1 rFS  -> tgt 'inv(X,Y)'
 1 rFS  -> newsafevars 'X,Y'
 1 Checking variables of optimized rule
 1 Optimized rule is safe
 1 resetting custom model generator provider
 1 resetting state
 1 resetting callbacks
 1 resetting modelBuilder
 1 resetting parser
 1 resetting evalgraph
 1 resetting compgraph
 1 resetting depgraph
 1 resetting edbList
 1 resetting inputProvider
 1 resetting aspsoftware
 1 resetting pluginData
 1 resetting pluginEnvironment
 1 resetting registry, usage count was 266 (it should be 2)
 1 resetting pluginAtoms
 1 resetting pluginContainer, usage count was 0 (it should be 1)
 1 Domain Expansion Safety: 1 (9 out of 9 attributes are safe)
 1 =createNodesAndIntraRuleDependencies
 1 cNaIRDfR/0xb ENTRY
 1 cNaIRDfR/0xb =createNodesAndIntraRuleDependenciesForRule for rule ID(0x30000000,  11 rule regular) sub(X,Z) :- sub(X,Y), sub(Y,Z).
 1 cNaIRDfR/0xb creating node for ID ID(0x30000000,  11 rule regular)
 1 cNaIRDfR/0xb adding head item ID(0x01000000,  10 atom ordinary_nonground)
 1 cNaIRDfR/0xb adding body literal ID(0x21000000,   9 literal ordinary_nonground)
 1 cNaIRDfR/0xb adding body literal ID(0x21000000,  11 literal ordinary_nonground)
 1 cNaIRDfR/0xb EXIT
 1 cNaIRDfR/0xc ENTRY
 1 cNaIRDfR/0xc =createNodesAndIntraRuleDependenciesForRule for rule ID(0x30000000,  12 rule regular) sub(Y2,X2) :- op(X,X2), op(Y,Y2), sub(X,Y).
 1 cNaIRDfR/0xc creating node for ID ID(0x30000000,  12 rule regular)
 1 cNaIRDfR/0xc adding head item ID(0x01000000,  14 atom ordinary_nonground)
 1 cNaIRDfR/0xc adding body literal ID(0x21000000,  12 literal ordinary_nonground)
 1 cNaIRDfR/0xc adding body literal ID(0x21000000,  13 literal ordinary_nonground)
 1 cNaIRDfR/0xc adding body literal ID(0x21000000,   9 literal ordinary_nonground)
 1 cNaIRDfR/0xc EXIT
 1 cNaIRDfR/0xd ENTRY
 1 cNaIRDfR/0xd =createNodesAndIntraRuleDependenciesForRule for rule ID(0x30000000,  13 rule regular) conf(X,Y1) :- sub(X,Y), op(Y,Y1).
 1 cNaIRDfR/0xd creating node for ID ID(0x30000000,  13 rule regular)
 1 cNaIRDfR/0xd adding head item ID(0x01000000,  17 atom ordinary_nonground)
 1 cNaIRDfR/0xd adding body literal ID(0x21000000,   9 literal ordinary_nonground)
 1 cNaIRDfR/0xd adding body literal ID(0x21000000,  25 literal ordinary_nonground)
 1 cNaIRDfR/0xd EXIT
 1 cNaIRDfR/0xe ENTRY
 1 cNaIRDfR/0xe =createNodesAndIntraRuleDependenciesForRule for rule ID(0x30000000,  14 rule regular) conf(X,Y2) :- conf(X,Y1), sub(Y2,Y1).
 1 cNaIRDfR/0xe creating node for ID ID(0x30000000,  14 rule regular)
 1 cNaIRDfR/0xe adding head item ID(0x01000000,  18 atom ordinary_nonground)
 1 cNaIRDfR/0xe adding body literal ID(0x21000000,  17 literal ordinary_nonground)
 1 cNaIRDfR/0xe adding body literal ID(0x21000000,  15 literal ordinary_nonground)
 1 cNaIRDfR/0xe EXIT
 1 cNaIRDfR/0x11 ENTRY
 1 cNaIRDfR/0x11 =createNodesAndIntraRuleDependenciesForRule for rule ID(0x30000000,  17 rule regular) confref(X) :- conf(X,Y), inv(X,Y).
 1 cNaIRDfR/0x11 creating node for ID ID(0x30000000,  17 rule regular)
 1 cNaIRDfR/0x11 adding head item ID(0x01000000,  24 atom ordinary_nonground)
 1 cNaIRDfR/0x11 adding body literal ID(0x21000000,  16 literal ordinary_nonground)
 1 cNaIRDfR/0x11 adding body literal ID(0x21000000,  21 literal ordinary_nonground)
 1 cNaIRDfR/0x11 EXIT
 1 cNaIRDfR/0xf ENTRY
 1 cNaIRDfR/0xf =createNodesAndIntraRuleDependenciesForRule for rule ID(0x30000000,  15 rule regular) op(Y,X) :- op(X,Y).
 1 cNaIRDfR/0xf creating node for ID ID(0x30000000,  15 rule regular)
 1 cNaIRDfR/0xf adding head item ID(0x01000000,  20 atom ordinary_nonground)
 1 cNaIRDfR/0xf adding body literal ID(0x21000000,  19 literal ordinary_nonground)
 1 cNaIRDfR/0xf EXIT
 1 cNaIRDfR/0x10 ENTRY
 1 cNaIRDfR/0x10 =createNodesAndIntraRuleDependenciesForRule for rule ID(0x30000000,  16 rule regular) inv(Y,X) :- inv(X,Y).
 1 cNaIRDfR/0x10 creating node for ID ID(0x30000000,  16 rule regular)
 1 cNaIRDfR/0x10 adding head item ID(0x01000000,  23 atom ordinary_nonground)
 1 cNaIRDfR/0x10 adding body literal ID(0x21000000,  21 literal ordinary_nonground)
 1 cNaIRDfR/0x10 EXIT
 1 =createExternalPredicateInputDependencies
 1 =createHeadHeadUnifyingDependencies
 1 it1:ID(0x01000000,  23 atom ordinary_nonground) = OrdinaryAtom(1000000,'inv(Y,X)',[ID(0x10000000,  22 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)])
 1 it1:ID(0x01000000,  23 atom ordinary_nonground) adding unifying head-head dependency for OrdinaryAtom(1000000,'inv(Y,X)',[ID(0x10000000,  22 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]) in head of disjunctive rules [] and in head of nondisjunctive rules [6]
 1 it1:ID(0x01000000,  23 atom ordinary_nonground) it2:ID(0x01000000,  20 atom ordinary_nonground)
 1 it1:ID(0x01000000,  23 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'op(Y,X)',[ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)])
 1 it1:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith ENTRY
 1 it1:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  22 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]
 1 it1:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]
 1 it1:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  22 term constant) vs ID(0x10000000,  19 term constant)
 1 it1:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith EXIT
 1 it1:ID(0x01000000,  23 atom ordinary_nonground) it2:ID(0x01000000,  24 atom ordinary_nonground)
 1 it1:ID(0x01000000,  23 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'confref(X)',[ID(0x10000000,  23 term constant),ID(0x12000000,  24 term variable)])
 1 it1:ID(0x01000000,  23 atom ordinary_nonground) it2:ID(0x01000000,  18 atom ordinary_nonground)
 1 it1:ID(0x01000000,  23 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'conf(X,Y2)',[ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  48 term variable)])
 1 it1:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith ENTRY
 1 it1:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  22 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]
 1 it1:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  48 term variable)]
 1 it1:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  22 term constant) vs ID(0x10000000,  20 term constant)
 1 it1:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith EXIT
 1 it1:ID(0x01000000,  23 atom ordinary_nonground) it2:ID(0x01000000,  17 atom ordinary_nonground)
 1 it1:ID(0x01000000,  23 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'conf(X,Y1)',[ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)])
 1 it1:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith ENTRY
 1 it1:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  22 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]
 1 it1:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)]
 1 it1:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  22 term constant) vs ID(0x10000000,  20 term constant)
 1 it1:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith EXIT
 1 it1:ID(0x01000000,  23 atom ordinary_nonground) it2:ID(0x01000000,  14 atom ordinary_nonground)
 1 it1:ID(0x01000000,  23 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'sub(Y2,X2)',[ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  47 term variable)])
 1 it1:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith ENTRY
 1 it1:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  22 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]
 1 it1:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  47 term variable)]
 1 it1:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  22 term constant) vs ID(0x10000000,  18 term constant)
 1 it1:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith EXIT
 1 it1:ID(0x01000000,  23 atom ordinary_nonground) it2:ID(0x01000000,  10 atom ordinary_nonground)
 1 it1:ID(0x01000000,  23 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'sub(X,Z)',[ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  26 term variable)])
 1 it1:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith ENTRY
 1 it1:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  22 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]
 1 it1:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  26 term variable)]
 1 it1:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  22 term constant) vs ID(0x10000000,  18 term constant)
 1 it1:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith EXIT
 1 it1:ID(0x01000000,  20 atom ordinary_nonground) = OrdinaryAtom(1000000,'op(Y,X)',[ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)])
 1 it1:ID(0x01000000,  20 atom ordinary_nonground) adding unifying head-head dependency for OrdinaryAtom(1000000,'op(Y,X)',[ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]) in head of disjunctive rules [] and in head of nondisjunctive rules [5]
 1 it1:ID(0x01000000,  20 atom ordinary_nonground) it2:ID(0x01000000,  24 atom ordinary_nonground)
 1 it1:ID(0x01000000,  20 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'confref(X)',[ID(0x10000000,  23 term constant),ID(0x12000000,  24 term variable)])
 1 it1:ID(0x01000000,  20 atom ordinary_nonground) it2:ID(0x01000000,  18 atom ordinary_nonground)
 1 it1:ID(0x01000000,  20 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'conf(X,Y2)',[ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  48 term variable)])
 1 it1:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith ENTRY
 1 it1:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]
 1 it1:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  48 term variable)]
 1 it1:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  19 term constant) vs ID(0x10000000,  20 term constant)
 1 it1:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith EXIT
 1 it1:ID(0x01000000,  20 atom ordinary_nonground) it2:ID(0x01000000,  17 atom ordinary_nonground)
 1 it1:ID(0x01000000,  20 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'conf(X,Y1)',[ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)])
 1 it1:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith ENTRY
 1 it1:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]
 1 it1:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)]
 1 it1:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  19 term constant) vs ID(0x10000000,  20 term constant)
 1 it1:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith EXIT
 1 it1:ID(0x01000000,  20 atom ordinary_nonground) it2:ID(0x01000000,  14 atom ordinary_nonground)
 1 it1:ID(0x01000000,  20 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'sub(Y2,X2)',[ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  47 term variable)])
 1 it1:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith ENTRY
 1 it1:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]
 1 it1:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  47 term variable)]
 1 it1:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  19 term constant) vs ID(0x10000000,  18 term constant)
 1 it1:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith EXIT
 1 it1:ID(0x01000000,  20 atom ordinary_nonground) it2:ID(0x01000000,  10 atom ordinary_nonground)
 1 it1:ID(0x01000000,  20 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'sub(X,Z)',[ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  26 term variable)])
 1 it1:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith ENTRY
 1 it1:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]
 1 it1:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  26 term variable)]
 1 it1:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  19 term constant) vs ID(0x10000000,  18 term constant)
 1 it1:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith EXIT
 1 it1:ID(0x01000000,  24 atom ordinary_nonground) = OrdinaryAtom(1000000,'confref(X)',[ID(0x10000000,  23 term constant),ID(0x12000000,  24 term variable)])
 1 it1:ID(0x01000000,  24 atom ordinary_nonground) adding unifying head-head dependency for OrdinaryAtom(1000000,'confref(X)',[ID(0x10000000,  23 term constant),ID(0x12000000,  24 term variable)]) in head of disjunctive rules [] and in head of nondisjunctive rules [4]
 1 it1:ID(0x01000000,  24 atom ordinary_nonground) it2:ID(0x01000000,  18 atom ordinary_nonground)
 1 it1:ID(0x01000000,  24 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'conf(X,Y2)',[ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  48 term variable)])
 1 it1:ID(0x01000000,  24 atom ordinary_nonground) it2:ID(0x01000000,  17 atom ordinary_nonground)
 1 it1:ID(0x01000000,  24 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'conf(X,Y1)',[ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)])
 1 it1:ID(0x01000000,  24 atom ordinary_nonground) it2:ID(0x01000000,  14 atom ordinary_nonground)
 1 it1:ID(0x01000000,  24 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'sub(Y2,X2)',[ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  47 term variable)])
 1 it1:ID(0x01000000,  24 atom ordinary_nonground) it2:ID(0x01000000,  10 atom ordinary_nonground)
 1 it1:ID(0x01000000,  24 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'sub(X,Z)',[ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  26 term variable)])
 1 it1:ID(0x01000000,  18 atom ordinary_nonground) = OrdinaryAtom(1000000,'conf(X,Y2)',[ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  48 term variable)])
 1 it1:ID(0x01000000,  18 atom ordinary_nonground) adding unifying head-head dependency for OrdinaryAtom(1000000,'conf(X,Y2)',[ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  48 term variable)]) in head of disjunctive rules [] and in head of nondisjunctive rules [3]
 1 it1:ID(0x01000000,  18 atom ordinary_nonground) it2:ID(0x01000000,  17 atom ordinary_nonground)
 1 it1:ID(0x01000000,  18 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'conf(X,Y1)',[ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)])
 1 it1:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith ENTRY
 1 it1:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  48 term variable)]
 1 it1:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)]
 1 it1:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  20 term constant) vs ID(0x10000000,  20 term constant)
 1 it1:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith at position 1: checking ID(0x12000000,  24 term variable) vs ID(0x12000000,  24 term variable)
 1 it1:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith at position 2: checking ID(0x12000000,  48 term variable) vs ID(0x12000000,  49 term variable)
 1 it1:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith after propagation of difference (look only after current position!):
 1 it1:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith result1 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  48 term variable)]
 1 it1:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith result2 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)]
 1 it1:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith EXIT
 1 it1:ID(0x01000000,  18 atom ordinary_nonground) adding unifying head-head dependency between OrdinaryAtom(1000000,'conf(X,Y2)',[ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  48 term variable)]) in head of disjunctive rules [] and in head of nondisjunctive rules [3] and OrdinaryAtom(1000000,'conf(X,Y1)',[ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)]) in head of disjunctive rules [] and in head of nondisjunctive rules [2]
 1 it1:ID(0x01000000,  18 atom ordinary_nonground) it2:ID(0x01000000,  14 atom ordinary_nonground)
 1 it1:ID(0x01000000,  18 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'sub(Y2,X2)',[ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  47 term variable)])
 1 it1:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith ENTRY
 1 it1:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  48 term variable)]
 1 it1:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  47 term variable)]
 1 it1:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  20 term constant) vs ID(0x10000000,  18 term constant)
 1 it1:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith EXIT
 1 it1:ID(0x01000000,  18 atom ordinary_nonground) it2:ID(0x01000000,  10 atom ordinary_nonground)
 1 it1:ID(0x01000000,  18 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'sub(X,Z)',[ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  26 term variable)])
 1 it1:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith ENTRY
 1 it1:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  48 term variable)]
 1 it1:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  26 term variable)]
 1 it1:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  20 term constant) vs ID(0x10000000,  18 term constant)
 1 it1:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith EXIT
 1 it1:ID(0x01000000,  17 atom ordinary_nonground) = OrdinaryAtom(1000000,'conf(X,Y1)',[ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)])
 1 it1:ID(0x01000000,  17 atom ordinary_nonground) adding unifying head-head dependency for OrdinaryAtom(1000000,'conf(X,Y1)',[ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)]) in head of disjunctive rules [] and in head of nondisjunctive rules [2]
 1 it1:ID(0x01000000,  17 atom ordinary_nonground) it2:ID(0x01000000,  14 atom ordinary_nonground)
 1 it1:ID(0x01000000,  17 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'sub(Y2,X2)',[ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  47 term variable)])
 1 it1:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith ENTRY
 1 it1:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)]
 1 it1:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  47 term variable)]
 1 it1:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  20 term constant) vs ID(0x10000000,  18 term constant)
 1 it1:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith EXIT
 1 it1:ID(0x01000000,  17 atom ordinary_nonground) it2:ID(0x01000000,  10 atom ordinary_nonground)
 1 it1:ID(0x01000000,  17 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'sub(X,Z)',[ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  26 term variable)])
 1 it1:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith ENTRY
 1 it1:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)]
 1 it1:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  26 term variable)]
 1 it1:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  20 term constant) vs ID(0x10000000,  18 term constant)
 1 it1:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith EXIT
 1 it1:ID(0x01000000,  14 atom ordinary_nonground) = OrdinaryAtom(1000000,'sub(Y2,X2)',[ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  47 term variable)])
 1 it1:ID(0x01000000,  14 atom ordinary_nonground) adding unifying head-head dependency for OrdinaryAtom(1000000,'sub(Y2,X2)',[ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  47 term variable)]) in head of disjunctive rules [] and in head of nondisjunctive rules [1]
 1 it1:ID(0x01000000,  14 atom ordinary_nonground) it2:ID(0x01000000,  10 atom ordinary_nonground)
 1 it1:ID(0x01000000,  14 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'sub(X,Z)',[ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  26 term variable)])
 1 it1:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith ENTRY
 1 it1:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  47 term variable)]
 1 it1:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  26 term variable)]
 1 it1:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  18 term constant) vs ID(0x10000000,  18 term constant)
 1 it1:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith at position 1: checking ID(0x12000000,  48 term variable) vs ID(0x12000000,  24 term variable)
 1 it1:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith after propagation of difference (look only after current position!):
 1 it1:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith result1 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  47 term variable)]
 1 it1:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith result2 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  26 term variable)]
 1 it1:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith at position 2: checking ID(0x12000000,  47 term variable) vs ID(0x12000000,  26 term variable)
 1 it1:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith after propagation of difference (look only after current position!):
 1 it1:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith result1 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  47 term variable)]
 1 it1:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith result2 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  26 term variable)]
 1 it1:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith EXIT
 1 it1:ID(0x01000000,  14 atom ordinary_nonground) adding unifying head-head dependency between OrdinaryAtom(1000000,'sub(Y2,X2)',[ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  47 term variable)]) in head of disjunctive rules [] and in head of nondisjunctive rules [1] and OrdinaryAtom(1000000,'sub(X,Z)',[ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  26 term variable)]) in head of disjunctive rules [] and in head of nondisjunctive rules [0]
 1 it1:ID(0x01000000,  10 atom ordinary_nonground) = OrdinaryAtom(1000000,'sub(X,Z)',[ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  26 term variable)])
 1 it1:ID(0x01000000,  10 atom ordinary_nonground) adding unifying head-head dependency for OrdinaryAtom(1000000,'sub(X,Z)',[ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  26 term variable)]) in head of disjunctive rules [] and in head of nondisjunctive rules [0]
 1 =createHeadBodyUnifyingDependencies
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) = OrdinaryAtom(1000000,'inv(Y,X)',[ID(0x10000000,  22 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)])
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) itb:ID(0x01000000,  19 atom ordinary_nonground)
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'op(X,Y)',[ID(0x10000000,  19 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)])
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  22 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  22 term constant) vs ID(0x10000000,  19 term constant)
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) itb:ID(0x01000000,  21 atom ordinary_nonground)
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'inv(X,Y)',[ID(0x10000000,  22 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)])
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  22 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  22 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  22 term constant) vs ID(0x10000000,  22 term constant)
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith at position 1: checking ID(0x12000000,  25 term variable) vs ID(0x12000000,  24 term variable)
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith after propagation of difference (look only after current position!):
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith result1 tuple [ID(0x10000000,  22 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith result2 tuple [ID(0x10000000,  22 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith at position 2: checking ID(0x12000000,  24 term variable) vs ID(0x12000000,  25 term variable)
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith after propagation of difference (look only after current position!):
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith result1 tuple [ID(0x10000000,  22 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith result2 tuple [ID(0x10000000,  22 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) adding head-body dependency between OrdinaryAtom(1000000,'inv(Y,X)',[ID(0x10000000,  22 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]) in head of rules <6> and OrdinaryAtom(1000000,'inv(X,Y)',[ID(0x10000000,  22 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]) in posR/posC/neg bodies [4,6]/[]/[]
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) itb:ID(0x01000000,  16 atom ordinary_nonground)
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'conf(X,Y)',[ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)])
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  22 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  22 term constant) vs ID(0x10000000,  20 term constant)
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) itb:ID(0x01000000,  15 atom ordinary_nonground)
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'sub(Y2,Y1)',[ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  49 term variable)])
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  22 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  49 term variable)]
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  22 term constant) vs ID(0x10000000,  18 term constant)
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) itb:ID(0x01000000,  17 atom ordinary_nonground)
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'conf(X,Y1)',[ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)])
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  22 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)]
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  22 term constant) vs ID(0x10000000,  20 term constant)
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) itb:ID(0x01000000,  25 atom ordinary_nonground)
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'op(Y,Y1)',[ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  49 term variable)])
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  22 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  49 term variable)]
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  22 term constant) vs ID(0x10000000,  19 term constant)
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) itb:ID(0x01000000,  13 atom ordinary_nonground)
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'op(Y,Y2)',[ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  48 term variable)])
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  22 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  48 term variable)]
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  22 term constant) vs ID(0x10000000,  19 term constant)
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) itb:ID(0x01000000,  12 atom ordinary_nonground)
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'op(X,X2)',[ID(0x10000000,  19 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  47 term variable)])
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  22 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  47 term variable)]
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  22 term constant) vs ID(0x10000000,  19 term constant)
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) itb:ID(0x01000000,  11 atom ordinary_nonground)
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'sub(Y,Z)',[ID(0x10000000,  18 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  26 term variable)])
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  22 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  26 term variable)]
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  22 term constant) vs ID(0x10000000,  18 term constant)
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) itb:ID(0x01000000,   9 atom ordinary_nonground)
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'sub(X,Y)',[ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)])
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  22 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  22 term constant) vs ID(0x10000000,  18 term constant)
 1 ith:ID(0x01000000,  23 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) = OrdinaryAtom(1000000,'op(Y,X)',[ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)])
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) itb:ID(0x01000000,  19 atom ordinary_nonground)
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'op(X,Y)',[ID(0x10000000,  19 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)])
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  19 term constant) vs ID(0x10000000,  19 term constant)
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith at position 1: checking ID(0x12000000,  25 term variable) vs ID(0x12000000,  24 term variable)
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith after propagation of difference (look only after current position!):
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith result1 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith result2 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith at position 2: checking ID(0x12000000,  24 term variable) vs ID(0x12000000,  25 term variable)
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith after propagation of difference (look only after current position!):
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith result1 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith result2 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) adding head-body dependency between OrdinaryAtom(1000000,'op(Y,X)',[ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]) in head of rules <5> and OrdinaryAtom(1000000,'op(X,Y)',[ID(0x10000000,  19 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]) in posR/posC/neg bodies [5]/[]/[]
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) itb:ID(0x01000000,  21 atom ordinary_nonground)
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'inv(X,Y)',[ID(0x10000000,  22 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)])
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  22 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  19 term constant) vs ID(0x10000000,  22 term constant)
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) itb:ID(0x01000000,  16 atom ordinary_nonground)
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'conf(X,Y)',[ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)])
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  19 term constant) vs ID(0x10000000,  20 term constant)
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) itb:ID(0x01000000,  15 atom ordinary_nonground)
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'sub(Y2,Y1)',[ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  49 term variable)])
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  49 term variable)]
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  19 term constant) vs ID(0x10000000,  18 term constant)
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) itb:ID(0x01000000,  17 atom ordinary_nonground)
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'conf(X,Y1)',[ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)])
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)]
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  19 term constant) vs ID(0x10000000,  20 term constant)
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) itb:ID(0x01000000,  25 atom ordinary_nonground)
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'op(Y,Y1)',[ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  49 term variable)])
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  49 term variable)]
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  19 term constant) vs ID(0x10000000,  19 term constant)
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith at position 1: checking ID(0x12000000,  25 term variable) vs ID(0x12000000,  25 term variable)
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith at position 2: checking ID(0x12000000,  24 term variable) vs ID(0x12000000,  49 term variable)
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith after propagation of difference (look only after current position!):
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith result1 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith result2 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  49 term variable)]
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) adding head-body dependency between OrdinaryAtom(1000000,'op(Y,X)',[ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]) in head of rules <5> and OrdinaryAtom(1000000,'op(Y,Y1)',[ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  49 term variable)]) in posR/posC/neg bodies [2]/[]/[]
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) itb:ID(0x01000000,  13 atom ordinary_nonground)
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'op(Y,Y2)',[ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  48 term variable)])
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  48 term variable)]
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  19 term constant) vs ID(0x10000000,  19 term constant)
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith at position 1: checking ID(0x12000000,  25 term variable) vs ID(0x12000000,  25 term variable)
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith at position 2: checking ID(0x12000000,  24 term variable) vs ID(0x12000000,  48 term variable)
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith after propagation of difference (look only after current position!):
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith result1 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith result2 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  48 term variable)]
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) adding head-body dependency between OrdinaryAtom(1000000,'op(Y,X)',[ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]) in head of rules <5> and OrdinaryAtom(1000000,'op(Y,Y2)',[ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  48 term variable)]) in posR/posC/neg bodies [1]/[]/[]
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) itb:ID(0x01000000,  12 atom ordinary_nonground)
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'op(X,X2)',[ID(0x10000000,  19 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  47 term variable)])
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  47 term variable)]
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  19 term constant) vs ID(0x10000000,  19 term constant)
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith at position 1: checking ID(0x12000000,  25 term variable) vs ID(0x12000000,  24 term variable)
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith after propagation of difference (look only after current position!):
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith result1 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith result2 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  47 term variable)]
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith at position 2: checking ID(0x12000000,  24 term variable) vs ID(0x12000000,  47 term variable)
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith after propagation of difference (look only after current position!):
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith result1 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith result2 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  47 term variable)]
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) adding head-body dependency between OrdinaryAtom(1000000,'op(Y,X)',[ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]) in head of rules <5> and OrdinaryAtom(1000000,'op(X,X2)',[ID(0x10000000,  19 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  47 term variable)]) in posR/posC/neg bodies [1]/[]/[]
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) itb:ID(0x01000000,  11 atom ordinary_nonground)
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'sub(Y,Z)',[ID(0x10000000,  18 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  26 term variable)])
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  26 term variable)]
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  19 term constant) vs ID(0x10000000,  18 term constant)
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) itb:ID(0x01000000,   9 atom ordinary_nonground)
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'sub(X,Y)',[ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)])
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  24 term variable)]
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  19 term constant) vs ID(0x10000000,  18 term constant)
 1 ith:ID(0x01000000,  20 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  24 atom ordinary_nonground) = OrdinaryAtom(1000000,'confref(X)',[ID(0x10000000,  23 term constant),ID(0x12000000,  24 term variable)])
 1 ith:ID(0x01000000,  24 atom ordinary_nonground) itb:ID(0x01000000,  19 atom ordinary_nonground)
 1 ith:ID(0x01000000,  24 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'op(X,Y)',[ID(0x10000000,  19 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)])
 1 ith:ID(0x01000000,  24 atom ordinary_nonground) itb:ID(0x01000000,  21 atom ordinary_nonground)
 1 ith:ID(0x01000000,  24 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'inv(X,Y)',[ID(0x10000000,  22 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)])
 1 ith:ID(0x01000000,  24 atom ordinary_nonground) itb:ID(0x01000000,  16 atom ordinary_nonground)
 1 ith:ID(0x01000000,  24 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'conf(X,Y)',[ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)])
 1 ith:ID(0x01000000,  24 atom ordinary_nonground) itb:ID(0x01000000,  15 atom ordinary_nonground)
 1 ith:ID(0x01000000,  24 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'sub(Y2,Y1)',[ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  49 term variable)])
 1 ith:ID(0x01000000,  24 atom ordinary_nonground) itb:ID(0x01000000,  17 atom ordinary_nonground)
 1 ith:ID(0x01000000,  24 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'conf(X,Y1)',[ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)])
 1 ith:ID(0x01000000,  24 atom ordinary_nonground) itb:ID(0x01000000,  25 atom ordinary_nonground)
 1 ith:ID(0x01000000,  24 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'op(Y,Y1)',[ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  49 term variable)])
 1 ith:ID(0x01000000,  24 atom ordinary_nonground) itb:ID(0x01000000,  13 atom ordinary_nonground)
 1 ith:ID(0x01000000,  24 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'op(Y,Y2)',[ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  48 term variable)])
 1 ith:ID(0x01000000,  24 atom ordinary_nonground) itb:ID(0x01000000,  12 atom ordinary_nonground)
 1 ith:ID(0x01000000,  24 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'op(X,X2)',[ID(0x10000000,  19 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  47 term variable)])
 1 ith:ID(0x01000000,  24 atom ordinary_nonground) itb:ID(0x01000000,  11 atom ordinary_nonground)
 1 ith:ID(0x01000000,  24 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'sub(Y,Z)',[ID(0x10000000,  18 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  26 term variable)])
 1 ith:ID(0x01000000,  24 atom ordinary_nonground) itb:ID(0x01000000,   9 atom ordinary_nonground)
 1 ith:ID(0x01000000,  24 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'sub(X,Y)',[ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)])
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) = OrdinaryAtom(1000000,'conf(X,Y2)',[ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  48 term variable)])
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) itb:ID(0x01000000,  19 atom ordinary_nonground)
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'op(X,Y)',[ID(0x10000000,  19 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)])
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  48 term variable)]
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  20 term constant) vs ID(0x10000000,  19 term constant)
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) itb:ID(0x01000000,  21 atom ordinary_nonground)
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'inv(X,Y)',[ID(0x10000000,  22 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)])
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  48 term variable)]
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  22 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  20 term constant) vs ID(0x10000000,  22 term constant)
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) itb:ID(0x01000000,  16 atom ordinary_nonground)
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'conf(X,Y)',[ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)])
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  48 term variable)]
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  20 term constant) vs ID(0x10000000,  20 term constant)
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith at position 1: checking ID(0x12000000,  24 term variable) vs ID(0x12000000,  24 term variable)
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith at position 2: checking ID(0x12000000,  48 term variable) vs ID(0x12000000,  25 term variable)
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith after propagation of difference (look only after current position!):
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith result1 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  48 term variable)]
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith result2 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) adding head-body dependency between OrdinaryAtom(1000000,'conf(X,Y2)',[ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  48 term variable)]) in head of rules <3> and OrdinaryAtom(1000000,'conf(X,Y)',[ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]) in posR/posC/neg bodies [4]/[]/[]
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) itb:ID(0x01000000,  15 atom ordinary_nonground)
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'sub(Y2,Y1)',[ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  49 term variable)])
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  48 term variable)]
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  49 term variable)]
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  20 term constant) vs ID(0x10000000,  18 term constant)
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) itb:ID(0x01000000,  17 atom ordinary_nonground)
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'conf(X,Y1)',[ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)])
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  48 term variable)]
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)]
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  20 term constant) vs ID(0x10000000,  20 term constant)
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith at position 1: checking ID(0x12000000,  24 term variable) vs ID(0x12000000,  24 term variable)
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith at position 2: checking ID(0x12000000,  48 term variable) vs ID(0x12000000,  49 term variable)
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith after propagation of difference (look only after current position!):
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith result1 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  48 term variable)]
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith result2 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)]
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) adding head-body dependency between OrdinaryAtom(1000000,'conf(X,Y2)',[ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  48 term variable)]) in head of rules <3> and OrdinaryAtom(1000000,'conf(X,Y1)',[ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)]) in posR/posC/neg bodies [3]/[]/[]
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) itb:ID(0x01000000,  25 atom ordinary_nonground)
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'op(Y,Y1)',[ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  49 term variable)])
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  48 term variable)]
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  49 term variable)]
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  20 term constant) vs ID(0x10000000,  19 term constant)
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) itb:ID(0x01000000,  13 atom ordinary_nonground)
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'op(Y,Y2)',[ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  48 term variable)])
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  48 term variable)]
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  48 term variable)]
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  20 term constant) vs ID(0x10000000,  19 term constant)
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) itb:ID(0x01000000,  12 atom ordinary_nonground)
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'op(X,X2)',[ID(0x10000000,  19 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  47 term variable)])
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  48 term variable)]
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  47 term variable)]
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  20 term constant) vs ID(0x10000000,  19 term constant)
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) itb:ID(0x01000000,  11 atom ordinary_nonground)
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'sub(Y,Z)',[ID(0x10000000,  18 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  26 term variable)])
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  48 term variable)]
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  26 term variable)]
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  20 term constant) vs ID(0x10000000,  18 term constant)
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) itb:ID(0x01000000,   9 atom ordinary_nonground)
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'sub(X,Y)',[ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)])
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  48 term variable)]
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  20 term constant) vs ID(0x10000000,  18 term constant)
 1 ith:ID(0x01000000,  18 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) = OrdinaryAtom(1000000,'conf(X,Y1)',[ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)])
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) itb:ID(0x01000000,  19 atom ordinary_nonground)
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'op(X,Y)',[ID(0x10000000,  19 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)])
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)]
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  20 term constant) vs ID(0x10000000,  19 term constant)
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) itb:ID(0x01000000,  21 atom ordinary_nonground)
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'inv(X,Y)',[ID(0x10000000,  22 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)])
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)]
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  22 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  20 term constant) vs ID(0x10000000,  22 term constant)
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) itb:ID(0x01000000,  16 atom ordinary_nonground)
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'conf(X,Y)',[ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)])
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)]
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  20 term constant) vs ID(0x10000000,  20 term constant)
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith at position 1: checking ID(0x12000000,  24 term variable) vs ID(0x12000000,  24 term variable)
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith at position 2: checking ID(0x12000000,  49 term variable) vs ID(0x12000000,  25 term variable)
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith after propagation of difference (look only after current position!):
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith result1 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)]
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith result2 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) adding head-body dependency between OrdinaryAtom(1000000,'conf(X,Y1)',[ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)]) in head of rules <2> and OrdinaryAtom(1000000,'conf(X,Y)',[ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]) in posR/posC/neg bodies [4]/[]/[]
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) itb:ID(0x01000000,  15 atom ordinary_nonground)
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'sub(Y2,Y1)',[ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  49 term variable)])
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)]
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  49 term variable)]
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  20 term constant) vs ID(0x10000000,  18 term constant)
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) itb:ID(0x01000000,  17 atom ordinary_nonground)
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'conf(X,Y1)',[ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)])
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)]
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)]
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  20 term constant) vs ID(0x10000000,  20 term constant)
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith at position 1: checking ID(0x12000000,  24 term variable) vs ID(0x12000000,  24 term variable)
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith at position 2: checking ID(0x12000000,  49 term variable) vs ID(0x12000000,  49 term variable)
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) adding head-body dependency between OrdinaryAtom(1000000,'conf(X,Y1)',[ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)]) in head of rules <2> and OrdinaryAtom(1000000,'conf(X,Y1)',[ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)]) in posR/posC/neg bodies [3]/[]/[]
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) itb:ID(0x01000000,  25 atom ordinary_nonground)
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'op(Y,Y1)',[ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  49 term variable)])
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)]
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  49 term variable)]
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  20 term constant) vs ID(0x10000000,  19 term constant)
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) itb:ID(0x01000000,  13 atom ordinary_nonground)
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'op(Y,Y2)',[ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  48 term variable)])
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)]
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  48 term variable)]
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  20 term constant) vs ID(0x10000000,  19 term constant)
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) itb:ID(0x01000000,  12 atom ordinary_nonground)
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'op(X,X2)',[ID(0x10000000,  19 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  47 term variable)])
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)]
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  47 term variable)]
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  20 term constant) vs ID(0x10000000,  19 term constant)
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) itb:ID(0x01000000,  11 atom ordinary_nonground)
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'sub(Y,Z)',[ID(0x10000000,  18 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  26 term variable)])
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)]
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  26 term variable)]
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  20 term constant) vs ID(0x10000000,  18 term constant)
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) itb:ID(0x01000000,   9 atom ordinary_nonground)
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'sub(X,Y)',[ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)])
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)]
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  20 term constant) vs ID(0x10000000,  18 term constant)
 1 ith:ID(0x01000000,  17 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) = OrdinaryAtom(1000000,'sub(Y2,X2)',[ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  47 term variable)])
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) itb:ID(0x01000000,  19 atom ordinary_nonground)
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'op(X,Y)',[ID(0x10000000,  19 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)])
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  47 term variable)]
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  18 term constant) vs ID(0x10000000,  19 term constant)
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) itb:ID(0x01000000,  21 atom ordinary_nonground)
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'inv(X,Y)',[ID(0x10000000,  22 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)])
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  47 term variable)]
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  22 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  18 term constant) vs ID(0x10000000,  22 term constant)
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) itb:ID(0x01000000,  16 atom ordinary_nonground)
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'conf(X,Y)',[ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)])
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  47 term variable)]
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  18 term constant) vs ID(0x10000000,  20 term constant)
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) itb:ID(0x01000000,  15 atom ordinary_nonground)
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'sub(Y2,Y1)',[ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  49 term variable)])
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  47 term variable)]
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  49 term variable)]
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  18 term constant) vs ID(0x10000000,  18 term constant)
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith at position 1: checking ID(0x12000000,  48 term variable) vs ID(0x12000000,  48 term variable)
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith at position 2: checking ID(0x12000000,  47 term variable) vs ID(0x12000000,  49 term variable)
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith after propagation of difference (look only after current position!):
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith result1 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  47 term variable)]
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith result2 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  49 term variable)]
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) adding head-body dependency between OrdinaryAtom(1000000,'sub(Y2,X2)',[ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  47 term variable)]) in head of rules <1> and OrdinaryAtom(1000000,'sub(Y2,Y1)',[ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  49 term variable)]) in posR/posC/neg bodies [3]/[]/[]
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) itb:ID(0x01000000,  17 atom ordinary_nonground)
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'conf(X,Y1)',[ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)])
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  47 term variable)]
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)]
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  18 term constant) vs ID(0x10000000,  20 term constant)
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) itb:ID(0x01000000,  25 atom ordinary_nonground)
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'op(Y,Y1)',[ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  49 term variable)])
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  47 term variable)]
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  49 term variable)]
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  18 term constant) vs ID(0x10000000,  19 term constant)
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) itb:ID(0x01000000,  13 atom ordinary_nonground)
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'op(Y,Y2)',[ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  48 term variable)])
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  47 term variable)]
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  48 term variable)]
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  18 term constant) vs ID(0x10000000,  19 term constant)
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) itb:ID(0x01000000,  12 atom ordinary_nonground)
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'op(X,X2)',[ID(0x10000000,  19 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  47 term variable)])
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  47 term variable)]
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  47 term variable)]
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  18 term constant) vs ID(0x10000000,  19 term constant)
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) itb:ID(0x01000000,  11 atom ordinary_nonground)
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'sub(Y,Z)',[ID(0x10000000,  18 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  26 term variable)])
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  47 term variable)]
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  26 term variable)]
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  18 term constant) vs ID(0x10000000,  18 term constant)
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith at position 1: checking ID(0x12000000,  48 term variable) vs ID(0x12000000,  25 term variable)
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith after propagation of difference (look only after current position!):
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith result1 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  47 term variable)]
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith result2 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  26 term variable)]
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith at position 2: checking ID(0x12000000,  47 term variable) vs ID(0x12000000,  26 term variable)
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith after propagation of difference (look only after current position!):
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith result1 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  47 term variable)]
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith result2 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  26 term variable)]
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) adding head-body dependency between OrdinaryAtom(1000000,'sub(Y2,X2)',[ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  47 term variable)]) in head of rules <1> and OrdinaryAtom(1000000,'sub(Y,Z)',[ID(0x10000000,  18 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  26 term variable)]) in posR/posC/neg bodies [0]/[]/[]
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) itb:ID(0x01000000,   9 atom ordinary_nonground)
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'sub(X,Y)',[ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)])
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  47 term variable)]
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  18 term constant) vs ID(0x10000000,  18 term constant)
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith at position 1: checking ID(0x12000000,  48 term variable) vs ID(0x12000000,  24 term variable)
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith after propagation of difference (look only after current position!):
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith result1 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  47 term variable)]
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith result2 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith at position 2: checking ID(0x12000000,  47 term variable) vs ID(0x12000000,  25 term variable)
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith after propagation of difference (look only after current position!):
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith result1 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  47 term variable)]
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith result2 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  14 atom ordinary_nonground) adding head-body dependency between OrdinaryAtom(1000000,'sub(Y2,X2)',[ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  47 term variable)]) in head of rules <1> and OrdinaryAtom(1000000,'sub(X,Y)',[ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]) in posR/posC/neg bodies [0,1,2]/[]/[]
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) = OrdinaryAtom(1000000,'sub(X,Z)',[ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  26 term variable)])
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) itb:ID(0x01000000,  19 atom ordinary_nonground)
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'op(X,Y)',[ID(0x10000000,  19 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)])
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  26 term variable)]
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  18 term constant) vs ID(0x10000000,  19 term constant)
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) itb:ID(0x01000000,  21 atom ordinary_nonground)
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'inv(X,Y)',[ID(0x10000000,  22 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)])
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  26 term variable)]
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  22 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  18 term constant) vs ID(0x10000000,  22 term constant)
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) itb:ID(0x01000000,  16 atom ordinary_nonground)
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'conf(X,Y)',[ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)])
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  26 term variable)]
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  18 term constant) vs ID(0x10000000,  20 term constant)
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) itb:ID(0x01000000,  15 atom ordinary_nonground)
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'sub(Y2,Y1)',[ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  49 term variable)])
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  26 term variable)]
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  49 term variable)]
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  18 term constant) vs ID(0x10000000,  18 term constant)
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith at position 1: checking ID(0x12000000,  24 term variable) vs ID(0x12000000,  48 term variable)
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith after propagation of difference (look only after current position!):
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith result1 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  26 term variable)]
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith result2 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  49 term variable)]
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith at position 2: checking ID(0x12000000,  26 term variable) vs ID(0x12000000,  49 term variable)
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith after propagation of difference (look only after current position!):
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith result1 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  26 term variable)]
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith result2 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  49 term variable)]
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) adding head-body dependency between OrdinaryAtom(1000000,'sub(X,Z)',[ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  26 term variable)]) in head of rules <0> and OrdinaryAtom(1000000,'sub(Y2,Y1)',[ID(0x10000000,  18 term constant),ID(0x12000000,  48 term variable),ID(0x12000000,  49 term variable)]) in posR/posC/neg bodies [3]/[]/[]
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) itb:ID(0x01000000,  17 atom ordinary_nonground)
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'conf(X,Y1)',[ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)])
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  26 term variable)]
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  20 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  49 term variable)]
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  18 term constant) vs ID(0x10000000,  20 term constant)
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) itb:ID(0x01000000,  25 atom ordinary_nonground)
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'op(Y,Y1)',[ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  49 term variable)])
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  26 term variable)]
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  49 term variable)]
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  18 term constant) vs ID(0x10000000,  19 term constant)
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) itb:ID(0x01000000,  13 atom ordinary_nonground)
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'op(Y,Y2)',[ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  48 term variable)])
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  26 term variable)]
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  48 term variable)]
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  18 term constant) vs ID(0x10000000,  19 term constant)
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) itb:ID(0x01000000,  12 atom ordinary_nonground)
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'op(X,X2)',[ID(0x10000000,  19 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  47 term variable)])
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  26 term variable)]
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  19 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  47 term variable)]
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  18 term constant) vs ID(0x10000000,  19 term constant)
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) itb:ID(0x01000000,  11 atom ordinary_nonground)
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'sub(Y,Z)',[ID(0x10000000,  18 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  26 term variable)])
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  26 term variable)]
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  26 term variable)]
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  18 term constant) vs ID(0x10000000,  18 term constant)
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith at position 1: checking ID(0x12000000,  24 term variable) vs ID(0x12000000,  25 term variable)
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith after propagation of difference (look only after current position!):
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith result1 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  26 term variable)]
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith result2 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  26 term variable)]
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith at position 2: checking ID(0x12000000,  26 term variable) vs ID(0x12000000,  26 term variable)
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) adding head-body dependency between OrdinaryAtom(1000000,'sub(X,Z)',[ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  26 term variable)]) in head of rules <0> and OrdinaryAtom(1000000,'sub(Y,Z)',[ID(0x10000000,  18 term constant),ID(0x12000000,  25 term variable),ID(0x12000000,  26 term variable)]) in posR/posC/neg bodies [0]/[]/[]
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) itb:ID(0x01000000,   9 atom ordinary_nonground)
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) checking against OrdinaryAtom(1000000,'sub(X,Y)',[ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)])
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith ENTRY
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith starting with result1 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  26 term variable)]
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith starting with result2 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith at position 0: checking ID(0x10000000,  18 term constant) vs ID(0x10000000,  18 term constant)
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith at position 1: checking ID(0x12000000,  24 term variable) vs ID(0x12000000,  24 term variable)
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith at position 2: checking ID(0x12000000,  26 term variable) vs ID(0x12000000,  25 term variable)
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith after propagation of difference (look only after current position!):
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith result1 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  26 term variable)]
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith result2 tuple [ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) unifiesWith EXIT
 1 ith:ID(0x01000000,  10 atom ordinary_nonground) adding head-body dependency between OrdinaryAtom(1000000,'sub(X,Z)',[ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  26 term variable)]) in head of rules <0> and OrdinaryAtom(1000000,'sub(X,Y)',[ID(0x10000000,  18 term constant),ID(0x12000000,  24 term variable),ID(0x12000000,  25 term variable)]) in posR/posC/neg bodies [0,1,2]/[]/[]
 1 Building component graph
 1 created component node 0x1cb1d30 for scc 0 with depgraph nodes <5>
 1 cNNEiC checking predecessor edges of node 5
 1 calculateFixedDomain
 1 calculateStratificationInfo
 1 -> outerEatoms <>
 1 -> innerRules <ID(0x30000000,  15 rule regular)>
 1 -> innerConstraints <>
 1 -> innerEatoms <>
 1 -> disjunctiveHeads=0 negativeDependencyBetweenRules=0 innerEatomsNonmonotonic=0 outerEatomsNonmonotonic=0 componentIsMonotonic=1
 1 created component node 0x1cb2140 for scc 1 with depgraph nodes <0,1>
 1 cNNEiC checking predecessor edges of node 0
 1 cNNEiC checking predecessor edges of node 1
 1 calculateFixedDomain
 1 calculateStratificationInfo
 1 -> outerEatoms <>
 1 -> innerRules <ID(0x30000000,  11 rule regular),ID(0x30000000,  12 rule regular)>
 1 -> innerConstraints <>
 1 -> innerEatoms <>
 1 -> disjunctiveHeads=0 negativeDependencyBetweenRules=0 innerEatomsNonmonotonic=0 outerEatomsNonmonotonic=0 componentIsMonotonic=1
 1 created component node 0x1cb1ee0 for scc 2 with depgraph nodes <2,3>
 1 cNNEiC checking predecessor edges of node 2
 1 cNNEiC checking predecessor edges of node 3
 1 calculateFixedDomain
 1 calculateStratificationInfo
 1 -> outerEatoms <>
 1 -> innerRules <ID(0x30000000,  13 rule regular),ID(0x30000000,  14 rule regular)>
 1 -> innerConstraints <>
 1 -> innerEatoms <>
 1 -> disjunctiveHeads=0 negativeDependencyBetweenRules=0 innerEatomsNonmonotonic=0 outerEatomsNonmonotonic=0 componentIsMonotonic=1
 1 created component node 0x1cb0b30 for scc 3 with depgraph nodes <6>
 1 cNNEiC checking predecessor edges of node 6
 1 calculateFixedDomain
 1 calculateStratificationInfo
 1 -> outerEatoms <>
 1 -> innerRules <ID(0x30000000,  16 rule regular)>
 1 -> innerConstraints <>
 1 -> innerEatoms <>
 1 -> disjunctiveHeads=0 negativeDependencyBetweenRules=0 innerEatomsNonmonotonic=0 outerEatomsNonmonotonic=0 componentIsMonotonic=1
 1 created component node 0x1cb0d90 for scc 4 with depgraph nodes <4>
 1 cNNEiC checking predecessor edges of node 4
 1 calculateFixedDomain
 1 calculateStratificationInfo
 1 -> outerEatoms <>
 1 -> innerRules <ID(0x30000000,  17 rule regular)>
 1 -> innerConstraints <>
 1 -> innerEatoms <>
 1 -> disjunctiveHeads=0 negativeDependencyBetweenRules=0 innerEatomsNonmonotonic=0 outerEatomsNonmonotonic=0 componentIsMonotonic=1
 1 found dependency from SCC 1 to SCC 0
 1 found dependency from SCC 1 to SCC 0
 1 found dependency from SCC 2 to SCC 0
 1 found dependency from SCC 2 to SCC 1
 1 found dependency from SCC 2 to SCC 1
 1 found dependency from SCC 2 to SCC 1
 1 found dependency from SCC 2 to SCC 1
 1 found dependency from SCC 4 to SCC 3
 1 found dependency from SCC 4 to SCC 2
 1 found dependency from SCC 4 to SCC 2
 1 Building component graph
 1 invoking build() on eval heuristic
 1 = EvalGraphBuilder::createEvalUnit(<0x1cb1560,0x1cb2ce0,0x1cb2e60,0x1cb2fe0,0x1cb31c0>,<>)
 1  compr op(Y,X) :- op(X,Y).
 1  compr sub(X,Z) :- sub(X,Y), sub(Y,Z).
sub(Y2,X2) :- op(X,X2), op(Y,Y2), sub(X,Y).
 1  compr conf(X,Y1) :- sub(X,Y), op(Y,Y1).
conf(X,Y2) :- conf(X,Y1), sub(Y2,Y1).
 1  compr inv(Y,X) :- inv(X,Y).
 1  compr confref(X) :- conf(X,Y), inv(X,Y).
 1 cC = collapseComponents(<0x1cb1560,0x1cb2ce0,0x1cb2e60,0x1cb2fe0,0x1cb31c0>,<>)
 1 cC created component node 0x1cb3e70 for collapsed component
 1 cC cCCI = computeCollapsedComponentInfos(<0x1cb1560,0x1cb2ce0,0x1cb2e60,0x1cb2fe0,0x1cb31c0>,<>,.,.,.)
 1 cC cCCI original 0x1cb1560: (outgoing)
 1 cC cCCI original 0x1cb2ce0: (outgoing)
 1 cC cCCI    internal dependency (to 0x1cb1560)
 1 cC cCCI original 0x1cb2e60: (outgoing)
 1 cC cCCI    internal dependency (to 0x1cb1560)
 1 cC cCCI    internal dependency (to 0x1cb2ce0)
 1 cC cCCI original 0x1cb2fe0: (outgoing)
 1 cC cCCI original 0x1cb31c0: (outgoing)
 1 cC cCCI    internal dependency (to 0x1cb2e60)
 1 cC cCCI    internal dependency (to 0x1cb2fe0)
 1 cC cCCI original 0x1cb1560: (incoming)
 1 cC cCCI original 0x1cb2ce0: (incoming)
 1 cC cCCI original 0x1cb2e60: (incoming)
 1 cC cCCI original 0x1cb2fe0: (incoming)
 1 cC cCCI original 0x1cb31c0: (incoming)
 1 cC cCCI calculateStratificationInfo
 1 created unit 0 for new comp 0x1cb3e70
 1 configuring plain model generator factory for eval unit 0
 1 resetting custom model generator provider
 1 resetting state
 1 resetting callbacks
 1 resetting modelBuilder
 1 resetting parser
 1 resetting evalgraph
 1 resetting compgraph
 1 resetting depgraph
 1 resetting edbList
 1 resetting inputProvider
 1 resetting aspsoftware
 1 resetting pluginData
 1 resetting pluginEnvironment
 1 resetting registry, usage count was 273 (it should be 2)
 1 resetting pluginAtoms
 1 resetting pluginContainer, usage count was 7 (it should be 1)
 1 resetting custom model generator provider
 1 resetting state
 1 resetting callbacks
 1 resetting modelBuilder
 1 resetting parser
 1 resetting evalgraph
 1 resetting compgraph
 1 resetting depgraph
 1 resetting edbList
 1 resetting inputProvider
 1 resetting aspsoftware
 1 resetting pluginData
 1 resetting pluginEnvironment
 1 resetting registry, usage count was 272 (it should be 2)
 1 resetting pluginAtoms
 1 resetting pluginContainer, usage count was 6 (it should be 1)
 1 resetting custom model generator provider
 1 resetting state
 1 resetting callbacks
 1 resetting modelBuilder
 1 resetting parser
 1 resetting evalgraph
 1 resetting compgraph
 1 resetting depgraph
 1 resetting edbList
 1 resetting inputProvider
 1 resetting aspsoftware
 1 resetting pluginData
 1 resetting pluginEnvironment
 1 resetting registry, usage count was 272 (it should be 2)
 1 resetting pluginAtoms
 1 resetting pluginContainer, usage count was 6 (it should be 1)
 1 resetting custom model generator provider
 1 resetting state
 1 resetting callbacks
 1 resetting modelBuilder
 1 resetting parser
 1 resetting evalgraph
 1 resetting compgraph
 1 resetting depgraph
 1 resetting edbList
 1 resetting inputProvider
 1 resetting aspsoftware
 1 resetting pluginData
 1 resetting pluginEnvironment
 1 resetting registry, usage count was 271 (it should be 2)
 1 resetting pluginAtoms
 1 resetting pluginContainer, usage count was 5 (it should be 1)
 1 not converting rule ID(0x30000000,  15 rule regular) (does not contain extatoms)
 1 not converting rule ID(0x30000000,  11 rule regular) (does not contain extatoms)
 1 not converting rule ID(0x30000000,  12 rule regular) (does not contain extatoms)
 1 not converting rule ID(0x30000000,  13 rule regular) (does not contain extatoms)
 1 not converting rule ID(0x30000000,  14 rule regular) (does not contain extatoms)
 1 not converting rule ID(0x30000000,  16 rule regular) (does not contain extatoms)
 1 not converting rule ID(0x30000000,  17 rule regular) (does not contain extatoms)
 1 resetting custom model generator provider
 1 resetting state
 1 resetting callbacks
 1 resetting modelBuilder
 1 resetting parser
 1 resetting evalgraph
 1 resetting compgraph
 1 resetting depgraph
 1 resetting edbList
 1 resetting inputProvider
 1 resetting aspsoftware
 1 resetting pluginData
 1 resetting pluginEnvironment
 1 resetting registry, usage count was 270 (it should be 2)
 1 resetting pluginAtoms
 1 resetting pluginContainer, usage count was 4 (it should be 1)
 1 resetting custom model generator provider
 1 resetting state
 1 resetting callbacks
 1 resetting modelBuilder
 1 resetting parser
 1 resetting evalgraph
 1 resetting compgraph
 1 resetting depgraph
 1 resetting edbList
 1 resetting inputProvider
 1 resetting aspsoftware
 1 resetting pluginData
 1 resetting pluginEnvironment
 1 resetting registry, usage count was 269 (it should be 2)
 1 resetting pluginAtoms
 1 resetting pluginContainer, usage count was 3 (it should be 1)
 1 resetting custom model generator provider
 1 resetting state
 1 resetting callbacks
 1 resetting modelBuilder
 1 resetting parser
 1 resetting evalgraph
 1 resetting compgraph
 1 resetting depgraph
 1 resetting edbList
 1 resetting inputProvider
 1 resetting aspsoftware
 1 resetting pluginData
 1 resetting pluginEnvironment
 1 resetting registry, usage count was 273 (it should be 2)
 1 resetting pluginAtoms
 1 resetting pluginContainer, usage count was 7 (it should be 1)
 1 resetting custom model generator provider
 1 resetting state
 1 resetting callbacks
 1 resetting modelBuilder
 1 resetting parser
 1 resetting evalgraph
 1 resetting compgraph
 1 resetting depgraph
 1 resetting edbList
 1 resetting inputProvider
 1 resetting aspsoftware
 1 resetting pluginData
 1 resetting pluginEnvironment
 1 resetting registry, usage count was 272 (it should be 2)
 1 resetting pluginAtoms
 1 resetting pluginContainer, usage count was 6 (it should be 1)
 1 resetting custom model generator provider
 1 resetting state
 1 resetting callbacks
 1 resetting modelBuilder
 1 resetting parser
 1 resetting evalgraph
 1 resetting compgraph
 1 resetting depgraph
 1 resetting edbList
 1 resetting inputProvider
 1 resetting aspsoftware
 1 resetting pluginData
 1 resetting pluginEnvironment
 1 resetting registry, usage count was 272 (it should be 2)
 1 resetting pluginAtoms
 1 resetting pluginContainer, usage count was 6 (it should be 1)
 1 resetting custom model generator provider
 1 resetting state
 1 resetting callbacks
 1 resetting modelBuilder
 1 resetting parser
 1 resetting evalgraph
 1 resetting compgraph
 1 resetting depgraph
 1 resetting edbList
 1 resetting inputProvider
 1 resetting aspsoftware
 1 resetting pluginData
 1 resetting pluginEnvironment
 1 resetting registry, usage count was 271 (it should be 2)
 1 resetting pluginAtoms
 1 resetting pluginContainer, usage count was 5 (it should be 1)
 1 resetting custom model generator provider
 1 resetting state
 1 resetting callbacks
 1 resetting modelBuilder
 1 resetting parser
 1 resetting evalgraph
 1 resetting compgraph
 1 resetting depgraph
 1 resetting edbList
 1 resetting inputProvider
 1 resetting aspsoftware
 1 resetting pluginData
 1 resetting pluginEnvironment
 1 resetting registry, usage count was 270 (it should be 2)
 1 resetting pluginAtoms
 1 resetting pluginContainer, usage count was 4 (it should be 1)
 1 resetting custom model generator provider
 1 resetting state
 1 resetting callbacks
 1 resetting modelBuilder
 1 resetting parser
 1 resetting evalgraph
 1 resetting compgraph
 1 resetting depgraph
 1 resetting edbList
 1 resetting inputProvider
 1 resetting aspsoftware
 1 resetting pluginData
 1 resetting pluginEnvironment
 1 resetting registry, usage count was 269 (it should be 2)
 1 resetting pluginAtoms
 1 resetting pluginContainer, usage count was 3 (it should be 1)
 1 GenuinePlainModelGeneratorFactory got idb op(Y,X) :- op(X,Y). sub(X,Z) :- sub(X,Y), sub(Y,Z). sub(Y2,X2) :- op(X,X2), op(Y,Y2), sub(X,Y). conf(X,Y1) :- sub(X,Y), op(Y,Y1). conf(X,Y2) :- conf(X,Y1), sub(Y2,Y1). inv(Y,X) :- inv(X,Y). confref(X) :- conf(X,Y), inv(X,Y).
 1 GenuinePlainModelGeneratorFactory got xidb op(Y,X) :- op(X,Y). sub(X,Z) :- sub(X,Y), sub(Y,Z). sub(Y2,X2) :- op(X,X2), op(Y,Y2), sub(X,Y). conf(X,Y1) :- sub(X,Y), op(Y,Y1). conf(X,Y2) :- conf(X,Y1), sub(Y2,Y1). inv(Y,X) :- inv(X,Y). confref(X) :- conf(X,Y), inv(X,Y).
 1 Destructing component graph 0x1cb23c0
 1 created virtual final unit ufinal = 1
 1 adding dependency from ufinal to unit 0 join order 0
 1 setting up program ctx for plugin dlvhex-manualevalheuristicsplugin[internal]
 1 setting up program ctx for plugin dlvhex-queryplugin[internal]
 1 setting up program ctx for plugin dlvhex-aggregateplugin[internal]
 1 setting up program ctx for plugin dlvhex-strongnegationplugin[internal]
 1 setting up program ctx for plugin dlvhex-higherorderplugin[internal]
 1 setting up program ctx for plugin dlvhex-weakconstraintplugin[internal]
 1 setting up program ctx for plugin dlvhex-existsplugin[internal]
 1 setting up program ctx for plugin dlvhex-functionplugin[internal]
 1 setting up program ctx for plugin dlvhex-dlliteplugin
 1 DLLitePlugin::setupProgramCtx(ProgramCtx& ctx)
 1 Registry was already previously set
 1 IDs have already been prepared
 1 Classification program was already constructed
 1 Setting AnswerSetCallback
 1 Evaluate subprogram
 1 EvalUnitModels()@0x7fff0cbcafb0
 1 EvalUnitModels()@0x7fff0cbcaf50
 1 EvalUnitModels(const EvalUnitModels&)@0x1cb3620 from 0x7fff0cbcaf50
 1 EvalUnitModels(const EvalUnitModels&)@0x1cb3630 from 0x7fff0cbcaf50
 1 EvalUnitModels(const EvalUnitModels&)@0x1cb3640 from 0x7fff0cbcaf50
 1 ~EvalUnitModels()@0x7fff0cbcaf50
 1 ~EvalUnitModels()@0x7fff0cbcafb0
 1 initializing mbp for unit 0
 1 initializing mbp for unit 1
 1 requesting imodel
 1 =OnlineModelBuilder<...>::getNextIModel(1)
 1 uprops: (no ModelGeneratorFactory)
 1 mbprops: currentmg =      null, needInput = 1, orefcount = 0, imodel =     unset, currentisuccessor = unset
 1 =OnlineModelBuilder<...>::getNextOModel(0):
 1 uprops = op(Y,X) :- op(X,Y).
sub(X,Z) :- sub(X,Y), sub(Y,Z).
sub(Y2,X2) :- op(X,X2), op(Y,Y2), sub(X,Y).
conf(X,Y1) :- sub(X,Y), op(Y,Y1).
conf(X,Y2) :- conf(X,Y1), sub(Y2,Y1).
inv(Y,X) :- inv(X,Y).
confref(X) :- conf(X,Y), inv(X,Y).
 1 mbprops = currentmg =      null, needInput = 0, orefcount = 0, imodel =     unset, currentisuccessor = unset
 1 =OnlineModelBuilder<...>::getNextIModel(0)
 1 uprops: op(Y,X) :- op(X,Y).
sub(X,Z) :- sub(X,Y), sub(Y,Z).
sub(Y2,X2) :- op(X,X2), op(Y,Y2), sub(X,Y).
conf(X,Y1) :- sub(X,Y), op(Y,Y1).
conf(X,Y2) :- conf(X,Y1), sub(Y2,Y1).
inv(Y,X) :- inv(X,Y).
confref(X) :- conf(X,Y), inv(X,Y).
 1 mbprops: currentmg =      null, needInput = 0, orefcount = 0, imodel =     unset, currentisuccessor = unset
 1 unit needs no input
 1 running debug checks
 1 =OnlineModelBuilder<...>::advanceOModelForIModel(0)
 1 imodel has properties dummy interpretation=null
 1 =createNextModel(0)
 1 Instantiating genuine grounder with gringo
 1 Creating new term with name 'int6'
 1 stored term Term(int6) which got ID(0x10000000,  66 term constant)
 1 Creating new term with name 'anonymous7'
 1 stored term Term(anonymous7) which got ID(0x10000000,  67 term constant)
 1 Sending the following input to Gringo: {{op("B","-B").sub("B","B").op("C","-C").sub("C","C").op("D","-D").sub("D","D").
op(Y,X) :- op(X,Y).
sub(X,Z) :- sub(X,Y), sub(Y,Z).
sub(Y2,X2) :- op(X,X2), op(Y,Y2), sub(X,Y).
conf(X,Y1) :- sub(X,Y), op(Y,Y1).
conf(X,Y2) :- conf(X,Y1), sub(Y2,Y1).
inv(Y,X) :- inv(X,Y).
confref(X) :- conf(X,Y), inv(X,Y).
int6(0..0).}}
 1 Got atom op("B","-B") with Gringo-ID 2 and dlvhex-ID ID(0x00000000,   9 atom ordinary_ground)
 1 Got atom op("C","-C") with Gringo-ID 4 and dlvhex-ID ID(0x00000000,  11 atom ordinary_ground)
 1 Got atom op("D","-D") with Gringo-ID 6 and dlvhex-ID ID(0x00000000,  13 atom ordinary_ground)
 1 parsing gringo ground atom 'op("-B","B")'
 1 Term tuple: op
 1 got token 'op'
 1 Term tuple: "-B"
 1 got token '"-B"'
 1 Term tuple: "B"
 1 got token '"B"'
 1 Got atom op("-B","B") with Gringo-ID 8 and dlvhex-ID ID(0x00000000,  15 atom ordinary_ground)
 1 parsing gringo ground atom 'op("-C","C")'
 1 Term tuple: op
 1 got token 'op'
 1 Term tuple: "-C"
 1 got token '"-C"'
 1 Term tuple: "C"
 1 got token '"C"'
 1 Got atom op("-C","C") with Gringo-ID 9 and dlvhex-ID ID(0x00000000,  16 atom ordinary_ground)
 1 parsing gringo ground atom 'op("-D","D")'
 1 Term tuple: op
 1 got token 'op'
 1 Term tuple: "-D"
 1 got token '"-D"'
 1 Term tuple: "D"
 1 got token '"D"'
 1 Got atom op("-D","D") with Gringo-ID 10 and dlvhex-ID ID(0x00000000,  17 atom ordinary_ground)
 1 Got atom sub("B","B") with Gringo-ID 3 and dlvhex-ID ID(0x00000000,  10 atom ordinary_ground)
 1 Got atom sub("C","C") with Gringo-ID 5 and dlvhex-ID ID(0x00000000,  12 atom ordinary_ground)
 1 Got atom sub("D","D") with Gringo-ID 7 and dlvhex-ID ID(0x00000000,  14 atom ordinary_ground)
 1 parsing gringo ground atom 'sub("-B","-B")'
 1 Term tuple: sub
 1 got token 'sub'
 1 Term tuple: "-B"
 1 got token '"-B"'
 1 Term tuple: "-B"
 1 got token '"-B"'
 1 Got atom sub("-B","-B") with Gringo-ID 11 and dlvhex-ID ID(0x00000000,  18 atom ordinary_ground)
 1 parsing gringo ground atom 'sub("-C","-C")'
 1 Term tuple: sub
 1 got token 'sub'
 1 Term tuple: "-C"
 1 got token '"-C"'
 1 Term tuple: "-C"
 1 got token '"-C"'
 1 Got atom sub("-C","-C") with Gringo-ID 12 and dlvhex-ID ID(0x00000000,  19 atom ordinary_ground)
 1 parsing gringo ground atom 'sub("-D","-D")'
 1 Term tuple: sub
 1 got token 'sub'
 1 Term tuple: "-D"
 1 got token '"-D"'
 1 Term tuple: "-D"
 1 got token '"-D"'
 1 Got atom sub("-D","-D") with Gringo-ID 13 and dlvhex-ID ID(0x00000000,  20 atom ordinary_ground)
 1 parsing gringo ground atom 'conf("B","-B")'
 1 Term tuple: conf
 1 got token 'conf'
 1 Term tuple: "B"
 1 got token '"B"'
 1 Term tuple: "-B"
 1 got token '"-B"'
 1 Got atom conf("B","-B") with Gringo-ID 14 and dlvhex-ID ID(0x00000000,  21 atom ordinary_ground)
 1 parsing gringo ground atom 'conf("C","-C")'
 1 Term tuple: conf
 1 got token 'conf'
 1 Term tuple: "C"
 1 got token '"C"'
 1 Term tuple: "-C"
 1 got token '"-C"'
 1 Got atom conf("C","-C") with Gringo-ID 15 and dlvhex-ID ID(0x00000000,  22 atom ordinary_ground)
 1 parsing gringo ground atom 'conf("D","-D")'
 1 Term tuple: conf
 1 got token 'conf'
 1 Term tuple: "D"
 1 got token '"D"'
 1 Term tuple: "-D"
 1 got token '"-D"'
 1 Got atom conf("D","-D") with Gringo-ID 16 and dlvhex-ID ID(0x00000000,  23 atom ordinary_ground)
 1 parsing gringo ground atom 'conf("-B","B")'
 1 Term tuple: conf
 1 got token 'conf'
 1 Term tuple: "-B"
 1 got token '"-B"'
 1 Term tuple: "B"
 1 got token '"B"'
 1 Got atom conf("-B","B") with Gringo-ID 17 and dlvhex-ID ID(0x00000000,  24 atom ordinary_ground)
 1 parsing gringo ground atom 'conf("-C","C")'
 1 Term tuple: conf
 1 got token 'conf'
 1 Term tuple: "-C"
 1 got token '"-C"'
 1 Term tuple: "C"
 1 got token '"C"'
 1 Got atom conf("-C","C") with Gringo-ID 18 and dlvhex-ID ID(0x00000000,  25 atom ordinary_ground)
 1 parsing gringo ground atom 'conf("-D","D")'
 1 Term tuple: conf
 1 got token 'conf'
 1 Term tuple: "-D"
 1 got token '"-D"'
 1 Term tuple: "D"
 1 got token '"D"'
 1 Got atom conf("-D","D") with Gringo-ID 19 and dlvhex-ID ID(0x00000000,  26 atom ordinary_ground)
 1 parsing gringo ground atom 'int6(0)'
 1 Term tuple: int6
 1 got token 'int6'
 1 Term tuple: 0
 1 got token '0'
 1 Got atom int6(0) with Gringo-ID 20 and dlvhex-ID ID(0x00000000,  27 atom ordinary_ground)
 1 Transforming 19 rules to DLVHEX
 1 Setting fact 9 (Gringo: 2)
 1 Setting fact 10 (Gringo: 3)
 1 Setting fact 11 (Gringo: 4)
 1 Setting fact 12 (Gringo: 5)
 1 Setting fact 13 (Gringo: 6)
 1 Setting fact 14 (Gringo: 7)
 1 Setting fact 15 (Gringo: 8)
 1 Setting fact 16 (Gringo: 9)
 1 Setting fact 17 (Gringo: 10)
 1 Setting fact 18 (Gringo: 11)
 1 Setting fact 19 (Gringo: 12)
 1 Setting fact 20 (Gringo: 13)
 1 Setting fact 21 (Gringo: 14)
 1 Setting fact 22 (Gringo: 15)
 1 Setting fact 23 (Gringo: 16)
 1 Setting fact 24 (Gringo: 17)
 1 Setting fact 25 (Gringo: 18)
 1 Setting fact 26 (Gringo: 19)
 1 Setting fact 27 (Gringo: 20)
 1 Got the following ground program from Gringo: {op("B","-B").sub("B","B").op("C","-C").sub("C","C").op("D","-D").sub("D","D").op("-B","B").op("-C","C").op("-D","D").sub("-B","-B").sub("-C","-C").sub("-D","-D").conf("B","-B").conf("C","-C").conf("D","-D").conf("-B","B").conf("-C","C").conf("-D","D").int6(0).

}
 1 Instantiating genuine solver with clasp (min-check: 1)
 1 Contructing atom dependency graph for 0 rules
 1 Computing strongly connected components
 1 Partitioning program
 1 Computing head-cycles of components
 1 Computing e-cycles of components
 1 Program:
EDB: {op("B","-B"),sub("B","B"),op("C","-C"),sub("C","C"),op("D","-D"),sub("D","D"),op("-B","B"),op("-C","C"),op("-D","D"),sub("-B","-B"),sub("-C","-C"),sub("-D","-D"),conf("B","-B"),conf("C","-C"),conf("D","-D"),conf("-B","B"),conf("-C","C"),conf("-D","D"),int6(0)}
IDB:

has SCC-decomposition: 
 1 Configure clasp in ASP mode
 1 Interpreting clasp command-line
 1 Found configuration: --configuration=frumpy
 1 Configuring options
 1 Parsing command-line
 1 Assigning specified values
 1 Assigning defaults
 1 Applying options
 1 Finished option parsing
 1 Sending EDB to clasp: {op("B","-B"),sub("B","B"),op("C","-C"),sub("C","C"),op("D","-D"),sub("D","D"),op("-B","B"),op("-C","C"),op("-D","D"),sub("-B","-B"),sub("-C","-C"),sub("-D","-D"),conf("B","-B"),conf("C","-C"),conf("D","-D"),conf("-B","B"),conf("-C","C"),conf("-D","D"),int6(0)}
 1 Sending IDB to clasp
 1 SAT instance has 1 variables
 1 Instance is not inconsistent
 1 Setting all 1 variables to frozen
 1 Prepare model enumerator
 1 Finalizing initialization
 1 Problem has 1 variables
 1 Symbol table of optimized program:
 1 H:9 (op("B","-B")) <--> C:0/0
 1 H:10 (sub("B","B")) <--> C:0/0
 1 H:11 (op("C","-C")) <--> C:0/0
 1 H:12 (sub("C","C")) <--> C:0/0
 1 H:13 (op("D","-D")) <--> C:0/0
 1 H:14 (sub("D","D")) <--> C:0/0
 1 H:15 (op("-B","B")) <--> C:0/0
 1 H:16 (op("-C","C")) <--> C:0/0
 1 H:17 (op("-D","D")) <--> C:0/0
 1 H:18 (sub("-B","-B")) <--> C:0/0
 1 H:19 (sub("-C","-C")) <--> C:0/0
 1 H:20 (sub("-D","-D")) <--> C:0/0
 1 H:21 (conf("B","-B")) <--> C:0/0
 1 H:22 (conf("C","-C")) <--> C:0/0
 1 H:23 (conf("D","-D")) <--> C:0/0
 1 H:24 (conf("-B","B")) <--> C:0/0
 1 H:25 (conf("-C","C")) <--> C:0/0
 1 H:26 (conf("-D","D")) <--> C:0/0
 1 H:27 (int6(0)) <--> C:0/0
 1 hexToClasp.size()=28, symTab.size()=19
 1 Prepare solver object
 1 Adding post propagator
 1 Initializing assignment extraction
 1 Adding watch for literal C:0/0 and its negation
 1 Adding watch for literal C:0/0 and its negation
 1 Adding watch for literal C:0/0 and its negation
 1 Adding watch for literal C:0/0 and its negation
 1 Adding watch for literal C:0/0 and its negation
 1 Adding watch for literal C:0/0 and its negation
 1 Adding watch for literal C:0/0 and its negation
 1 Adding watch for literal C:0/0 and its negation
 1 Adding watch for literal C:0/0 and its negation
 1 Adding watch for literal C:0/0 and its negation
 1 Adding watch for literal C:0/0 and its negation
 1 Adding watch for literal C:0/0 and its negation
 1 Adding watch for literal C:0/0 and its negation
 1 Adding watch for literal C:0/0 and its negation
 1 Adding watch for literal C:0/0 and its negation
 1 Adding watch for literal C:0/0 and its negation
 1 Adding watch for literal C:0/0 and its negation
 1 Adding watch for literal C:0/0 and its negation
 1 Adding watch for literal C:0/0 and its negation
 1 Extracting full interpretation from clasp
 1 Extracting clasp interpretation
 1 Literal C:0/0@0,H:9:op("B","-B") is true
 1 Literal C:0/0@0,H:10:sub("B","B") is true
 1 Literal C:0/0@0,H:11:op("C","-C") is true
 1 Literal C:0/0@0,H:12:sub("C","C") is true
 1 Literal C:0/0@0,H:13:op("D","-D") is true
 1 Literal C:0/0@0,H:14:sub("D","D") is true
 1 Literal C:0/0@0,H:15:op("-B","B") is true
 1 Literal C:0/0@0,H:16:op("-C","C") is true
 1 Literal C:0/0@0,H:17:op("-D","D") is true
 1 Literal C:0/0@0,H:18:sub("-B","-B") is true
 1 Literal C:0/0@0,H:19:sub("-C","-C") is true
 1 Literal C:0/0@0,H:20:sub("-D","-D") is true
 1 Literal C:0/0@0,H:21:conf("B","-B") is true
 1 Literal C:0/0@0,H:22:conf("C","-C") is true
 1 Literal C:0/0@0,H:23:conf("D","-D") is true
 1 Literal C:0/0@0,H:24:conf("-B","B") is true
 1 Literal C:0/0@0,H:25:conf("-C","C") is true
 1 Literal C:0/0@0,H:26:conf("-D","D") is true
 1 Literal C:0/0@0,H:27:int6(0) is true
 1 ClaspSolver::getNextModel
 1 Model enumeration algorithm: (ini)
 1 Starting new search
 1 Adding step literal to assumptions
 1 Starting enumerator with 1 assumptions (including step literal)
 1 ExternalPropagator::propagateFixpoint
 1 Will not propagate to HEX
 1 ExternalPropagator: Adding new clauses to clasp (0 were prepared)
 1 Nothing more to propagate
 1 ExternalPropagator::propagateFixpoint
 1 Will not propagate to HEX
 1 ExternalPropagator: Adding new clauses to clasp (0 were prepared)
 1 Nothing more to propagate
 1 Model enumeration algorithm: (sat)
 1 Instance is satisfiable wrt. assumptions
 1 Model enumeration algorithm: (sol)
 1 Solve for next model
 1 ExternalPropagator::propagateFixpoint
 1 Will not propagate to HEX
 1 ExternalPropagator: Adding new clauses to clasp (0 were prepared)
 1 Nothing more to propagate
 1 ExternalPropagator::isModel
 1 Must propagate to HEX
 1 ExternalPropagator: Calling HEX-Propagator
 1 Extracting clasp interpretation
 1 Literal C:0/0@0,H:9:op("B","-B") is true
 1 Literal C:0/0@0,H:10:sub("B","B") is true
 1 Literal C:0/0@0,H:11:op("C","-C") is true
 1 Literal C:0/0@0,H:12:sub("C","C") is true
 1 Literal C:0/0@0,H:13:op("D","-D") is true
 1 Literal C:0/0@0,H:14:sub("D","D") is true
 1 Literal C:0/0@0,H:15:op("-B","B") is true
 1 Literal C:0/0@0,H:16:op("-C","C") is true
 1 Literal C:0/0@0,H:17:op("-D","D") is true
 1 Literal C:0/0@0,H:18:sub("-B","-B") is true
 1 Literal C:0/0@0,H:19:sub("-C","-C") is true
 1 Literal C:0/0@0,H:20:sub("-D","-D") is true
 1 Literal C:0/0@0,H:21:conf("B","-B") is true
 1 Literal C:0/0@0,H:22:conf("C","-C") is true
 1 Literal C:0/0@0,H:23:conf("D","-D") is true
 1 Literal C:0/0@0,H:24:conf("-B","B") is true
 1 Literal C:0/0@0,H:25:conf("-C","C") is true
 1 Literal C:0/0@0,H:26:conf("-D","D") is true
 1 Literal C:0/0@0,H:27:int6(0) is true
 1 Partial assignment: {op("B","-B"),sub("B","B"),op("C","-C"),sub("C","C"),op("D","-D"),sub("D","D"),op("-B","B"),op("-C","C"),op("-D","D"),sub("-B","-B"),sub("-C","-C"),sub("-D","-D"),conf("B","-B"),conf("C","-C"),conf("D","-D"),conf("-B","B"),conf("-C","C"),conf("-D","D"),int6(0)} (assigned: {op("B","-B"),sub("B","B"),op("C","-C"),sub("C","C"),op("D","-D"),sub("D","D"),op("-B","B"),op("-C","C"),op("-D","D"),sub("-B","-B"),sub("-C","-C"),sub("-D","-D"),conf("B","-B"),conf("C","-C"),conf("D","-D"),conf("-B","B"),conf("-C","C"),conf("-D","D"),int6(0)})
Incrementally extracted partial assignment: {op("B","-B"),sub("B","B"),op("C","-C"),sub("C","C"),op("D","-D"),sub("D","D"),op("-B","B"),op("-C","C"),op("-D","D"),sub("-B","-B"),sub("-C","-C"),sub("-D","-D"),conf("B","-B"),conf("C","-C"),conf("D","-D"),conf("-B","B"),conf("-C","C"),conf("-D","D"),int6(0)} (assigned: {op("B","-B"),sub("B","B"),op("C","-C"),sub("C","C"),op("D","-D"),sub("D","D"),op("-B","B"),op("-C","C"),op("-D","D"),sub("-B","-B"),sub("-C","-C"),sub("-D","-D"),conf("B","-B"),conf("C","-C"),conf("D","-D"),conf("-B","B"),conf("-C","C"),conf("-D","D"),int6(0)})
Changed atoms: {op("B","-B"),sub("B","B"),op("C","-C"),sub("C","C"),op("D","-D"),sub("D","D"),op("-B","B"),op("-C","C"),op("-D","D"),sub("-B","-B"),sub("-C","-C"),sub("-D","-D"),conf("B","-B"),conf("C","-C"),conf("D","-D"),conf("-B","B"),conf("-C","C"),conf("-D","D"),int6(0)}
 1 ExternalPropagator: Adding new clauses to clasp (0 were prepared)
 1 Model enumeration algorithm: (com)
 1 Committing model
 1 Model enumeration algorithm: (ext)
 1 Extract model model
 1 Projected to {op("-B","B"),op("-C","C"),op("-D","D"),sub("-B","-B"),sub("-C","-C"),sub("-D","-D"),conf("B","-B"),conf("C","-C"),conf("D","-D"),conf("-B","B"),conf("-C","C"),conf("-D","D")}
 1 Model enumeration algorithm: (ret)
 1 Returning model
 1 Statistics:
Guesses: 0
Conflicts: 0
Models: 1
 1 running debug checks
 1 =OnlineModelBuilder<...>::createIModelFromPredecessorOModels(1)
 1 gSI =getSuccessorIntersection(1,1)
 1 gSI one-dependency shortcut: simply finding corresponding model
 1 gSI no successors
 1 running debug checks
 1 got model#0:{op("-B","B"),op("-C","C"),op("-D","D"),sub("-B","-B"),sub("-C","-C"),sub("-D","-D"),conf("B","-B"),conf("C","-C"),conf("D","-D"),conf("-B","B"),conf("-C","C"),conf("-D","D")}
 1 New global optimum: 
 1 requesting imodel
 1 =OnlineModelBuilder<...>::getNextIModel(1)
 1 uprops: (no ModelGeneratorFactory)
 1 mbprops: currentmg =      null, needInput = 1, orefcount = 0, imodel = 0x1ccb1a0, currentisuccessor = unset
 1 =OnlineModelBuilder<...>::ensureModelIncrement(1,0)
 1 ucursor = 0 with mbprops = {currentmg = 0x1cb3a50, needInput = 0, orefcount = 1, imodel = 0x1cb3ab0, currentisuccessor = 0x1cc4bb0 -> 0x1cb3ab0}
 1 =OnlineModelBuilder<...>::getNextOModel(0):
 1 uprops = op(Y,X) :- op(X,Y).
sub(X,Z) :- sub(X,Y), sub(Y,Z).
sub(Y2,X2) :- op(X,X2), op(Y,Y2), sub(X,Y).
conf(X,Y1) :- sub(X,Y), op(Y,Y1).
conf(X,Y2) :- conf(X,Y1), sub(Y2,Y1).
inv(Y,X) :- inv(X,Y).
confref(X) :- conf(X,Y), inv(X,Y).
 1 mbprops = currentmg = 0x1cb3a50, needInput = 0, orefcount = 1, imodel = 0x1cb3ab0, currentisuccessor = 0x1cc4bb0 -> 0x1cb3ab0
 1 =OnlineModelBuilder<...>::advanceOModelForIModel(0)
 1 imodel has properties dummy interpretation=null
 1 =createNextModel(0)
 1 ClaspSolver::getNextModel
 1 Model enumeration algorithm: (cos)
 1 Committing symmetric model
 1 No more symmetric models, going to update
 1 Model enumeration algorithm: (upd)
 1 Updating enumerator
 1 Model enumeration algorithm: (sol)
 1 Solve for next model
 1 Model enumeration algorithm: (ret)
 1 Returning empty model
 1 Statistics:
Guesses: 0
Conflicts: 0
Models: 1
 1 Final Statistics:
Guesses: 0
Conflicts: 0
Models: 1
 1 Removing watch for literal C:0/0 and its negation
 1 Removing watch for literal C:0/0 and its negation
 1 Removing watch for literal C:0/0 and its negation
 1 Removing watch for literal C:0/0 and its negation
 1 Removing watch for literal C:0/0 and its negation
 1 Removing watch for literal C:0/0 and its negation
 1 Removing watch for literal C:0/0 and its negation
 1 Removing watch for literal C:0/0 and its negation
 1 Removing watch for literal C:0/0 and its negation
 1 Removing watch for literal C:0/0 and its negation
 1 Removing watch for literal C:0/0 and its negation
 1 Removing watch for literal C:0/0 and its negation
 1 Removing watch for literal C:0/0 and its negation
 1 Removing watch for literal C:0/0 and its negation
 1 Removing watch for literal C:0/0 and its negation
 1 Removing watch for literal C:0/0 and its negation
 1 Removing watch for literal C:0/0 and its negation
 1 Removing watch for literal C:0/0 and its negation
 1 Removing watch for literal C:0/0 and its negation
 1 =OnlineModelBuilder<...>::getNextIModel(0)
 1 uprops: op(Y,X) :- op(X,Y).
sub(X,Z) :- sub(X,Y), sub(Y,Z).
sub(Y2,X2) :- op(X,X2), op(Y,Y2), sub(X,Y).
conf(X,Y1) :- sub(X,Y), op(Y,Y1).
conf(X,Y2) :- conf(X,Y1), sub(Y2,Y1).
inv(Y,X) :- inv(X,Y).
confref(X) :- conf(X,Y), inv(X,Y).
 1 mbprops: currentmg =      null, needInput = 0, orefcount = 0, imodel = 0x1cb3ab0, currentisuccessor = unset
 1 unit needs no input
 1 Classification: {op("B","-B"),sub("B","B"),op("C","-C"),sub("C","C"),op("D","-D"),sub("D","D"),op("-B","B"),op("-C","C"),op("-D","D"),sub("-B","-B"),sub("-C","-C"),sub("-D","-D"),conf("B","-B"),conf("C","-C"),conf("D","-D"),conf("-B","B"),conf("-C","C"),conf("-D","D")}
 1 resetting custom model generator provider
 1 resetting state
 1 resetting callbacks
 1 resetting modelBuilder
 1 ~EvalUnitModels()@0x1cb3620
 1 ~EvalUnitModels()@0x1cb3630
 1 ~EvalUnitModels()@0x1cb3640
 1 resetting parser
 1 resetting evalgraph
 1 resetting compgraph
 1 Destructing component graph 0x1cb2a60
 1 resetting depgraph
 1 resetting edbList
 1 resetting inputProvider
 1 resetting aspsoftware
 1 resetting pluginData
 1 resetting pluginEnvironment
 1 resetting registry, usage count was 265 (it should be 2)
 1 resetting pluginAtoms
 1 resetting pluginContainer, usage count was 2 (it should be 1)
 1 LSS: Using the following model CM of the classification program: CM = {op("B","-B"),sub("B","B"),op("C","-C"),sub("C","C"),op("D","-D"),sub("D","D"),op("-B","B"),op("-C","C"),op("-D","D"),sub("-B","-B"),sub("-C","-C"),sub("-D","-D"),conf("B","-B"),conf("C","-C"),conf("D","-D"),conf("-B","B"),conf("-C","C"),conf("-D","D")}
 1 LSS: query is a concept
 1 Storing output atom which will be part of any support set
 1 Query is a concept
 1 gACS getAuxiliaryConstantSymbol for n ID(0x10000000,  14 term constant)
 1 gACS found ID(0x10c00000,  50 term constant)
 1 stored oatom OrdinaryAtom(1c00000,'aux_n_10000000_e("test1.owl",cp,cn,rp,rm,"C",O)',[ID(0x10c00000,  50 term constant),ID(0x10000000,  31 term constant),ID(0x10000000,  37 term constant),ID(0x10000000,  38 term constant),ID(0x10000000,  39 term constant),ID(0x10000000,  40 term constant),ID(0x10000000,  41 term constant),ID(0x12000000,  60 term variable)]) which got ID(0x01c00000,  26 atom ordinary_nonground)
 1 LSS: IPM: Output atom is aux_n_10000000_e("test1.owl",cp,cn,rp,rm,"C",O)
 1 LSS: Query is "C"
 1 LSS: maximal input is not empty
 1 LSS: IPM: inputPredicateMask element cp("B","c")
 1 LSS: Analyzing input to the external atom
 1 LSS: start iterating over the maximal input
 1 LSS: Current atom is with tuple[0] = cp
 1 LSS: Atom belongs to c+
 1 stored oatom OrdinaryAtom(0,'sub("B","C")',[ID(0x10000000,  18 term constant),ID(0x10000000,  42 term constant),ID(0x10000000,  41 term constant)]) which got ID(0x00000000,  28 atom ordinary_ground)
 1 LSS: Checking if sub("B","C") holds in CM:
 1 LSS: Does not hold
 1 stored oatom OrdinaryAtom(0,'conf("B","B")',[ID(0x10000000,  20 term constant),ID(0x10000000,  42 term constant),ID(0x10000000,  42 term constant)]) which got ID(0x00000000,  29 atom ordinary_ground)
 1 LSS: Checking if conf("B","B") holds in CM:
 1 LSS: Does not hold
 1 LSS: Checking if sub("B", C') is true in the classification assignment (for some C')
 1 LSS: Current classification atom: op("B","-B")
 1 LSS: Current classification atom: sub("B","B")
 1 LSS: Found a match with C="B" and C'="B"
 1 stored oatom OrdinaryAtom(1000000,'cp("B",Y)',[ID(0x10000000,  37 term constant),ID(0x10000000,  42 term constant),ID(0x12000000,  25 term variable)]) which got ID(0x01000000,  27 atom ordinary_nonground)
 1 stored oatom OrdinaryAtom(1a00000,'aux_o_0_0("-B",Y)',[ID(0x10800000,  27 term constant),ID(0x10000000,  63 term constant),ID(0x12000000,  25 term variable)]) which got ID(0x01a00000,  28 atom ordinary_nonground)
 1 LSS: --> Learned support set: { aux_n_10000000_e("test1.owl",cp,cn,rp,rm,"C",O), cp("B",Y), aux_o_0_0("-B",Y) } where aux_o_0_0("-B",Y) is the guard atom -B(Y)
 1 Hash of { 26, 27, 28 } is 3596303566097594474
 1 Adding with index 0
 1 LSS: Checking if (C',Y) with C'="B" occurs in c- (for some Y)
 1 LSS: Finished checking if (C',Y) with C'="B" occurs in c- (for some Y)
 1 LSS: Current classification atom: op("C","-C")
 1 LSS: Current classification atom: sub("C","C")
 1 LSS: Current classification atom: op("D","-D")
 1 LSS: Current classification atom: sub("D","D")
 1 LSS: Current classification atom: op("-B","B")
 1 LSS: Current classification atom: op("-C","C")
 1 LSS: Current classification atom: op("-D","D")
 1 LSS: Current classification atom: sub("-B","-B")
 1 LSS: Current classification atom: sub("-C","-C")
 1 LSS: Current classification atom: sub("-D","-D")
 1 LSS: Current classification atom: conf("B","-B")
 1 LSS: Current classification atom: conf("C","-C")
 1 LSS: Current classification atom: conf("D","-D")
 1 LSS: Current classification atom: conf("-B","B")
 1 LSS: Current classification atom: conf("-C","C")
 1 LSS: Current classification atom: conf("-D","D")
 1 LSS: Finished checking if sub("B", C') is true in the classification assignment (for some C')
 1 LSS: Analyzing query and Abox
 1 Query is a concept
 1 stored oatom OrdinaryAtom(1a00000,'aux_o_0_0("C",O)',[ID(0x10800000,  27 term constant),ID(0x10000000,  41 term constant),ID(0x12000000,  60 term variable)]) which got ID(0x01a00000,  29 atom ordinary_nonground)
 1 LSS: --> Learned support set: { aux_n_10000000_e("test1.owl",cp,cn,rp,rm,"C",O), aux_o_0_0("C",O) }
 1 Hash of { 26, 29 } is 845136820114298
 1 Adding with index 1
 1 LSS: Checking if sub(C, "C") is true in the classification assignment (for some C')
 1 LSS: Current classification atom: op("B","-B")
 1 LSS: Current classification atom: sub("B","B")
 1 LSS: Current classification atom: op("C","-C")
 1 LSS: Current classification atom: sub("C","C")
 1 LSS: Found a match with C="C"
 1 LSS: (this is not form exR)
 1 LSS: --> Learned support set: { aux_n_10000000_e("test1.owl",cp,cn,rp,rm,"C",O), aux_o_0_0("C",O) }
 1 Hash of { 26, 29 } is 845136820114298
 1 Already contained with index 1
 1 LSS: Current classification atom: op("D","-D")
 1 LSS: Current classification atom: sub("D","D")
 1 LSS: Current classification atom: op("-B","B")
 1 LSS: Current classification atom: op("-C","C")
 1 LSS: Current classification atom: op("-D","D")
 1 LSS: Current classification atom: sub("-B","-B")
 1 LSS: Current classification atom: sub("-C","-C")
 1 LSS: Current classification atom: sub("-D","-D")
 1 LSS: Current classification atom: conf("B","-B")
 1 LSS: Current classification atom: conf("C","-C")
 1 LSS: Current classification atom: conf("D","-D")
 1 LSS: Current classification atom: conf("-B","B")
 1 LSS: Current classification atom: conf("-C","C")
 1 LSS: Current classification atom: conf("-D","D")
 1 LSS: Number of learned nogoods: 2
 1 EL: LSSO: Filter out irrelevant support sets
 1 EL: LSSO: Abox predicates are:
 1 stored term Term(test1.owl) which got ID(0x10000000,  68 term constant)
 1 prepareOntology
 1 Loading ontologytest1.owl
 1 Assigning ontology name
 1 Reading file test1.owl
 1 Extracting ontology namespace
 1 Namespace is: http://www.semanticweb.org/dasha/ontologies/2014/9/untitled-ontology-52 (path: /home/dasha/Documents/software/dlliteplugin/examples/annotated/test1.owl, version: )
 1 Submitting ontology with Abox to reasoning kernel
 1 Consistency of KB: 1
 1 Analyzing ontology (Tbox and Abox)
 1 Current triple: http://www.semanticweb.org/dasha/ontologies/2014/9/untitled-ontology-52 / rdf:type / owl:Ontology
 1 Current triple: http://www.semanticweb.org/dasha/ontologies/2014/9/untitled-ontology-52#B / rdf:type / owl:Class
 1 Found concept: "B"
 1 Current triple: http://www.semanticweb.org/dasha/ontologies/2014/9/untitled-ontology-52#C / rdf:type / owl:Class
 1 Found concept: "C"
 1 Current triple: http://www.semanticweb.org/dasha/ontologies/2014/9/untitled-ontology-52#D / rdf:type / owl:Class
 1 Found concept: "D"
 1 Current triple: http://www.semanticweb.org/dasha/ontologies/2014/9/untitled-ontology-52#c / rdf:type / owl:NamedIndividual
 1 Current triple: http://www.semanticweb.org/dasha/ontologies/2014/9/untitled-ontology-52#c / rdf:type / http://www.semanticweb.org/dasha/ontologies/2014/9/untitled-ontology-52#D
 1 NS: Subject is: http://www.semanticweb.org/dasha/ontologies/2014/9/untitled-ontology-52#c
 1 NS: After storage: http://www.semanticweb.org/dasha/ontologies/2014/9/untitled-ontology-52#c
 1 NS: Found individual: "c"
 1 NS: Found concept assertion: D("c")
 1 Concept assertions: {aux_o_0_0("D","c")}
 1 LSS: ABox predicate: "D"
 1 LSSO: consider support set: { aux_n_10000000_e("test1.owl",cp,cn,rp,rm,"C",O), cp("B",Y), aux_o_0_0("-B",Y) }
 1 LSSO: is it of size >3? 3
 1 LSSO: no
 1 LSSO: is aux_n_10000000_e("test1.owl",cp,cn,rp,rm,"C",O) a guard with predicate not occurring in ABox?
 1 LSSO: no
 1 LSSO: is cp("B",Y) a guard with predicate not occurring in ABox?
 1 LSSO: no
 1 LSSO: is aux_o_0_0("-B",Y) a guard with predicate not occurring in ABox?
 1 LSSO: yes
 1 LSSO: support set is marked for elimination
 1 LSSO: if current support set is marked, eliminate it
 1 Deleting nogood { 26, 27, 28 } (index: 0)
 1 LSSO: consider support set: { aux_n_10000000_e("test1.owl",cp,cn,rp,rm,"C",O), aux_o_0_0("C",O) }
 1 LSSO: is it of size >3? 2
 1 LSSO: no
 1 LSSO: is aux_n_10000000_e("test1.owl",cp,cn,rp,rm,"C",O) a guard with predicate not occurring in ABox?
 1 LSSO: no
 1 LSSO: is aux_o_0_0("C",O) a guard with predicate not occurring in ABox?
 1 LSSO: yes
 1 LSSO: support set is marked for elimination
 1 LSSO: if current support set is marked, eliminate it
 1 Deleting nogood { 26, 29 } (index: 1)
 1 LSSO: Number of support sets after elimination: 0
 1 LSS: EL: Finished support set learning
 1 RMG: number of learnt support sets: 0
 1 RMG: consider atom &cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X)
 1 RMG: annotated ground program is constructed
 1 sEA  = ExternalAtomMask::setEAtom for &cDL["test1.owl",cp,cn,rp,rm,"C"](X)  (aux=ID_FAIL) and 0 rules in groundidb
 1 sEA gACS getAuxiliaryConstantSymbol for r ID(0x10000000,  14 term constant)
 1 sEA gACS found ID(0x10c00000,  43 term constant)
 1 sEA gACS getAuxiliaryConstantSymbol for n ID(0x10000000,  14 term constant)
 1 sEA gACS found ID(0x10c00000,  50 term constant)
 1 sEA Adding input predicate cp
 1 sEA PM::aP/0x1ccc5a0 adding predicate ID(0x10000000,  37 term constant), knownAddresses was 0
 1 sEA Adding input predicate cn
 1 sEA PM::aP/0x1ccc5a0 adding predicate ID(0x10000000,  38 term constant), knownAddresses was 0
 1 sEA Adding input predicate rp
 1 sEA PM::aP/0x1ccc5a0 adding predicate ID(0x10000000,  39 term constant), knownAddresses was 0
 1 sEA Adding input predicate rm
 1 sEA PM::aP/0x1ccc5a0 adding predicate ID(0x10000000,  40 term constant), knownAddresses was 0
 1 sEA preparedTuple is <aux_r_10000000_e, "test1.owl", cp, cn, rp, rm, "C", X>
 1 sEA Watching 0 output atoms: {}
 1 sEA gACS getAuxiliaryConstantSymbol for r ID(0x10000000,  14 term constant)
 1 sEA gACS found ID(0x10c00000,  43 term constant)
 1 sEA gACS getAuxiliaryConstantSymbol for n ID(0x10000000,  14 term constant)
 1 sEA gACS found ID(0x10c00000,  50 term constant)
 1 ExternalAtomMask::updateMask
 1 PM::uM(do)/0x1ccc5a0 = PredicateMask::updateMask (need to update) for predicates {37,38,39,40}
 1 PM::uM(do)/0x1ccc5a0 need to inspect 30 missing bits
 1 PM::uM(do)/0x1ccc5a0 relevant predicate constants are cp, cn, rp, rm, 
 1 PM::uM(do)/0x1ccc5a0 updateMask created new set of relevant ogatoms: {cp("B","c")} and knownAddresses is 30
 1 sEA  = ExternalAtomMask::setEAtom for &cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X)  (aux=ID_FAIL) and 0 rules in groundidb
 1 sEA gACS getAuxiliaryConstantSymbol for r ID(0x10000000,  14 term constant)
 1 sEA gACS found ID(0x10c00000,  43 term constant)
 1 sEA gACS getAuxiliaryConstantSymbol for n ID(0x10000000,  14 term constant)
 1 sEA gACS found ID(0x10c00000,  50 term constant)
 1 sEA Adding input predicate cp1
 1 sEA PM::aP/0x1ccc680 adding predicate ID(0x10000000,  32 term constant), knownAddresses was 0
 1 sEA Adding input predicate cn1
 1 sEA PM::aP/0x1ccc680 adding predicate ID(0x10000000,  33 term constant), knownAddresses was 0
 1 sEA Adding input predicate rp1
 1 sEA PM::aP/0x1ccc680 adding predicate ID(0x10000000,  34 term constant), knownAddresses was 0
 1 sEA Adding input predicate rn1
 1 sEA PM::aP/0x1ccc680 adding predicate ID(0x10000000,  35 term constant), knownAddresses was 0
 1 sEA preparedTuple is <aux_r_10000000_e, "test1.owl", cp1, cn1, rp1, rn1, "D", X>
 1 sEA Watching 0 output atoms: {}
 1 sEA gACS getAuxiliaryConstantSymbol for r ID(0x10000000,  14 term constant)
 1 sEA gACS found ID(0x10c00000,  43 term constant)
 1 sEA gACS getAuxiliaryConstantSymbol for n ID(0x10000000,  14 term constant)
 1 sEA gACS found ID(0x10c00000,  50 term constant)
 1 ExternalAtomMask::updateMask
 1 PM::uM(do)/0x1ccc680 = PredicateMask::updateMask (need to update) for predicates {32,33,34,35}
 1 PM::uM(do)/0x1ccc680 need to inspect 30 missing bits
 1 PM::uM(do)/0x1ccc680 relevant predicate constants are cp1, cn1, rp1, rn1, 
 1 PM::uM(do)/0x1ccc680 updateMask created new set of relevant ogatoms: {} and knownAddresses is 30
 1 Contructing atom dependency graph for 0 rules
 1 Computing strongly connected components
 1 Partitioning program
 1 Computing head-cycles of components
 1 Computing e-cycles of components
 1 Program:
EDB: {b("c"),cp("B","c"),aux_d_26000000_0("test1.owl",cp1,cn1,rp1,rn1,"D","c"),aux_d_26000000_1("test1.owl",cp1,cn1,rp1,rn1,"D","c"),int4(0)}
IDB:

has SCC-decomposition: 
 1 RMG: evaluating external atom &cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X) for support set learning
 1 = learnSupportSetsForExternalAtom for &cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X)  (aux=ID_FAIL)
 1 EA::uM/0x1c17c00 ENTRY
 1 EA::uM/0x1c17c00 PM::uM(do)/0x1c177e0 = PredicateMask::updateMask (need to update) for predicates {32,33,34,35}
 1 EA::uM/0x1c17c00 PM::uM(do)/0x1c177e0 need to inspect 22 missing bits
 1 EA::uM/0x1c17c00 PM::uM(do)/0x1c177e0 relevant predicate constants are cp1, cn1, rp1, rn1, 
 1 EA::uM/0x1c17c00 PM::uM(do)/0x1c177e0 updateMask created new set of relevant ogatoms: {} and knownAddresses is 30
 1 EA::uM/0x1c17c00 EXIT
 1 LSS: learning support sets started
 1 LSS: Ontology is in DLLite
 1 prepareOntology
 1 Accessing cached ontology test1.owl
 1 LSS: Using the following model CM of the classification program: CM = {op("B","-B"),sub("B","B"),op("C","-C"),sub("C","C"),op("D","-D"),sub("D","D"),op("-B","B"),op("-C","C"),op("-D","D"),sub("-B","-B"),sub("-C","-C"),sub("-D","-D"),conf("B","-B"),conf("C","-C"),conf("D","-D"),conf("-B","B"),conf("-C","C"),conf("-D","D")}
 1 LSS: query is a concept
 1 Storing output atom which will be part of any support set
 1 Query is a concept
 1 gACS getAuxiliaryConstantSymbol for n ID(0x10000000,  14 term constant)
 1 gACS found ID(0x10c00000,  50 term constant)
 1 stored oatom OrdinaryAtom(1c00000,'aux_n_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D",O)',[ID(0x10c00000,  50 term constant),ID(0x10000000,  31 term constant),ID(0x10000000,  32 term constant),ID(0x10000000,  33 term constant),ID(0x10000000,  34 term constant),ID(0x10000000,  35 term constant),ID(0x10000000,  36 term constant),ID(0x12000000,  60 term variable)]) which got ID(0x01c00000,  30 atom ordinary_nonground)
 1 LSS: IPM: Output atom is aux_n_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D",O)
 1 LSS: Query is "D"
 1 LSS: maximal input is not empty
 1 LSS: Analyzing input to the external atom
 1 LSS: Analyzing query and Abox
 1 Query is a concept
 1 stored oatom OrdinaryAtom(1a00000,'aux_o_0_0("D",O)',[ID(0x10800000,  27 term constant),ID(0x10000000,  36 term constant),ID(0x12000000,  60 term variable)]) which got ID(0x01a00000,  31 atom ordinary_nonground)
 1 LSS: --> Learned support set: { aux_n_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D",O), aux_o_0_0("D",O) }
 1 Hash of { 30, 31 } is 845136820133745
 1 Adding with index 0
 1 LSS: Checking if sub(C, "D") is true in the classification assignment (for some C')
 1 LSS: Current classification atom: op("B","-B")
 1 LSS: Current classification atom: sub("B","B")
 1 LSS: Current classification atom: op("C","-C")
 1 LSS: Current classification atom: sub("C","C")
 1 LSS: Current classification atom: op("D","-D")
 1 LSS: Current classification atom: sub("D","D")
 1 LSS: Found a match with C="D"
 1 LSS: (this is not form exR)
 1 LSS: --> Learned support set: { aux_n_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D",O), aux_o_0_0("D",O) }
 1 Hash of { 30, 31 } is 845136820133745
 1 Already contained with index 0
 1 LSS: Current classification atom: op("-B","B")
 1 LSS: Current classification atom: op("-C","C")
 1 LSS: Current classification atom: op("-D","D")
 1 LSS: Current classification atom: sub("-B","-B")
 1 LSS: Current classification atom: sub("-C","-C")
 1 LSS: Current classification atom: sub("-D","-D")
 1 LSS: Current classification atom: conf("B","-B")
 1 LSS: Current classification atom: conf("C","-C")
 1 LSS: Current classification atom: conf("D","-D")
 1 LSS: Current classification atom: conf("-B","B")
 1 LSS: Current classification atom: conf("-C","C")
 1 LSS: Current classification atom: conf("-D","D")
 1 LSS: Number of learned nogoods: 1
 1 EL: LSSO: Filter out irrelevant support sets
 1 EL: LSSO: Abox predicates are:
 1 prepareOntology
 1 Accessing cached ontology test1.owl
 1 LSS: ABox predicate: "D"
 1 LSSO: consider support set: { aux_n_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D",O), aux_o_0_0("D",O) }
 1 LSSO: is it of size >3? 2
 1 LSSO: no
 1 LSSO: is aux_n_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D",O) a guard with predicate not occurring in ABox?
 1 LSSO: no
 1 LSSO: is aux_o_0_0("D",O) a guard with predicate not occurring in ABox?
 1 LSSO: no
 1 Hash of { 30, 31 } is 845136820133745
 1 Adding with index 0
 1 LSSO: leave this support set
 1 LSSO: Number of support sets after elimination: 1
 1 LSS: EL: Finished support set learning
 1 RMG: number of learnt support sets: 1
 1 RMG: checking support set { aux_n_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D",O), aux_o_0_0("D",O) }
 1 RMG: checking literal aux_n_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D",O)
 1 RMG: checking literal aux_o_0_0("D",O)
 1 RMG: There are no ordinary atoms in support set 
 1 RMG: RULE: (bar_aux_o(C,X)):-aux_o(C,X), n_e_a(Q,O). 
 1 RMG: Check whether there any reasons for not deleting D
 1 RMG: the ontology predicate "D" is allowed for deletion
 1 RMG: RULE: bar_aux_o(C,X):-aux_o(C,X), n_e_a(Q,O). 
 1 stored oatom OrdinaryAtom(1800000,'aux_o_0_1("D",O)',[ID(0x10800000,  59 term constant),ID(0x10000000,  36 term constant),ID(0x12000000,  60 term variable)]) which got ID(0x01800000,  32 atom ordinary_nonground)
 1 gACS getAuxiliaryConstantSymbol for n ID(0x10000000,  14 term constant)
 1 gACS found ID(0x10c00000,  50 term constant)
 1 RMG: RULE: Adding rule: aux_o_0_1("D",O) :- aux_o_0_0("D",O), aux_n_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D",O).
 1 RMG: RULE: supp_e_a(Q,O):-aux_o(C,X),e_a(Q,O), not bar_aux_o(C,X).
 1 gACS getAuxiliaryConstantSymbol for o ID(0x06000000,   0 atom external)
 1 gACS created symbol 'aux_o_6000000_0'
 1 gACS PM::aP/0x1bfb180 adding predicate ID(0x10800000,  69 term constant), knownAddresses was 0
 1 gACS returning id ID(0x10800000,  69 term constant) for aux symbol aux_o_6000000_0
 1 stored oatom OrdinaryAtom(1800000,'aux_o_6000000_0("test1.owl",cp1,cn1,rp1,rn1,"D",O)',[ID(0x10800000,  69 term constant),ID(0x10000000,  31 term constant),ID(0x10000000,  32 term constant),ID(0x10000000,  33 term constant),ID(0x10000000,  34 term constant),ID(0x10000000,  35 term constant),ID(0x10000000,  36 term constant),ID(0x12000000,  60 term variable)]) which got ID(0x01800000,  33 atom ordinary_nonground)
 1 gACS getAuxiliaryConstantSymbol for r ID(0x10000000,  14 term constant)
 1 gACS found ID(0x10c00000,  43 term constant)
 1 stored oatom OrdinaryAtom(1800000,'aux_r_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D",O)',[ID(0x10c00000,  43 term constant),ID(0x10000000,  31 term constant),ID(0x10000000,  32 term constant),ID(0x10000000,  33 term constant),ID(0x10000000,  34 term constant),ID(0x10000000,  35 term constant),ID(0x10000000,  36 term constant),ID(0x12000000,  60 term variable)]) which got ID(0x01800000,  34 atom ordinary_nonground)
 1 RMG: RULE: Adding rule: aux_o_6000000_0("test1.owl",cp1,cn1,rp1,rn1,"D",O) :- aux_o_0_0("D",O), aux_r_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D",O), not aux_o_0_1("D",O).
 1 RMG: RULE: :-e_a(Q,O),not supp_e_a(Q,O).
 1 gACS getAuxiliaryConstantSymbol for r ID(0x10000000,  14 term constant)
 1 gACS found ID(0x10c00000,  43 term constant)
 1 gACS getAuxiliaryConstantSymbol for o ID(0x06000000,   0 atom external)
 1 gACS found ID(0x10800000,  69 term constant)
 1 RMG: RULE: Adding rule: :- aux_r_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D",O), not aux_o_6000000_0("test1.owl",cp1,cn1,rp1,rn1,"D",O).
 1 RMG: Adding Abox
 1  Program edb before adding ABox {b("c"),aux_d_26000000_0("test1.owl",cp1,cn1,rp1,rn1,"D","c"),aux_d_26000000_1("test1.owl",cp1,cn1,rp1,rn1,"D","c")}
 1 prepareOntology
 1 Accessing cached ontology test1.owl
 1 RMG: Program edb after adding ABox {b("c"),aux_o_0_0("D","c"),aux_d_26000000_0("test1.owl",cp1,cn1,rp1,rn1,"D","c"),aux_d_26000000_1("test1.owl",cp1,cn1,rp1,rn1,"D","c")}
 1 RMG: program idb: 
 1 RMG: d(X) :- aux_r_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D",X).
 1 RMG: cp("D",X) :- d(X).
 1 RMG: cp("B",X) :- b(X).
 1 RMG: :- aux_r_10000000_e("test1.owl",cp,cn,rp,rm,"C",X), aux_d_26000000_1("test1.owl",cp,cn,rp,rm,"C",X).
 1 RMG: aux_o_0_1("D",O) :- aux_o_0_0("D",O), aux_n_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D",O).
 1 RMG: aux_o_6000000_0("test1.owl",cp1,cn1,rp1,rn1,"D",O) :- aux_o_0_0("D",O), aux_r_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D",O), not aux_o_0_1("D",O).
 1 RMG: :- aux_r_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D",O), not aux_o_6000000_0("test1.owl",cp1,cn1,rp1,rn1,"D",O).
 1 Instantiating genuine grounder with gringo
 1 Creating new term with name 'int8'
 1 stored term Term(int8) which got ID(0x10000000,  70 term constant)
 1 Creating new term with name 'anonymous9'
 1 stored term Term(anonymous9) which got ID(0x10000000,  71 term constant)
 1 Sending the following input to Gringo: {{b("c").aux_o_0_0("D","c").aux_d_26000000_0("test1.owl",cp1,cn1,rp1,rn1,"D","c").aux_d_26000000_1("test1.owl",cp1,cn1,rp1,rn1,"D","c").
d(X) :- aux_r_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D",X).
cp("D",X) :- d(X).
cp("B",X) :- b(X).
 :- aux_r_10000000_e("test1.owl",cp,cn,rp,rm,"C",X), aux_d_26000000_1("test1.owl",cp,cn,rp,rm,"C",X).
aux_o_0_1("D",O) :- aux_o_0_0("D",O), aux_n_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D",O).
aux_o_6000000_0("test1.owl",cp1,cn1,rp1,rn1,"D",O) :- aux_o_0_0("D",O), aux_r_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D",O), not aux_o_0_1("D",O).
 :- aux_r_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D",O), not aux_o_6000000_0("test1.owl",cp1,cn1,rp1,rn1,"D",O).
int8(0..0).}}
 1 Got atom cp("B","c") with Gringo-ID 6 and dlvhex-ID ID(0x00000000,   1 atom ordinary_ground)
 1 Got atom b("c") with Gringo-ID 2 and dlvhex-ID ID(0x00000000,   0 atom ordinary_ground)
 1 Got atom aux_d_26000000_1("test1.owl",cp1,cn1,rp1,rn1,"D","c") with Gringo-ID 5 and dlvhex-ID ID(0x00800000,   6 atom ordinary_ground)
 1 Got atom aux_o_0_0("D","c") with Gringo-ID 3 and dlvhex-ID ID(0x00a00000,   3 atom ordinary_ground)
 1 parsing gringo ground atom 'int8(0)'
 1 Term tuple: int8
 1 got token 'int8'
 1 Term tuple: 0
 1 got token '0'
 1 Got atom int8(0) with Gringo-ID 7 and dlvhex-ID ID(0x00000000,  30 atom ordinary_ground)
 1 Got atom aux_d_26000000_0("test1.owl",cp1,cn1,rp1,rn1,"D","c") with Gringo-ID 4 and dlvhex-ID ID(0x00800000,   5 atom ordinary_ground)
 1 Transforming 6 rules to DLVHEX
 1 Setting fact 0 (Gringo: 2)
 1 Setting fact 3 (Gringo: 3)
 1 Setting fact 5 (Gringo: 4)
 1 Setting fact 6 (Gringo: 5)
 1 Setting fact 1 (Gringo: 6)
 1 Setting fact 30 (Gringo: 7)
 1 Got the following ground program from Gringo: {b("c").cp("B","c").aux_o_0_0("D","c").aux_d_26000000_0("test1.owl",cp1,cn1,rp1,rn1,"D","c").aux_d_26000000_1("test1.owl",cp1,cn1,rp1,rn1,"D","c").int8(0).

}
 1 RMG: after grounding
 1 sEA  = ExternalAtomMask::setEAtom for &cDL["test1.owl",cp,cn,rp,rm,"C"](X)  (aux=ID_FAIL) and 0 rules in groundidb
 1 sEA gACS getAuxiliaryConstantSymbol for r ID(0x10000000,  14 term constant)
 1 sEA gACS found ID(0x10c00000,  43 term constant)
 1 sEA gACS getAuxiliaryConstantSymbol for n ID(0x10000000,  14 term constant)
 1 sEA gACS found ID(0x10c00000,  50 term constant)
 1 sEA Adding input predicate cp
 1 sEA PM::aP/0x1c92370 adding predicate ID(0x10000000,  37 term constant), knownAddresses was 0
 1 sEA Adding input predicate cn
 1 sEA PM::aP/0x1c92370 adding predicate ID(0x10000000,  38 term constant), knownAddresses was 0
 1 sEA Adding input predicate rp
 1 sEA PM::aP/0x1c92370 adding predicate ID(0x10000000,  39 term constant), knownAddresses was 0
 1 sEA Adding input predicate rm
 1 sEA PM::aP/0x1c92370 adding predicate ID(0x10000000,  40 term constant), knownAddresses was 0
 1 sEA preparedTuple is <aux_r_10000000_e, "test1.owl", cp, cn, rp, rm, "C", X>
 1 sEA Watching 0 output atoms: {}
 1 sEA gACS getAuxiliaryConstantSymbol for r ID(0x10000000,  14 term constant)
 1 sEA gACS found ID(0x10c00000,  43 term constant)
 1 sEA gACS getAuxiliaryConstantSymbol for n ID(0x10000000,  14 term constant)
 1 sEA gACS found ID(0x10c00000,  50 term constant)
 1 ExternalAtomMask::updateMask
 1 PM::uM(do)/0x1c92370 = PredicateMask::updateMask (need to update) for predicates {37,38,39,40}
 1 PM::uM(do)/0x1c92370 need to inspect 31 missing bits
 1 PM::uM(do)/0x1c92370 relevant predicate constants are cp, cn, rp, rm, 
 1 PM::uM(do)/0x1c92370 updateMask created new set of relevant ogatoms: {cp("B","c")} and knownAddresses is 31
 1 sEA  = ExternalAtomMask::setEAtom for &cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X)  (aux=ID_FAIL) and 0 rules in groundidb
 1 sEA gACS getAuxiliaryConstantSymbol for r ID(0x10000000,  14 term constant)
 1 sEA gACS found ID(0x10c00000,  43 term constant)
 1 sEA gACS getAuxiliaryConstantSymbol for n ID(0x10000000,  14 term constant)
 1 sEA gACS found ID(0x10c00000,  50 term constant)
 1 sEA Adding input predicate cp1
 1 sEA PM::aP/0x1cbd880 adding predicate ID(0x10000000,  32 term constant), knownAddresses was 0
 1 sEA Adding input predicate cn1
 1 sEA PM::aP/0x1cbd880 adding predicate ID(0x10000000,  33 term constant), knownAddresses was 0
 1 sEA Adding input predicate rp1
 1 sEA PM::aP/0x1cbd880 adding predicate ID(0x10000000,  34 term constant), knownAddresses was 0
 1 sEA Adding input predicate rn1
 1 sEA PM::aP/0x1cbd880 adding predicate ID(0x10000000,  35 term constant), knownAddresses was 0
 1 sEA preparedTuple is <aux_r_10000000_e, "test1.owl", cp1, cn1, rp1, rn1, "D", X>
 1 sEA Watching 0 output atoms: {}
 1 sEA gACS getAuxiliaryConstantSymbol for r ID(0x10000000,  14 term constant)
 1 sEA gACS found ID(0x10c00000,  43 term constant)
 1 sEA gACS getAuxiliaryConstantSymbol for n ID(0x10000000,  14 term constant)
 1 sEA gACS found ID(0x10c00000,  50 term constant)
 1 ExternalAtomMask::updateMask
 1 PM::uM(do)/0x1cbd880 = PredicateMask::updateMask (need to update) for predicates {32,33,34,35}
 1 PM::uM(do)/0x1cbd880 need to inspect 31 missing bits
 1 PM::uM(do)/0x1cbd880 relevant predicate constants are cp1, cn1, rp1, rn1, 
 1 PM::uM(do)/0x1cbd880 updateMask created new set of relevant ogatoms: {} and knownAddresses is 31
 1 Contructing atom dependency graph for 0 rules
 1 Computing strongly connected components
 1 Partitioning program
 1 Computing head-cycles of components
 1 Computing e-cycles of components
 1 Program:
EDB: {b("c"),cp("B","c"),aux_o_0_0("D","c"),aux_d_26000000_0("test1.owl",cp1,cn1,rp1,rn1,"D","c"),aux_d_26000000_1("test1.owl",cp1,cn1,rp1,rn1,"D","c"),int8(0)}
IDB:

has SCC-decomposition: 
 1 RMG: annotated ground program is constructed
 1 Instantiating genuine solver with clasp (min-check: 0)
 1 Configure clasp in ASP mode
 1 Interpreting clasp command-line
 1 Found configuration: --configuration=frumpy
 1 Configuring options
 1 Parsing command-line
 1 Assigning specified values
 1 Assigning defaults
 1 Applying options
 1 Finished option parsing
 1 Sending EDB to clasp: {b("c"),cp("B","c"),aux_o_0_0("D","c"),aux_d_26000000_0("test1.owl",cp1,cn1,rp1,rn1,"D","c"),aux_d_26000000_1("test1.owl",cp1,cn1,rp1,rn1,"D","c"),int8(0)}
 1 Sending IDB to clasp
 1 SAT instance has 1 variables
 1 Instance is not inconsistent
 1 Setting all 1 variables to frozen
 1 Prepare model enumerator
 1 Finalizing initialization
 1 Problem has 1 variables
 1 Symbol table of optimized program:
 1 H:0 (b("c")) <--> C:0/0
 1 H:1 (cp("B","c")) <--> C:0/0
 1 H:3 (aux_o_0_0("D","c")) <--> C:0/0
 1 H:5 (aux_d_26000000_0("test1.owl",cp1,cn1,rp1,rn1,"D","c")) <--> C:0/0
 1 H:6 (aux_d_26000000_1("test1.owl",cp1,cn1,rp1,rn1,"D","c")) <--> C:0/0
 1 H:30 (int8(0)) <--> C:0/0
 1 hexToClasp.size()=31, symTab.size()=6
 1 Prepare solver object
 1 Adding post propagator
 1 Initializing assignment extraction
 1 Adding watch for literal C:0/0 and its negation
 1 Adding watch for literal C:0/0 and its negation
 1 Adding watch for literal C:0/0 and its negation
 1 Adding watch for literal C:0/0 and its negation
 1 Adding watch for literal C:0/0 and its negation
 1 Adding watch for literal C:0/0 and its negation
 1 Extracting full interpretation from clasp
 1 Extracting clasp interpretation
 1 Literal C:0/0@0,H:0:b("c") is true
 1 Literal C:0/0@0,H:1:cp("B","c") is true
 1 Literal C:0/0@0,H:3:aux_o_0_0("D","c") is true
 1 Literal C:0/0@0,H:5:aux_d_26000000_0("test1.owl",cp1,cn1,rp1,rn1,"D","c") is true
 1 Literal C:0/0@0,H:6:aux_d_26000000_1("test1.owl",cp1,cn1,rp1,rn1,"D","c") is true
 1 Literal C:0/0@0,H:30:int8(0) is true
 1 Removing watch for literal C:0/0 and its negation
 1 Removing watch for literal C:0/0 and its negation
 1 Removing watch for literal C:0/0 and its negation
 1 Removing watch for literal C:0/0 and its negation
 1 Removing watch for literal C:0/0 and its negation
 1 RMG: after creating a nogood grounder
 1 RMG: RepairModelGenerator constructor is finished
 1 RMG: asking for next model
 1 ClaspSolver::getNextModel
 1 Model enumeration algorithm: (ini)
 1 Starting new search
 1 Adding step literal to assumptions
 1 Starting enumerator with 1 assumptions (including step literal)
 1 ExternalPropagator::propagateFixpoint
 1 Will not propagate to HEX
 1 ExternalPropagator: Adding new clauses to clasp (0 were prepared)
 1 Nothing more to propagate
 1 ExternalPropagator::propagateFixpoint
 1 Will not propagate to HEX
 1 ExternalPropagator: Adding new clauses to clasp (0 were prepared)
 1 Nothing more to propagate
 1 Model enumeration algorithm: (sat)
 1 Instance is satisfiable wrt. assumptions
 1 Model enumeration algorithm: (sol)
 1 Solve for next model
 1 ExternalPropagator::propagateFixpoint
 1 Will not propagate to HEX
 1 ExternalPropagator: Adding new clauses to clasp (0 were prepared)
 1 Nothing more to propagate
 1 ExternalPropagator::isModel
 1 Must propagate to HEX
 1 ExternalPropagator: Calling HEX-Propagator
 1 Extracting clasp interpretation
 1 Literal C:0/0@0,H:0:b("c") is true
 1 Literal C:0/0@0,H:1:cp("B","c") is true
 1 Literal C:0/0@0,H:3:aux_o_0_0("D","c") is true
 1 Literal C:0/0@0,H:5:aux_d_26000000_0("test1.owl",cp1,cn1,rp1,rn1,"D","c") is true
 1 Literal C:0/0@0,H:6:aux_d_26000000_1("test1.owl",cp1,cn1,rp1,rn1,"D","c") is true
 1 Literal C:0/0@0,H:30:int8(0) is true
 1 Partial assignment: {b("c"),cp("B","c"),aux_o_0_0("D","c"),aux_d_26000000_0("test1.owl",cp1,cn1,rp1,rn1,"D","c"),aux_d_26000000_1("test1.owl",cp1,cn1,rp1,rn1,"D","c"),int8(0)} (assigned: {b("c"),cp("B","c"),aux_o_0_0("D","c"),aux_d_26000000_0("test1.owl",cp1,cn1,rp1,rn1,"D","c"),aux_d_26000000_1("test1.owl",cp1,cn1,rp1,rn1,"D","c"),int8(0)})
Incrementally extracted partial assignment: {b("c"),cp("B","c"),aux_o_0_0("D","c"),aux_d_26000000_0("test1.owl",cp1,cn1,rp1,rn1,"D","c"),aux_d_26000000_1("test1.owl",cp1,cn1,rp1,rn1,"D","c"),int8(0)} (assigned: {b("c"),cp("B","c"),aux_o_0_0("D","c"),aux_d_26000000_0("test1.owl",cp1,cn1,rp1,rn1,"D","c"),aux_d_26000000_1("test1.owl",cp1,cn1,rp1,rn1,"D","c"),int8(0)})
Changed atoms: {b("c"),cp("B","c"),aux_o_0_0("D","c"),aux_d_26000000_0("test1.owl",cp1,cn1,rp1,rn1,"D","c"),aux_d_26000000_1("test1.owl",cp1,cn1,rp1,rn1,"D","c"),int8(0)}
 1 ExternalPropagator: Adding new clauses to clasp (0 were prepared)
 1 Model enumeration algorithm: (com)
 1 Committing model
 1 Model enumeration algorithm: (ext)
 1 Extract model model
 1 Projected to {b("c"),cp("B","c"),aux_o_0_0("D","c"),aux_d_26000000_0("test1.owl",cp1,cn1,rp1,rn1,"D","c"),aux_d_26000000_1("test1.owl",cp1,cn1,rp1,rn1,"D","c")}
 1 Model enumeration algorithm: (ret)
 1 Returning model
 1 RMG: Statistics:
Guesses: 0
Conflicts: 0
Models: 1
 1 gM RMG: got guess model {b("c"),cp("B","c"),aux_o_0_0("D","c"),aux_d_26000000_0("test1.owl",cp1,cn1,rp1,rn1,"D","c"),aux_d_26000000_1("test1.owl",cp1,cn1,rp1,rn1,"D","c")}
 1 gM RMG: PC: evaluation post check is started:
 1 gM RMG: PC: current model candidate is: {b("c"),cp("B","c"),aux_o_0_0("D","c"),aux_d_26000000_0("test1.owl",cp1,cn1,rp1,rn1,"D","c"),aux_d_26000000_1("test1.owl",cp1,cn1,rp1,rn1,"D","c")}
 1 gM gACS getAuxiliaryConstantSymbol for o ID(0x00000000,   0 atom ordinary_ground)
 1 gM gACS found ID(0x10800000,  27 term constant)
 1 gM gACS getAuxiliaryConstantSymbol for o ID(0x00000000,   1 atom ordinary_ground)
 1 gM gACS found ID(0x10800000,  59 term constant)
 1 gM stored oatom OrdinaryAtom(800000,'aux_o_0_1("D","c")',[ID(0x10800000,  59 term constant),ID(0x10000000,  36 term constant),ID(0x10000000,  29 term constant)]) which got ID(0x00800000,  31 atom ordinary_ground)
 1 gM RMG: PC: final ABox is: {
 1 gM RMG: PC: aux_o_0_0("D","c")
 1 gM RMG: PC:}
 1 running debug checks
 1 =OnlineModelBuilder<...>::createIModelFromPredecessorOModels(1)
 1 gSI =getSuccessorIntersection(1,1)
 1 gSI one-dependency shortcut: simply finding corresponding model
 1 gSI no successors
 1 running debug checks
 1 got model#0:{b("c"),cp("B","c"),aux_o_0_0("D","c"),aux_d_26000000_0("test1.owl",cp1,cn1,rp1,rn1,"D","c"),aux_d_26000000_1("test1.owl",cp1,cn1,rp1,rn1,"D","c")}
 1 getTypeByAuxiliaryConstantSymbol for ID(0x10800000,  27 term constant)
 1 found ID(0x10800000,  27 term constant)
 1 getTypeByAuxiliaryConstantSymbol for ID(0x10800000,  54 term constant)
 1 found ID(0x10800000,  54 term constant)
 1 getTypeByAuxiliaryConstantSymbol for ID(0x10800000,  44 term constant)
 1 found ID(0x10800000,  44 term constant)
 1 New global optimum: 
 1 printing for user id 0
 1 PM::uM(do)/0x1bfb180 = PredicateMask::updateMask (need to update) for predicates {27,43,44,45,46,50,54,59,69}
 1 PM::uM(do)/0x1bfb180 need to inspect 32 missing bits
 1 PM::uM(do)/0x1bfb180 relevant predicate constants are aux_o_0_0, aux_r_10000000_e, aux_d_26000000_1, aux_r_26000000_1, aux_n_26000000_1, aux_n_10000000_e, aux_d_26000000_0, aux_o_0_1, aux_o_6000000_0, 
 1 PM::uM(do)/0x1bfb180 updateMask created new set of relevant ogatoms: {aux_o_0_0("D","c"),aux_r_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D","c"),aux_d_26000000_0("test1.owl",cp1,cn1,rp1,rn1,"D","c"),aux_d_26000000_1("test1.owl",cp1,cn1,rp1,rn1,"D","c"),aux_o_0_1("D","c")} and knownAddresses is 32
 1 printing for user id 1
 1 printing for user id 3
 1 printing auxiliary 3 (reconstructed id ID(0x00800000,   3 atom ordinary_ground))
 1 printing for user id 5
 1 printing auxiliary 5 (reconstructed id ID(0x00800000,   5 atom ordinary_ground))
 1 printing for user id 6
 1 printing auxiliary 6 (reconstructed id ID(0x00800000,   6 atom ordinary_ground))
 1 requesting imodel
 1 =OnlineModelBuilder<...>::getNextIModel(1)
 1 uprops: (no ModelGeneratorFactory)
 1 mbprops: currentmg =      null, needInput = 1, orefcount = 0, imodel = 0x1c2a880, currentisuccessor = unset
 1 =OnlineModelBuilder<...>::ensureModelIncrement(1,0)
 1 ucursor = 0 with mbprops = {currentmg = 0x1c26e30, needInput = 0, orefcount = 1, imodel = 0x1c26c20, currentisuccessor = 0x1c29ea0 -> 0x1c26c20}
 1 =OnlineModelBuilder<...>::getNextOModel(0):
 1 uprops = outer Eatoms={
&cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X)
}
inner Eatoms={
&cDL["test1.owl",cp,cn,rp,rm,"C"](X)
&cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X)
}
idb={
d(X) :- &cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X).
cp("D",X) :- d(X).
cp("B",X) :- b(X).
:- &cDL["test1.owl",cp,cn,rp,rm,"C"](X), aux_d_26000000_1("test1.owl",cp,cn,rp,rm,"C",X).
}
xidb={
d(X) :- aux_r_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D",X).
cp("D",X) :- d(X).
cp("B",X) :- b(X).
:- aux_r_10000000_e("test1.owl",cp,cn,rp,rm,"C",X), aux_d_26000000_1("test1.owl",cp,cn,rp,rm,"C",X).
}

 1 mbprops = currentmg = 0x1c26e30, needInput = 0, orefcount = 1, imodel = 0x1c26c20, currentisuccessor = 0x1c29ea0 -> 0x1c26c20
 1 =OnlineModelBuilder<...>::advanceOModelForIModel(0)
 1 imodel has properties dummy interpretation=null
 1 =createNextModel(0)
 1 RMG: asking for next model
 1 ClaspSolver::getNextModel
 1 Model enumeration algorithm: (cos)
 1 Committing symmetric model
 1 No more symmetric models, going to update
 1 Model enumeration algorithm: (upd)
 1 Updating enumerator
 1 Model enumeration algorithm: (sol)
 1 Solve for next model
 1 Model enumeration algorithm: (ret)
 1 Returning empty model
 1 RMG: Statistics:
Guesses: 0
Conflicts: 0
Models: 1
 1 RMG: unsatisfiable -> returning no model
 1 Final Statistics:
Guesses: 0
Conflicts: 0
Models: 1
 1 Removing watch for literal C:0/0 and its negation
 1 Removing watch for literal C:0/0 and its negation
 1 Removing watch for literal C:0/0 and its negation
 1 Removing watch for literal C:0/0 and its negation
 1 Removing watch for literal C:0/0 and its negation
 1 Removing watch for literal C:0/0 and its negation
 1 =OnlineModelBuilder<...>::getNextIModel(0)
 1 uprops: outer Eatoms={
&cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X)
}
inner Eatoms={
&cDL["test1.owl",cp,cn,rp,rm,"C"](X)
&cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X)
}
idb={
d(X) :- &cDL["test1.owl",cp1,cn1,rp1,rn1,"D"](X).
cp("D",X) :- d(X).
cp("B",X) :- b(X).
:- &cDL["test1.owl",cp,cn,rp,rm,"C"](X), aux_d_26000000_1("test1.owl",cp,cn,rp,rm,"C",X).
}
xidb={
d(X) :- aux_r_10000000_e("test1.owl",cp1,cn1,rp1,rn1,"D",X).
cp("D",X) :- d(X).
cp("B",X) :- b(X).
:- aux_r_10000000_e("test1.owl",cp,cn,rp,rm,"C",X), aux_d_26000000_1("test1.owl",cp,cn,rp,rm,"C",X).
}

 1 mbprops: currentmg =      null, needInput = 0, orefcount = 0, imodel = 0x1c26c20, currentisuccessor = unset
 1 unit needs no input
 1 usage count of model builder before reset is 1
 1 ~EvalUnitModels()@0x1c26a60
 1 ~EvalUnitModels()@0x1c26a70
 1 ~EvalUnitModels()@0x1c26a80
 1 resetting custom model generator provider
 1 resetting state
 1 resetting callbacks
 1 resetting modelBuilder
 1 resetting parser
 1 resetting evalgraph
 1 resetting compgraph
 1 Destructing component graph 0x1c19180
 1 resetting depgraph
 1 resetting edbList
 1 resetting inputProvider
 1 resetting aspsoftware
 1 resetting pluginData
 1 resetting pluginEnvironment
 1 resetting registry, usage count was 149 (it should be 2)
 1 resetting pluginAtoms
 1 resetting pluginContainer, usage count was 1 (it should be 1)
 1 unloading plugins
 1 about to unload loaded plugin 'dlvhex-dlliteplugin'
 1 unloading plugin 'dlvhex-functionplugin[internal]' not necessary (NULL handle)
 1 unloading plugin 'dlvhex-existsplugin[internal]' not necessary (NULL handle)
 1 unloading plugin 'dlvhex-weakconstraintplugin[internal]' not necessary (NULL handle)
 1 unloading plugin 'dlvhex-higherorderplugin[internal]' not necessary (NULL handle)
 1 unloading plugin 'dlvhex-strongnegationplugin[internal]' not necessary (NULL handle)
 1 unloading plugin 'dlvhex-aggregateplugin[internal]' not necessary (NULL handle)
 1 unloading plugin 'dlvhex-queryplugin[internal]' not necessary (NULL handle)
 1 unloading plugin 'dlvhex-manualevalheuristicsplugin[internal]' not necessary (NULL handle)
 1 done unloading
