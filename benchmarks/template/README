README
======

To create a new benchmark for the DLLite-Plugin proceed as follows:

1. Create a copy of the folder "template"
2. Provide your problem encoding as HEX-program "program.hex";
   in this program, use the constant OWLONTOLOGY (without quotes)
   to refer to the owl-file containing the ontology. The scripts will
   automatically replace this constant by the name of a
   concrete instance.
3. Provide your ontology IN TWO PARTS:
   - ontology_header.owl must contain the part of the owl file
     which should come before the Abox assertions;
   - ontology_footer.owl must contain the part of the owl file
     which should come after the Abox assertions
     (e.g. closing XML tags, etc).
4. Edit the script "generate.sh" and list the concepts and roles from
   your ontology at the top.
5. Make sure that the folder "instances" exists and run

     ./generateset.sh i1 i2 i3 p1 p2 p3 c

   where i1 is the minimal instance size (number of individuals)
         i2 is the maximal instance size (number of individuals)
         i3 is the step size between instance sizes

         p1 is the minimal role assertion probability*
         p2 is the maximal role assertion probability
         p3 is the step size between role assertion probabilities

         c is the number of instances for every combination of size
           and role assertion probability

   For instance,

     ./generateset.sh 10 100 10 2 10 2 100

   creates 100 instances for each number of individuals
   from {10, 20, ..., 100} and each role assertion probability
   from {2, 4, ..., 10}.

6a. The set of all instances can be evaluated by calling

     ./benchmark_all.sh

     IMPORTANT: This works only if the Condor load balancing system
                is installed!

6b. To run a single instance, cd to the "instances" folder and call

     ../benchmark_single.sh "$PATH" "$LD_LIBRARY_PATH" INSTANCE TO > INSTANCE.out

    where INSTANCE is to be replaced by the name of a HEX-program in the
    instances folder, and TO is the desired timeout in seconds.)

7. To create a table with all results, cd back to the root directory of
   the benchmark and call

     cat instances/*.out | ./doaggregation.sh > table.dat

     IMPORTANT: This works only if the statistics system R is installed!

8. To create a LaTeX representation, use the script

	https://github.com/hexhex/benchmarks/scripts/tolatextable.sh
        (git clone https://github.com/hexhex/benchmarks --recursive)

   by calling

     cat table.dat | ./doaggregation.sh > table.dat

   This creates the "body" of the tables, i.e., header, etc need
   to be created manually.



* The role assertion probability p specifies for a given
  pair (ci, cj) of individuals and role R the probability, that
  (exactly) one of the assertions R(ci, cj) or -R(ci, cj) is added
  to the Abox.
  Thus, with higher p the "connectivity" of the Abox increases.
